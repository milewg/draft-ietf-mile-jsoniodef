#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sat Mar 17 21:00:20 2018 by generateDS.py version 2.29.3.
# Python 3.6.3 |Anaconda, Inc.| (default, Oct  6 2017, 12:04:38)  [GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)]
#
# Command line options:
#   ('-o', 'iodef2_api.py')
#   ('-s', 'xml2json1.py')
#   ('--super', 'iodef2_api')
#
# Command line arguments:
#   iodef-2.0.xsd
#
# Command line:
#   /Users/mio/.pyenv/versions/miniconda3-4.3.30/bin/generateDS.py -o "iodef2_api.py" -s "xml2json1.py" --super="iodef2_api" iodef-2.0.xsd
#
# Current working directory (os.getcwd()):
#   xml2json
#

import base64
import datetime as datetime_
import re as re_
import sys
import warnings as warnings_

try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class IncidentIDType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, instance=None, restriction=None, ext_restriction=None, valueOf_=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.instance = _cast(None, instance)
        self.restriction = _cast(None, restriction)
        self.ext_restriction = _cast(None, ext_restriction)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IncidentIDType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IncidentIDType.subclass:
            return IncidentIDType.subclass(*args_, **kwargs_)
        else:
            return IncidentIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_instance(self): return self.instance
    def set_instance(self, instance): self.instance = instance
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def get_ext_restriction(self): return self.ext_restriction
    def set_ext_restriction(self, ext_restriction): self.ext_restriction = ext_restriction
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='IncidentIDType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IncidentIDType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IncidentIDType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='IncidentIDType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='IncidentIDType'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.instance is not None and 'instance' not in already_processed:
            already_processed.add('instance')
            outfile.write(' instance=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.instance), input_name='instance')), ))
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
        if self.ext_restriction is not None and 'ext_restriction' not in already_processed:
            already_processed.add('ext_restriction')
            outfile.write(' ext-restriction=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_restriction), input_name='ext-restriction')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='IncidentIDType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('instance', node)
        if value is not None and 'instance' not in already_processed:
            already_processed.add('instance')
            self.instance = value
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
        value = find_attr_value_('ext-restriction', node)
        if value is not None and 'ext-restriction' not in already_processed:
            already_processed.add('ext-restriction')
            self.ext_restriction = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class IncidentIDType


class ThreatActor(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, restriction=None, ext_restriction=None, ThreatActorID=None, URL=None, Description=None, AdditionalData=None):
        self.original_tagname_ = None
        self.restriction = _cast(None, restriction)
        self.ext_restriction = _cast(None, ext_restriction)
        if ThreatActorID is None:
            self.ThreatActorID = []
        else:
            self.ThreatActorID = ThreatActorID
        if URL is None:
            self.URL = []
        else:
            self.URL = URL
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
        if AdditionalData is None:
            self.AdditionalData = []
        else:
            self.AdditionalData = AdditionalData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ThreatActor)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ThreatActor.subclass:
            return ThreatActor.subclass(*args_, **kwargs_)
        else:
            return ThreatActor(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ThreatActorID(self): return self.ThreatActorID
    def set_ThreatActorID(self, ThreatActorID): self.ThreatActorID = ThreatActorID
    def add_ThreatActorID(self, value): self.ThreatActorID.append(value)
    def insert_ThreatActorID_at(self, index, value): self.ThreatActorID.insert(index, value)
    def replace_ThreatActorID_at(self, index, value): self.ThreatActorID[index] = value
    def get_URL(self): return self.URL
    def set_URL(self, URL): self.URL = URL
    def add_URL(self, value): self.URL.append(value)
    def insert_URL_at(self, index, value): self.URL.insert(index, value)
    def replace_URL_at(self, index, value): self.URL[index] = value
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def get_AdditionalData(self): return self.AdditionalData
    def set_AdditionalData(self, AdditionalData): self.AdditionalData = AdditionalData
    def add_AdditionalData(self, value): self.AdditionalData.append(value)
    def insert_AdditionalData_at(self, index, value): self.AdditionalData.insert(index, value)
    def replace_AdditionalData_at(self, index, value): self.AdditionalData[index] = value
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def get_ext_restriction(self): return self.ext_restriction
    def set_ext_restriction(self, ext_restriction): self.ext_restriction = ext_restriction
    def hasContent_(self):
        if (
            self.ThreatActorID or
            self.URL or
            self.Description or
            self.AdditionalData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='ThreatActor', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ThreatActor')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ThreatActor')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='ThreatActor', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='ThreatActor'):
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
        if self.ext_restriction is not None and 'ext_restriction' not in already_processed:
            already_processed.add('ext_restriction')
            outfile.write(' ext-restriction=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_restriction), input_name='ext-restriction')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='ThreatActor', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ThreatActorID_ in self.ThreatActorID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:ThreatActorID>%s</iodef:ThreatActorID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(ThreatActorID_), input_name='ThreatActorID')), eol_))
        for URL_ in self.URL:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:URL>%s</iodef:URL>%s' % (self.gds_encode(self.gds_format_string(quote_xml(URL_), input_name='URL')), eol_))
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
        for AdditionalData_ in self.AdditionalData:
            AdditionalData_.export(outfile, level, namespace_='iodef:', name_='AdditionalData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
        value = find_attr_value_('ext-restriction', node)
        if value is not None and 'ext-restriction' not in already_processed:
            already_processed.add('ext-restriction')
            self.ext_restriction = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ThreatActorID':
            ThreatActorID_ = child_.text
            ThreatActorID_ = self.gds_validate_string(ThreatActorID_, node, 'ThreatActorID')
            self.ThreatActorID.append(ThreatActorID_)
        elif nodeName_ == 'URL':
            URL_ = child_.text
            URL_ = self.gds_validate_string(URL_, node, 'URL')
            self.URL.append(URL_)
        elif nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'AdditionalData':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.AdditionalData.append(obj_)
            obj_.original_tagname_ = 'AdditionalData'
# end class ThreatActor


class Campaign(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, restriction=None, ext_restriction=None, CampaignID=None, URL=None, Description=None, AdditionalData=None):
        self.original_tagname_ = None
        self.restriction = _cast(None, restriction)
        self.ext_restriction = _cast(None, ext_restriction)
        if CampaignID is None:
            self.CampaignID = []
        else:
            self.CampaignID = CampaignID
        if URL is None:
            self.URL = []
        else:
            self.URL = URL
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
        if AdditionalData is None:
            self.AdditionalData = []
        else:
            self.AdditionalData = AdditionalData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Campaign)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Campaign.subclass:
            return Campaign.subclass(*args_, **kwargs_)
        else:
            return Campaign(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CampaignID(self): return self.CampaignID
    def set_CampaignID(self, CampaignID): self.CampaignID = CampaignID
    def add_CampaignID(self, value): self.CampaignID.append(value)
    def insert_CampaignID_at(self, index, value): self.CampaignID.insert(index, value)
    def replace_CampaignID_at(self, index, value): self.CampaignID[index] = value
    def get_URL(self): return self.URL
    def set_URL(self, URL): self.URL = URL
    def add_URL(self, value): self.URL.append(value)
    def insert_URL_at(self, index, value): self.URL.insert(index, value)
    def replace_URL_at(self, index, value): self.URL[index] = value
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def get_AdditionalData(self): return self.AdditionalData
    def set_AdditionalData(self, AdditionalData): self.AdditionalData = AdditionalData
    def add_AdditionalData(self, value): self.AdditionalData.append(value)
    def insert_AdditionalData_at(self, index, value): self.AdditionalData.insert(index, value)
    def replace_AdditionalData_at(self, index, value): self.AdditionalData[index] = value
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def get_ext_restriction(self): return self.ext_restriction
    def set_ext_restriction(self, ext_restriction): self.ext_restriction = ext_restriction
    def hasContent_(self):
        if (
            self.CampaignID or
            self.URL or
            self.Description or
            self.AdditionalData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Campaign', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Campaign')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Campaign')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Campaign', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Campaign'):
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
        if self.ext_restriction is not None and 'ext_restriction' not in already_processed:
            already_processed.add('ext_restriction')
            outfile.write(' ext-restriction=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_restriction), input_name='ext-restriction')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Campaign', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CampaignID_ in self.CampaignID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:CampaignID>%s</iodef:CampaignID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(CampaignID_), input_name='CampaignID')), eol_))
        for URL_ in self.URL:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:URL>%s</iodef:URL>%s' % (self.gds_encode(self.gds_format_string(quote_xml(URL_), input_name='URL')), eol_))
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
        for AdditionalData_ in self.AdditionalData:
            AdditionalData_.export(outfile, level, namespace_='iodef:', name_='AdditionalData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
        value = find_attr_value_('ext-restriction', node)
        if value is not None and 'ext-restriction' not in already_processed:
            already_processed.add('ext-restriction')
            self.ext_restriction = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CampaignID':
            CampaignID_ = child_.text
            CampaignID_ = self.gds_validate_string(CampaignID_, node, 'CampaignID')
            self.CampaignID.append(CampaignID_)
        elif nodeName_ == 'URL':
            URL_ = child_.text
            URL_ = self.gds_validate_string(URL_, node, 'URL')
            self.URL.append(URL_)
        elif nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'AdditionalData':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.AdditionalData.append(obj_)
            obj_.original_tagname_ = 'AdditionalData'
# end class Campaign


class Discovery(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, source='unknown', ext_source=None, restriction=None, ext_restriction=None, Description=None, Contact=None, DetectionPattern=None):
        self.original_tagname_ = None
        self.source = _cast(None, source)
        self.ext_source = _cast(None, ext_source)
        self.restriction = _cast(None, restriction)
        self.ext_restriction = _cast(None, ext_restriction)
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        if DetectionPattern is None:
            self.DetectionPattern = []
        else:
            self.DetectionPattern = DetectionPattern
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Discovery)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Discovery.subclass:
            return Discovery.subclass(*args_, **kwargs_)
        else:
            return Discovery(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_DetectionPattern(self): return self.DetectionPattern
    def set_DetectionPattern(self, DetectionPattern): self.DetectionPattern = DetectionPattern
    def add_DetectionPattern(self, value): self.DetectionPattern.append(value)
    def insert_DetectionPattern_at(self, index, value): self.DetectionPattern.insert(index, value)
    def replace_DetectionPattern_at(self, index, value): self.DetectionPattern[index] = value
    def get_source(self): return self.source
    def set_source(self, source): self.source = source
    def get_ext_source(self): return self.ext_source
    def set_ext_source(self, ext_source): self.ext_source = ext_source
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def get_ext_restriction(self): return self.ext_restriction
    def set_ext_restriction(self, ext_restriction): self.ext_restriction = ext_restriction
    def validate_discovery_source_type(self, value):
        # Validate type discovery-source-type, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['nidps', 'hips', 'siem', 'av', 'third-party-monitoring', 'incident', 'os-log', 'application-log', 'device-log', 'network-flow', 'passive-dns', 'investigation', 'audit', 'internal-notification', 'external-notification', 'leo', 'partner', 'actor', 'unknown', 'ext-value']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on discovery-source-type' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Description or
            self.Contact or
            self.DetectionPattern
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Discovery', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Discovery')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Discovery')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Discovery', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Discovery'):
        if self.source != "unknown" and 'source' not in already_processed:
            already_processed.add('source')
            outfile.write(' source=%s' % (quote_attrib(self.source), ))
        if self.ext_source is not None and 'ext_source' not in already_processed:
            already_processed.add('ext_source')
            outfile.write(' ext-source=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_source), input_name='ext-source')), ))
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
        if self.ext_restriction is not None and 'ext_restriction' not in already_processed:
            already_processed.add('ext_restriction')
            outfile.write(' ext-restriction=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_restriction), input_name='ext-restriction')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Discovery', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_='iodef:', name_='Contact', pretty_print=pretty_print)
        for DetectionPattern_ in self.DetectionPattern:
            DetectionPattern_.export(outfile, level, namespace_='iodef:', name_='DetectionPattern', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('source', node)
        if value is not None and 'source' not in already_processed:
            already_processed.add('source')
            self.source = value
            self.validate_discovery_source_type(self.source)    # validate type discovery-source-type
        value = find_attr_value_('ext-source', node)
        if value is not None and 'ext-source' not in already_processed:
            already_processed.add('ext-source')
            self.ext_source = value
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
        value = find_attr_value_('ext-restriction', node)
        if value is not None and 'ext-restriction' not in already_processed:
            already_processed.add('ext-restriction')
            self.ext_restriction = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Contact':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'DetectionPattern':
            obj_ = DetectionPattern.factory()
            obj_.build(child_)
            self.DetectionPattern.append(obj_)
            obj_.original_tagname_ = 'DetectionPattern'
# end class Discovery


class DetectionPattern(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, restriction=None, ext_restriction=None, observable_id=None, Application=None, Description=None, DetectionConfiguration=None):
        self.original_tagname_ = None
        self.restriction = _cast(None, restriction)
        self.ext_restriction = _cast(None, ext_restriction)
        self.observable_id = _cast(None, observable_id)
        self.Application = Application
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
        if DetectionConfiguration is None:
            self.DetectionConfiguration = []
        else:
            self.DetectionConfiguration = DetectionConfiguration
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DetectionPattern)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DetectionPattern.subclass:
            return DetectionPattern.subclass(*args_, **kwargs_)
        else:
            return DetectionPattern(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Application(self): return self.Application
    def set_Application(self, Application): self.Application = Application
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def get_DetectionConfiguration(self): return self.DetectionConfiguration
    def set_DetectionConfiguration(self, DetectionConfiguration): self.DetectionConfiguration = DetectionConfiguration
    def add_DetectionConfiguration(self, value): self.DetectionConfiguration.append(value)
    def insert_DetectionConfiguration_at(self, index, value): self.DetectionConfiguration.insert(index, value)
    def replace_DetectionConfiguration_at(self, index, value): self.DetectionConfiguration[index] = value
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def get_ext_restriction(self): return self.ext_restriction
    def set_ext_restriction(self, ext_restriction): self.ext_restriction = ext_restriction
    def get_observable_id(self): return self.observable_id
    def set_observable_id(self, observable_id): self.observable_id = observable_id
    def hasContent_(self):
        if (
            self.Application is not None or
            self.Description or
            self.DetectionConfiguration
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='DetectionPattern', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DetectionPattern')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DetectionPattern')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='DetectionPattern', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='DetectionPattern'):
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
        if self.ext_restriction is not None and 'ext_restriction' not in already_processed:
            already_processed.add('ext_restriction')
            outfile.write(' ext-restriction=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_restriction), input_name='ext-restriction')), ))
        if self.observable_id is not None and 'observable_id' not in already_processed:
            already_processed.add('observable_id')
            outfile.write(' observable-id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.observable_id), input_name='observable-id')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='DetectionPattern', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Application is not None:
            self.Application.export(outfile, level, namespace_='iodef:', name_='Application', pretty_print=pretty_print)
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
        for DetectionConfiguration_ in self.DetectionConfiguration:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:DetectionConfiguration>%s</iodef:DetectionConfiguration>%s' % (self.gds_encode(self.gds_format_string(quote_xml(DetectionConfiguration_), input_name='DetectionConfiguration')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
        value = find_attr_value_('ext-restriction', node)
        if value is not None and 'ext-restriction' not in already_processed:
            already_processed.add('ext-restriction')
            self.ext_restriction = value
        value = find_attr_value_('observable-id', node)
        if value is not None and 'observable-id' not in already_processed:
            already_processed.add('observable-id')
            self.observable_id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Application':
            obj_ = SoftwareType.factory()
            obj_.build(child_)
            self.Application = obj_
            obj_.original_tagname_ = 'Application'
        elif nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'DetectionConfiguration':
            DetectionConfiguration_ = child_.text
            DetectionConfiguration_ = self.gds_validate_string(DetectionConfiguration_, node, 'DetectionConfiguration')
            self.DetectionConfiguration.append(DetectionConfiguration_)
# end class DetectionPattern


class SystemImpact(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, severity=None, completion=None, type_='unknown', ext_type=None, Description=None):
        self.original_tagname_ = None
        self.severity = _cast(None, severity)
        self.completion = _cast(None, completion)
        self.type_ = _cast(None, type_)
        self.ext_type = _cast(None, ext_type)
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SystemImpact)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SystemImpact.subclass:
            return SystemImpact.subclass(*args_, **kwargs_)
        else:
            return SystemImpact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def get_severity(self): return self.severity
    def set_severity(self, severity): self.severity = severity
    def get_completion(self): return self.completion
    def set_completion(self, completion): self.completion = completion
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_ext_type(self): return self.ext_type
    def set_ext_type(self, ext_type): self.ext_type = ext_type
    def validate_systemimpact_type_type(self, value):
        # Validate type systemimpact-type-type, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['takeover-account', 'takeover-service', 'takeover-system', 'cps-manipulation', 'cps-damage', 'availability-data', 'availability-account', 'availability-service', 'availability-system', 'damaged-system', 'damaged-data', 'breach-proprietary', 'breach-privacy', 'breach-credential', 'breach-configuration', 'integrity-data', 'integrity-configuration', 'integrity-hardware', 'traffic-redirection', 'monitoring-traffic', 'monitoring-host', 'policy', 'unknown', 'ext-value']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on systemimpact-type-type' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Description
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='SystemImpact', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SystemImpact')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SystemImpact')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='SystemImpact', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='SystemImpact'):
        if self.severity is not None and 'severity' not in already_processed:
            already_processed.add('severity')
            outfile.write(' severity=%s' % (quote_attrib(self.severity), ))
        if self.completion is not None and 'completion' not in already_processed:
            already_processed.add('completion')
            outfile.write(' completion=%s' % (quote_attrib(self.completion), ))
        if self.type_ != "unknown" and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.ext_type is not None and 'ext_type' not in already_processed:
            already_processed.add('ext_type')
            outfile.write(' ext-type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_type), input_name='ext-type')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='SystemImpact', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('severity', node)
        if value is not None and 'severity' not in already_processed:
            already_processed.add('severity')
            self.severity = value
        value = find_attr_value_('completion', node)
        if value is not None and 'completion' not in already_processed:
            already_processed.add('completion')
            self.completion = value
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
            self.validate_systemimpact_type_type(self.type_)    # validate type systemimpact-type-type
        value = find_attr_value_('ext-type', node)
        if value is not None and 'ext-type' not in already_processed:
            already_processed.add('ext-type')
            self.ext_type = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
# end class SystemImpact


class BusinessImpactType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, severity=None, ext_severity=None, type_='unknown', ext_type=None, Description=None):
        self.original_tagname_ = None
        self.severity = _cast(None, severity)
        self.ext_severity = _cast(None, ext_severity)
        self.type_ = _cast(None, type_)
        self.ext_type = _cast(None, ext_type)
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BusinessImpactType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BusinessImpactType.subclass:
            return BusinessImpactType.subclass(*args_, **kwargs_)
        else:
            return BusinessImpactType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def get_severity(self): return self.severity
    def set_severity(self, severity): self.severity = severity
    def get_ext_severity(self): return self.ext_severity
    def set_ext_severity(self, ext_severity): self.ext_severity = ext_severity
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_ext_type(self): return self.ext_type
    def set_ext_type(self, ext_type): self.ext_type = ext_type
    def validate_businessimpact_severity_type(self, value):
        # Validate type businessimpact-severity-type, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['none', 'low', 'medium', 'high', 'unknown', 'ext-value']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on businessimpact-severity-type' % {"value" : value.encode("utf-8")} )
    def validate_businessimpact_type_type(self, value):
        # Validate type businessimpact-type-type, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['breach-proprietary', 'breach-privacy', 'breach-credential', 'loss-of-integrity', 'loss-of-service', 'theft-financial', 'theft-service', 'degraded-reputation', 'asset-damage', 'asset-manipulation', 'legal', 'extortion', 'unknown', 'ext-value']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on businessimpact-type-type' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Description
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='BusinessImpactType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BusinessImpactType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BusinessImpactType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='BusinessImpactType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='BusinessImpactType'):
        if self.severity is not None and 'severity' not in already_processed:
            already_processed.add('severity')
            outfile.write(' severity=%s' % (quote_attrib(self.severity), ))
        if self.ext_severity is not None and 'ext_severity' not in already_processed:
            already_processed.add('ext_severity')
            outfile.write(' ext-severity=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_severity), input_name='ext-severity')), ))
        if self.type_ != "unknown" and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.ext_type is not None and 'ext_type' not in already_processed:
            already_processed.add('ext_type')
            outfile.write(' ext-type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_type), input_name='ext-type')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='BusinessImpactType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('severity', node)
        if value is not None and 'severity' not in already_processed:
            already_processed.add('severity')
            self.severity = value
            self.validate_businessimpact_severity_type(self.severity)    # validate type businessimpact-severity-type
        value = find_attr_value_('ext-severity', node)
        if value is not None and 'ext-severity' not in already_processed:
            already_processed.add('ext-severity')
            self.ext_severity = value
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
            self.validate_businessimpact_type_type(self.type_)    # validate type businessimpact-type-type
        value = find_attr_value_('ext-type', node)
        if value is not None and 'ext-type' not in already_processed:
            already_processed.add('ext-type')
            self.ext_type = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
# end class BusinessImpactType


class ApplicationHeader(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ApplicationHeaderField=None):
        self.original_tagname_ = None
        if ApplicationHeaderField is None:
            self.ApplicationHeaderField = []
        else:
            self.ApplicationHeaderField = ApplicationHeaderField
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ApplicationHeader)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ApplicationHeader.subclass:
            return ApplicationHeader.subclass(*args_, **kwargs_)
        else:
            return ApplicationHeader(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ApplicationHeaderField(self): return self.ApplicationHeaderField
    def set_ApplicationHeaderField(self, ApplicationHeaderField): self.ApplicationHeaderField = ApplicationHeaderField
    def add_ApplicationHeaderField(self, value): self.ApplicationHeaderField.append(value)
    def insert_ApplicationHeaderField_at(self, index, value): self.ApplicationHeaderField.insert(index, value)
    def replace_ApplicationHeaderField_at(self, index, value): self.ApplicationHeaderField[index] = value
    def hasContent_(self):
        if (
            self.ApplicationHeaderField
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='ApplicationHeader', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ApplicationHeader')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ApplicationHeader')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='ApplicationHeader', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='ApplicationHeader'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='ApplicationHeader', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ApplicationHeaderField_ in self.ApplicationHeaderField:
            ApplicationHeaderField_.export(outfile, level, namespace_='iodef:', name_='ApplicationHeaderField', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ApplicationHeaderField':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.ApplicationHeaderField.append(obj_)
            obj_.original_tagname_ = 'ApplicationHeaderField'
# end class ApplicationHeader


class ServiceName(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IANAService=None, URL=None, Description=None):
        self.original_tagname_ = None
        self.IANAService = IANAService
        if URL is None:
            self.URL = []
        else:
            self.URL = URL
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceName)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceName.subclass:
            return ServiceName.subclass(*args_, **kwargs_)
        else:
            return ServiceName(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IANAService(self): return self.IANAService
    def set_IANAService(self, IANAService): self.IANAService = IANAService
    def get_URL(self): return self.URL
    def set_URL(self, URL): self.URL = URL
    def add_URL(self, value): self.URL.append(value)
    def insert_URL_at(self, index, value): self.URL.insert(index, value)
    def replace_URL_at(self, index, value): self.URL[index] = value
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def hasContent_(self):
        if (
            self.IANAService is not None or
            self.URL or
            self.Description
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='ServiceName', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceName')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceName')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='ServiceName', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='ServiceName'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='ServiceName', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IANAService is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:IANAService>%s</iodef:IANAService>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.IANAService), input_name='IANAService')), eol_))
        for URL_ in self.URL:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:URL>%s</iodef:URL>%s' % (self.gds_encode(self.gds_format_string(quote_xml(URL_), input_name='URL')), eol_))
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IANAService':
            IANAService_ = child_.text
            IANAService_ = self.gds_validate_string(IANAService_, node, 'IANAService')
            self.IANAService = IANAService_
        elif nodeName_ == 'URL':
            URL_ = child_.text
            URL_ = self.gds_validate_string(URL_, node, 'URL')
            self.URL.append(URL_)
        elif nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
# end class ServiceName


class EmailData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, observable_id=None, EmailTo=None, EmailFrom=None, EmailSubject=None, EmailX_Mailer=None, EmailHeaderField=None, EmailHeaders=None, EmailBody=None, EmailMessage=None, HashData=None, SignatureData=None):
        self.original_tagname_ = None
        self.observable_id = _cast(None, observable_id)
        if EmailTo is None:
            self.EmailTo = []
        else:
            self.EmailTo = EmailTo
        self.EmailFrom = EmailFrom
        self.EmailSubject = EmailSubject
        self.EmailX_Mailer = EmailX_Mailer
        if EmailHeaderField is None:
            self.EmailHeaderField = []
        else:
            self.EmailHeaderField = EmailHeaderField
        self.EmailHeaders = EmailHeaders
        self.EmailBody = EmailBody
        self.EmailMessage = EmailMessage
        if HashData is None:
            self.HashData = []
        else:
            self.HashData = HashData
        if SignatureData is None:
            self.SignatureData = []
        else:
            self.SignatureData = SignatureData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EmailData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EmailData.subclass:
            return EmailData.subclass(*args_, **kwargs_)
        else:
            return EmailData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EmailTo(self): return self.EmailTo
    def set_EmailTo(self, EmailTo): self.EmailTo = EmailTo
    def add_EmailTo(self, value): self.EmailTo.append(value)
    def insert_EmailTo_at(self, index, value): self.EmailTo.insert(index, value)
    def replace_EmailTo_at(self, index, value): self.EmailTo[index] = value
    def get_EmailFrom(self): return self.EmailFrom
    def set_EmailFrom(self, EmailFrom): self.EmailFrom = EmailFrom
    def get_EmailSubject(self): return self.EmailSubject
    def set_EmailSubject(self, EmailSubject): self.EmailSubject = EmailSubject
    def get_EmailX_Mailer(self): return self.EmailX_Mailer
    def set_EmailX_Mailer(self, EmailX_Mailer): self.EmailX_Mailer = EmailX_Mailer
    def get_EmailHeaderField(self): return self.EmailHeaderField
    def set_EmailHeaderField(self, EmailHeaderField): self.EmailHeaderField = EmailHeaderField
    def add_EmailHeaderField(self, value): self.EmailHeaderField.append(value)
    def insert_EmailHeaderField_at(self, index, value): self.EmailHeaderField.insert(index, value)
    def replace_EmailHeaderField_at(self, index, value): self.EmailHeaderField[index] = value
    def get_EmailHeaders(self): return self.EmailHeaders
    def set_EmailHeaders(self, EmailHeaders): self.EmailHeaders = EmailHeaders
    def get_EmailBody(self): return self.EmailBody
    def set_EmailBody(self, EmailBody): self.EmailBody = EmailBody
    def get_EmailMessage(self): return self.EmailMessage
    def set_EmailMessage(self, EmailMessage): self.EmailMessage = EmailMessage
    def get_HashData(self): return self.HashData
    def set_HashData(self, HashData): self.HashData = HashData
    def add_HashData(self, value): self.HashData.append(value)
    def insert_HashData_at(self, index, value): self.HashData.insert(index, value)
    def replace_HashData_at(self, index, value): self.HashData[index] = value
    def get_SignatureData(self): return self.SignatureData
    def set_SignatureData(self, SignatureData): self.SignatureData = SignatureData
    def add_SignatureData(self, value): self.SignatureData.append(value)
    def insert_SignatureData_at(self, index, value): self.SignatureData.insert(index, value)
    def replace_SignatureData_at(self, index, value): self.SignatureData[index] = value
    def get_observable_id(self): return self.observable_id
    def set_observable_id(self, observable_id): self.observable_id = observable_id
    def hasContent_(self):
        if (
            self.EmailTo or
            self.EmailFrom is not None or
            self.EmailSubject is not None or
            self.EmailX_Mailer is not None or
            self.EmailHeaderField or
            self.EmailHeaders is not None or
            self.EmailBody is not None or
            self.EmailMessage is not None or
            self.HashData or
            self.SignatureData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='EmailData', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EmailData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EmailData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='EmailData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='EmailData'):
        if self.observable_id is not None and 'observable_id' not in already_processed:
            already_processed.add('observable_id')
            outfile.write(' observable-id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.observable_id), input_name='observable-id')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='EmailData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EmailTo_ in self.EmailTo:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:EmailTo>%s</iodef:EmailTo>%s' % (self.gds_encode(self.gds_format_string(quote_xml(EmailTo_), input_name='EmailTo')), eol_))
        if self.EmailFrom is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:EmailFrom>%s</iodef:EmailFrom>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EmailFrom), input_name='EmailFrom')), eol_))
        if self.EmailSubject is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:EmailSubject>%s</iodef:EmailSubject>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EmailSubject), input_name='EmailSubject')), eol_))
        if self.EmailX_Mailer is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:EmailX-Mailer>%s</iodef:EmailX-Mailer>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EmailX_Mailer), input_name='EmailX-Mailer')), eol_))
        for EmailHeaderField_ in self.EmailHeaderField:
            EmailHeaderField_.export(outfile, level, namespace_='iodef:', name_='EmailHeaderField', pretty_print=pretty_print)
        if self.EmailHeaders is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:EmailHeaders>%s</iodef:EmailHeaders>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EmailHeaders), input_name='EmailHeaders')), eol_))
        if self.EmailBody is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:EmailBody>%s</iodef:EmailBody>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EmailBody), input_name='EmailBody')), eol_))
        if self.EmailMessage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:EmailMessage>%s</iodef:EmailMessage>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EmailMessage), input_name='EmailMessage')), eol_))
        for HashData_ in self.HashData:
            HashData_.export(outfile, level, namespace_='iodef:', name_='HashData', pretty_print=pretty_print)
        for SignatureData_ in self.SignatureData:
            SignatureData_.export(outfile, level, namespace_, name_='SignatureData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('observable-id', node)
        if value is not None and 'observable-id' not in already_processed:
            already_processed.add('observable-id')
            self.observable_id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EmailTo':
            EmailTo_ = child_.text
            EmailTo_ = self.gds_validate_string(EmailTo_, node, 'EmailTo')
            self.EmailTo.append(EmailTo_)
        elif nodeName_ == 'EmailFrom':
            EmailFrom_ = child_.text
            EmailFrom_ = self.gds_validate_string(EmailFrom_, node, 'EmailFrom')
            self.EmailFrom = EmailFrom_
        elif nodeName_ == 'EmailSubject':
            EmailSubject_ = child_.text
            EmailSubject_ = self.gds_validate_string(EmailSubject_, node, 'EmailSubject')
            self.EmailSubject = EmailSubject_
        elif nodeName_ == 'EmailX-Mailer':
            EmailX_Mailer_ = child_.text
            EmailX_Mailer_ = self.gds_validate_string(EmailX_Mailer_, node, 'EmailX_Mailer')
            self.EmailX_Mailer = EmailX_Mailer_
        elif nodeName_ == 'EmailHeaderField':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.EmailHeaderField.append(obj_)
            obj_.original_tagname_ = 'EmailHeaderField'
        elif nodeName_ == 'EmailHeaders':
            EmailHeaders_ = child_.text
            EmailHeaders_ = self.gds_validate_string(EmailHeaders_, node, 'EmailHeaders')
            self.EmailHeaders = EmailHeaders_
        elif nodeName_ == 'EmailBody':
            EmailBody_ = child_.text
            EmailBody_ = self.gds_validate_string(EmailBody_, node, 'EmailBody')
            self.EmailBody = EmailBody_
        elif nodeName_ == 'EmailMessage':
            EmailMessage_ = child_.text
            EmailMessage_ = self.gds_validate_string(EmailMessage_, node, 'EmailMessage')
            self.EmailMessage = EmailMessage_
        elif nodeName_ == 'HashData':
            obj_ = HashData.factory()
            obj_.build(child_)
            self.HashData.append(obj_)
            obj_.original_tagname_ = 'HashData'
        elif nodeName_ == 'SignatureData':
            obj_ = SignatureData.factory()
            obj_.build(child_)
            self.SignatureData.append(obj_)
            obj_.original_tagname_ = 'SignatureData'
# end class EmailData


class DomainData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, system_status=None, ext_system_status=None, domain_status=None, ext_domain_status=None, observable_id=None, Name=None, DateDomainWasChecked=None, RegistrationDate=None, ExpirationDate=None, RelatedDNS=None, Nameservers=None, DomainContacts=None):
        self.original_tagname_ = None
        self.system_status = _cast(None, system_status)
        self.ext_system_status = _cast(None, ext_system_status)
        self.domain_status = _cast(None, domain_status)
        self.ext_domain_status = _cast(None, ext_domain_status)
        self.observable_id = _cast(None, observable_id)
        self.Name = Name
        if isinstance(DateDomainWasChecked, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DateDomainWasChecked, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = DateDomainWasChecked
        self.DateDomainWasChecked = initvalue_
        if isinstance(RegistrationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RegistrationDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = RegistrationDate
        self.RegistrationDate = initvalue_
        if isinstance(ExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExpirationDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ExpirationDate
        self.ExpirationDate = initvalue_
        if RelatedDNS is None:
            self.RelatedDNS = []
        else:
            self.RelatedDNS = RelatedDNS
        if Nameservers is None:
            self.Nameservers = []
        else:
            self.Nameservers = Nameservers
        self.DomainContacts = DomainContacts
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DomainData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DomainData.subclass:
            return DomainData.subclass(*args_, **kwargs_)
        else:
            return DomainData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_DateDomainWasChecked(self): return self.DateDomainWasChecked
    def set_DateDomainWasChecked(self, DateDomainWasChecked): self.DateDomainWasChecked = DateDomainWasChecked
    def get_RegistrationDate(self): return self.RegistrationDate
    def set_RegistrationDate(self, RegistrationDate): self.RegistrationDate = RegistrationDate
    def get_ExpirationDate(self): return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate): self.ExpirationDate = ExpirationDate
    def get_RelatedDNS(self): return self.RelatedDNS
    def set_RelatedDNS(self, RelatedDNS): self.RelatedDNS = RelatedDNS
    def add_RelatedDNS(self, value): self.RelatedDNS.append(value)
    def insert_RelatedDNS_at(self, index, value): self.RelatedDNS.insert(index, value)
    def replace_RelatedDNS_at(self, index, value): self.RelatedDNS[index] = value
    def get_Nameservers(self): return self.Nameservers
    def set_Nameservers(self, Nameservers): self.Nameservers = Nameservers
    def add_Nameservers(self, value): self.Nameservers.append(value)
    def insert_Nameservers_at(self, index, value): self.Nameservers.insert(index, value)
    def replace_Nameservers_at(self, index, value): self.Nameservers[index] = value
    def get_DomainContacts(self): return self.DomainContacts
    def set_DomainContacts(self, DomainContacts): self.DomainContacts = DomainContacts
    def get_system_status(self): return self.system_status
    def set_system_status(self, system_status): self.system_status = system_status
    def get_ext_system_status(self): return self.ext_system_status
    def set_ext_system_status(self, ext_system_status): self.ext_system_status = ext_system_status
    def get_domain_status(self): return self.domain_status
    def set_domain_status(self, domain_status): self.domain_status = domain_status
    def get_ext_domain_status(self): return self.ext_domain_status
    def set_ext_domain_status(self, ext_domain_status): self.ext_domain_status = ext_domain_status
    def get_observable_id(self): return self.observable_id
    def set_observable_id(self, observable_id): self.observable_id = observable_id
    def validate_domaindata_system_status_type(self, value):
        # Validate type domaindata-system-status-type, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['spoofed', 'fraudulent', 'innocent-hacked', 'innocent-hijacked', 'unknown', 'ext-value']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on domaindata-system-status-type' % {"value" : value.encode("utf-8")} )
    def validate_domaindata_domain_status_type(self, value):
        # Validate type domaindata-domain-status-type, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['reservedDelegation', 'assignedAndActive', 'assignedAndInactive', 'assignedAndOnHold', 'revoked', 'transferPending', 'registryLock', 'registrarLock', 'other', 'unknown', 'ext-value']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on domaindata-domain-status-type' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Name is not None or
            self.DateDomainWasChecked is not None or
            self.RegistrationDate is not None or
            self.ExpirationDate is not None or
            self.RelatedDNS or
            self.Nameservers or
            self.DomainContacts is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='DomainData', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DomainData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DomainData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='DomainData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='DomainData'):
        if self.system_status is not None and 'system_status' not in already_processed:
            already_processed.add('system_status')
            outfile.write(' system-status=%s' % (quote_attrib(self.system_status), ))
        if self.ext_system_status is not None and 'ext_system_status' not in already_processed:
            already_processed.add('ext_system_status')
            outfile.write(' ext-system-status=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_system_status), input_name='ext-system-status')), ))
        if self.domain_status is not None and 'domain_status' not in already_processed:
            already_processed.add('domain_status')
            outfile.write(' domain-status=%s' % (quote_attrib(self.domain_status), ))
        if self.ext_domain_status is not None and 'ext_domain_status' not in already_processed:
            already_processed.add('ext_domain_status')
            outfile.write(' ext-domain-status=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_domain_status), input_name='ext-domain-status')), ))
        if self.observable_id is not None and 'observable_id' not in already_processed:
            already_processed.add('observable_id')
            outfile.write(' observable-id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.observable_id), input_name='observable-id')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='DomainData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:Name>%s</iodef:Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.DateDomainWasChecked is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:DateDomainWasChecked>%s</iodef:DateDomainWasChecked>%s' % (self.gds_format_datetime(self.DateDomainWasChecked, input_name='DateDomainWasChecked'), eol_))
        if self.RegistrationDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:RegistrationDate>%s</iodef:RegistrationDate>%s' % (self.gds_format_datetime(self.RegistrationDate, input_name='RegistrationDate'), eol_))
        if self.ExpirationDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:ExpirationDate>%s</iodef:ExpirationDate>%s' % (self.gds_format_datetime(self.ExpirationDate, input_name='ExpirationDate'), eol_))
        for RelatedDNS_ in self.RelatedDNS:
            RelatedDNS_.export(outfile, level, namespace_='iodef:', name_='RelatedDNS', pretty_print=pretty_print)
        for Nameservers_ in self.Nameservers:
            Nameservers_.export(outfile, level, namespace_='iodef:', name_='Nameservers', pretty_print=pretty_print)
        if self.DomainContacts is not None:
            self.DomainContacts.export(outfile, level, namespace_='iodef:', name_='DomainContacts', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('system-status', node)
        if value is not None and 'system-status' not in already_processed:
            already_processed.add('system-status')
            self.system_status = value
            self.validate_domaindata_system_status_type(self.system_status)    # validate type domaindata-system-status-type
        value = find_attr_value_('ext-system-status', node)
        if value is not None and 'ext-system-status' not in already_processed:
            already_processed.add('ext-system-status')
            self.ext_system_status = value
        value = find_attr_value_('domain-status', node)
        if value is not None and 'domain-status' not in already_processed:
            already_processed.add('domain-status')
            self.domain_status = value
            self.validate_domaindata_domain_status_type(self.domain_status)    # validate type domaindata-domain-status-type
        value = find_attr_value_('ext-domain-status', node)
        if value is not None and 'ext-domain-status' not in already_processed:
            already_processed.add('ext-domain-status')
            self.ext_domain_status = value
        value = find_attr_value_('observable-id', node)
        if value is not None and 'observable-id' not in already_processed:
            already_processed.add('observable-id')
            self.observable_id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'DateDomainWasChecked':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.DateDomainWasChecked = dval_
        elif nodeName_ == 'RegistrationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.RegistrationDate = dval_
        elif nodeName_ == 'ExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ExpirationDate = dval_
        elif nodeName_ == 'RelatedDNS':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.RelatedDNS.append(obj_)
            obj_.original_tagname_ = 'RelatedDNS'
        elif nodeName_ == 'Nameservers':
            obj_ = Nameservers.factory()
            obj_.build(child_)
            self.Nameservers.append(obj_)
            obj_.original_tagname_ = 'Nameservers'
        elif nodeName_ == 'DomainContacts':
            obj_ = DomainContacts.factory()
            obj_.build(child_)
            self.DomainContacts = obj_
            obj_.original_tagname_ = 'DomainContacts'
# end class DomainData


class Nameservers(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Server=None, Address=None):
        self.original_tagname_ = None
        self.Server = Server
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Nameservers)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Nameservers.subclass:
            return Nameservers.subclass(*args_, **kwargs_)
        else:
            return Nameservers(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Server(self): return self.Server
    def set_Server(self, Server): self.Server = Server
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def hasContent_(self):
        if (
            self.Server is not None or
            self.Address
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Nameservers', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Nameservers')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Nameservers')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Nameservers', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Nameservers'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Nameservers', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Server is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:Server>%s</iodef:Server>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Server), input_name='Server')), eol_))
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_='iodef:', name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Server':
            Server_ = child_.text
            Server_ = self.gds_validate_string(Server_, node, 'Server')
            self.Server = Server_
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
# end class Nameservers


class DomainContacts(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SameDomainContact=None, Contact=None):
        self.original_tagname_ = None
        self.SameDomainContact = SameDomainContact
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DomainContacts)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DomainContacts.subclass:
            return DomainContacts.subclass(*args_, **kwargs_)
        else:
            return DomainContacts(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SameDomainContact(self): return self.SameDomainContact
    def set_SameDomainContact(self, SameDomainContact): self.SameDomainContact = SameDomainContact
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def hasContent_(self):
        if (
            self.SameDomainContact is not None or
            self.Contact
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='DomainContacts', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DomainContacts')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DomainContacts')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='DomainContacts', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='DomainContacts'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='DomainContacts', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SameDomainContact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:SameDomainContact>%s</iodef:SameDomainContact>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SameDomainContact), input_name='SameDomainContact')), eol_))
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_='iodef:', name_='Contact', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SameDomainContact':
            SameDomainContact_ = child_.text
            SameDomainContact_ = self.gds_validate_string(SameDomainContact_, node, 'SameDomainContact')
            self.SameDomainContact = SameDomainContact_
        elif nodeName_ == 'Contact':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
# end class DomainContacts


class WindowsRegistryKeysModified(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, observable_id=None, Key=None):
        self.original_tagname_ = None
        self.observable_id = _cast(None, observable_id)
        if Key is None:
            self.Key = []
        else:
            self.Key = Key
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WindowsRegistryKeysModified)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WindowsRegistryKeysModified.subclass:
            return WindowsRegistryKeysModified.subclass(*args_, **kwargs_)
        else:
            return WindowsRegistryKeysModified(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Key(self): return self.Key
    def set_Key(self, Key): self.Key = Key
    def add_Key(self, value): self.Key.append(value)
    def insert_Key_at(self, index, value): self.Key.insert(index, value)
    def replace_Key_at(self, index, value): self.Key[index] = value
    def get_observable_id(self): return self.observable_id
    def set_observable_id(self, observable_id): self.observable_id = observable_id
    def hasContent_(self):
        if (
            self.Key
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='WindowsRegistryKeysModified', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WindowsRegistryKeysModified')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WindowsRegistryKeysModified')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='WindowsRegistryKeysModified', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='WindowsRegistryKeysModified'):
        if self.observable_id is not None and 'observable_id' not in already_processed:
            already_processed.add('observable_id')
            outfile.write(' observable-id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.observable_id), input_name='observable-id')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='WindowsRegistryKeysModified', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Key_ in self.Key:
            Key_.export(outfile, level, namespace_='iodef:', name_='Key', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('observable-id', node)
        if value is not None and 'observable-id' not in already_processed:
            already_processed.add('observable-id')
            self.observable_id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Key':
            obj_ = Key.factory()
            obj_.build(child_)
            self.Key.append(obj_)
            obj_.original_tagname_ = 'Key'
# end class WindowsRegistryKeysModified


class Key(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, registryaction=None, ext_registryaction=None, observable_id=None, KeyName=None, Value=None):
        self.original_tagname_ = None
        self.registryaction = _cast(None, registryaction)
        self.ext_registryaction = _cast(None, ext_registryaction)
        self.observable_id = _cast(None, observable_id)
        self.KeyName = KeyName
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Key)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Key.subclass:
            return Key.subclass(*args_, **kwargs_)
        else:
            return Key(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_KeyName(self): return self.KeyName
    def set_KeyName(self, KeyName): self.KeyName = KeyName
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_registryaction(self): return self.registryaction
    def set_registryaction(self, registryaction): self.registryaction = registryaction
    def get_ext_registryaction(self): return self.ext_registryaction
    def set_ext_registryaction(self, ext_registryaction): self.ext_registryaction = ext_registryaction
    def get_observable_id(self): return self.observable_id
    def set_observable_id(self, observable_id): self.observable_id = observable_id
    def validate_key_registryaction_type(self, value):
        # Validate type key-registryaction-type, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['add-key', 'add-value', 'delete-key', 'delete-value', 'modify-key', 'modify-value', 'ext-value']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on key-registryaction-type' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.KeyName is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Key', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Key')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Key')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Key', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Key'):
        if self.registryaction is not None and 'registryaction' not in already_processed:
            already_processed.add('registryaction')
            outfile.write(' registryaction=%s' % (quote_attrib(self.registryaction), ))
        if self.ext_registryaction is not None and 'ext_registryaction' not in already_processed:
            already_processed.add('ext_registryaction')
            outfile.write(' ext-registryaction=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_registryaction), input_name='ext-registryaction')), ))
        if self.observable_id is not None and 'observable_id' not in already_processed:
            already_processed.add('observable_id')
            outfile.write(' observable-id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.observable_id), input_name='observable-id')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Key', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.KeyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:KeyName>%s</iodef:KeyName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.KeyName), input_name='KeyName')), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:Value>%s</iodef:Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('registryaction', node)
        if value is not None and 'registryaction' not in already_processed:
            already_processed.add('registryaction')
            self.registryaction = value
            self.validate_key_registryaction_type(self.registryaction)    # validate type key-registryaction-type
        value = find_attr_value_('ext-registryaction', node)
        if value is not None and 'ext-registryaction' not in already_processed:
            already_processed.add('ext-registryaction')
            self.ext_registryaction = value
        value = find_attr_value_('observable-id', node)
        if value is not None and 'observable-id' not in already_processed:
            already_processed.add('observable-id')
            self.observable_id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'KeyName':
            KeyName_ = child_.text
            KeyName_ = self.gds_validate_string(KeyName_, node, 'KeyName')
            self.KeyName = KeyName_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class Key


class FileData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, restriction=None, ext_restriction=None, observable_id=None, File=None):
        self.original_tagname_ = None
        self.restriction = _cast(None, restriction)
        self.ext_restriction = _cast(None, ext_restriction)
        self.observable_id = _cast(None, observable_id)
        if File is None:
            self.File = []
        else:
            self.File = File
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FileData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FileData.subclass:
            return FileData.subclass(*args_, **kwargs_)
        else:
            return FileData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_File(self): return self.File
    def set_File(self, File): self.File = File
    def add_File(self, value): self.File.append(value)
    def insert_File_at(self, index, value): self.File.insert(index, value)
    def replace_File_at(self, index, value): self.File[index] = value
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def get_ext_restriction(self): return self.ext_restriction
    def set_ext_restriction(self, ext_restriction): self.ext_restriction = ext_restriction
    def get_observable_id(self): return self.observable_id
    def set_observable_id(self, observable_id): self.observable_id = observable_id
    def hasContent_(self):
        if (
            self.File
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='FileData', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FileData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FileData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='FileData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='FileData'):
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
        if self.ext_restriction is not None and 'ext_restriction' not in already_processed:
            already_processed.add('ext_restriction')
            outfile.write(' ext-restriction=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_restriction), input_name='ext-restriction')), ))
        if self.observable_id is not None and 'observable_id' not in already_processed:
            already_processed.add('observable_id')
            outfile.write(' observable-id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.observable_id), input_name='observable-id')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='FileData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for File_ in self.File:
            File_.export(outfile, level, namespace_='iodef:', name_='File', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
        value = find_attr_value_('ext-restriction', node)
        if value is not None and 'ext-restriction' not in already_processed:
            already_processed.add('ext-restriction')
            self.ext_restriction = value
        value = find_attr_value_('observable-id', node)
        if value is not None and 'observable-id' not in already_processed:
            already_processed.add('observable-id')
            self.observable_id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'File':
            obj_ = File.factory()
            obj_.build(child_)
            self.File.append(obj_)
            obj_.original_tagname_ = 'File'
# end class FileData


class File(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, observable_id=None, FileName=None, FileSize=None, FileType=None, URL=None, HashData=None, SignatureData=None, AssociatedSoftware=None, FileProperties=None):
        self.original_tagname_ = None
        self.observable_id = _cast(None, observable_id)
        self.FileName = FileName
        self.FileSize = FileSize
        self.FileType = FileType
        if URL is None:
            self.URL = []
        else:
            self.URL = URL
        self.HashData = HashData
        self.SignatureData = SignatureData
        self.AssociatedSoftware = AssociatedSoftware
        if FileProperties is None:
            self.FileProperties = []
        else:
            self.FileProperties = FileProperties
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, File)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if File.subclass:
            return File.subclass(*args_, **kwargs_)
        else:
            return File(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FileName(self): return self.FileName
    def set_FileName(self, FileName): self.FileName = FileName
    def get_FileSize(self): return self.FileSize
    def set_FileSize(self, FileSize): self.FileSize = FileSize
    def get_FileType(self): return self.FileType
    def set_FileType(self, FileType): self.FileType = FileType
    def get_URL(self): return self.URL
    def set_URL(self, URL): self.URL = URL
    def add_URL(self, value): self.URL.append(value)
    def insert_URL_at(self, index, value): self.URL.insert(index, value)
    def replace_URL_at(self, index, value): self.URL[index] = value
    def get_HashData(self): return self.HashData
    def set_HashData(self, HashData): self.HashData = HashData
    def get_SignatureData(self): return self.SignatureData
    def set_SignatureData(self, SignatureData): self.SignatureData = SignatureData
    def get_AssociatedSoftware(self): return self.AssociatedSoftware
    def set_AssociatedSoftware(self, AssociatedSoftware): self.AssociatedSoftware = AssociatedSoftware
    def get_FileProperties(self): return self.FileProperties
    def set_FileProperties(self, FileProperties): self.FileProperties = FileProperties
    def add_FileProperties(self, value): self.FileProperties.append(value)
    def insert_FileProperties_at(self, index, value): self.FileProperties.insert(index, value)
    def replace_FileProperties_at(self, index, value): self.FileProperties[index] = value
    def get_observable_id(self): return self.observable_id
    def set_observable_id(self, observable_id): self.observable_id = observable_id
    def hasContent_(self):
        if (
            self.FileName is not None or
            self.FileSize is not None or
            self.FileType is not None or
            self.URL or
            self.HashData is not None or
            self.SignatureData is not None or
            self.AssociatedSoftware is not None or
            self.FileProperties
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='File', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('File')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='File')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='File', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='File'):
        if self.observable_id is not None and 'observable_id' not in already_processed:
            already_processed.add('observable_id')
            outfile.write(' observable-id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.observable_id), input_name='observable-id')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='File', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FileName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:FileName>%s</iodef:FileName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FileName), input_name='FileName')), eol_))
        if self.FileSize is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:FileSize>%s</iodef:FileSize>%s' % (self.gds_format_integer(self.FileSize, input_name='FileSize'), eol_))
        if self.FileType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:FileType>%s</iodef:FileType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FileType), input_name='FileType')), eol_))
        for URL_ in self.URL:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:URL>%s</iodef:URL>%s' % (self.gds_encode(self.gds_format_string(quote_xml(URL_), input_name='URL')), eol_))
        if self.HashData is not None:
            self.HashData.export(outfile, level, namespace_='iodef:', name_='HashData', pretty_print=pretty_print)
        if self.SignatureData is not None:
            self.SignatureData.export(outfile, level, namespace_='iodef:', name_='SignatureData', pretty_print=pretty_print)
        if self.AssociatedSoftware is not None:
            self.AssociatedSoftware.export(outfile, level, namespace_='iodef:', name_='AssociatedSoftware', pretty_print=pretty_print)
        for FileProperties_ in self.FileProperties:
            FileProperties_.export(outfile, level, namespace_='iodef:', name_='FileProperties', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('observable-id', node)
        if value is not None and 'observable-id' not in already_processed:
            already_processed.add('observable-id')
            self.observable_id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FileName':
            FileName_ = child_.text
            FileName_ = self.gds_validate_string(FileName_, node, 'FileName')
            self.FileName = FileName_
        elif nodeName_ == 'FileSize':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'FileSize')
            self.FileSize = ival_
        elif nodeName_ == 'FileType':
            FileType_ = child_.text
            FileType_ = self.gds_validate_string(FileType_, node, 'FileType')
            self.FileType = FileType_
        elif nodeName_ == 'URL':
            URL_ = child_.text
            URL_ = self.gds_validate_string(URL_, node, 'URL')
            self.URL.append(URL_)
        elif nodeName_ == 'HashData':
            obj_ = HashData.factory()
            obj_.build(child_)
            self.HashData = obj_
            obj_.original_tagname_ = 'HashData'
        elif nodeName_ == 'SignatureData':
            obj_ = SignatureData.factory()
            obj_.build(child_)
            self.SignatureData = obj_
            obj_.original_tagname_ = 'SignatureData'
        elif nodeName_ == 'AssociatedSoftware':
            obj_ = SoftwareType.factory()
            obj_.build(child_)
            self.AssociatedSoftware = obj_
            obj_.original_tagname_ = 'AssociatedSoftware'
        elif nodeName_ == 'FileProperties':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.FileProperties.append(obj_)
            obj_.original_tagname_ = 'FileProperties'
# end class File


class HashData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, scope=None, ext_scope=None, HashTargetID=None, Hash=None, FuzzyHash=None):
        self.original_tagname_ = None
        self.scope = _cast(None, scope)
        self.ext_scope = _cast(None, ext_scope)
        self.HashTargetID = HashTargetID
        if Hash is None:
            self.Hash = []
        else:
            self.Hash = Hash
        if FuzzyHash is None:
            self.FuzzyHash = []
        else:
            self.FuzzyHash = FuzzyHash
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HashData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HashData.subclass:
            return HashData.subclass(*args_, **kwargs_)
        else:
            return HashData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HashTargetID(self): return self.HashTargetID
    def set_HashTargetID(self, HashTargetID): self.HashTargetID = HashTargetID
    def get_Hash(self): return self.Hash
    def set_Hash(self, Hash): self.Hash = Hash
    def add_Hash(self, value): self.Hash.append(value)
    def insert_Hash_at(self, index, value): self.Hash.insert(index, value)
    def replace_Hash_at(self, index, value): self.Hash[index] = value
    def get_FuzzyHash(self): return self.FuzzyHash
    def set_FuzzyHash(self, FuzzyHash): self.FuzzyHash = FuzzyHash
    def add_FuzzyHash(self, value): self.FuzzyHash.append(value)
    def insert_FuzzyHash_at(self, index, value): self.FuzzyHash.insert(index, value)
    def replace_FuzzyHash_at(self, index, value): self.FuzzyHash[index] = value
    def get_scope(self): return self.scope
    def set_scope(self, scope): self.scope = scope
    def get_ext_scope(self): return self.ext_scope
    def set_ext_scope(self, ext_scope): self.ext_scope = ext_scope
    def validate_hashdata_scope_type(self, value):
        # Validate type hashdata-scope-type, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['file-contents', 'file-pe-section', 'file-pe-iat', 'file-pe-resource', 'file-pdf-object', 'email-hash', 'email-headers-hash', 'email-body-hash', 'ext-value']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on hashdata-scope-type' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.HashTargetID is not None or
            self.Hash or
            self.FuzzyHash
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='HashData', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HashData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HashData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='HashData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='HashData'):
        if self.scope is not None and 'scope' not in already_processed:
            already_processed.add('scope')
            outfile.write(' scope=%s' % (quote_attrib(self.scope), ))
        if self.ext_scope is not None and 'ext_scope' not in already_processed:
            already_processed.add('ext_scope')
            outfile.write(' ext-scope=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_scope), input_name='ext-scope')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='HashData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HashTargetID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:HashTargetID>%s</iodef:HashTargetID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HashTargetID), input_name='HashTargetID')), eol_))
        for Hash_ in self.Hash:
            Hash_.export(outfile, level, namespace_='iodef:', name_='Hash', pretty_print=pretty_print)
        for FuzzyHash_ in self.FuzzyHash:
            FuzzyHash_.export(outfile, level, namespace_='iodef:', name_='FuzzyHash', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('scope', node)
        if value is not None and 'scope' not in already_processed:
            already_processed.add('scope')
            self.scope = value
            self.validate_hashdata_scope_type(self.scope)    # validate type hashdata-scope-type
        value = find_attr_value_('ext-scope', node)
        if value is not None and 'ext-scope' not in already_processed:
            already_processed.add('ext-scope')
            self.ext_scope = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HashTargetID':
            HashTargetID_ = child_.text
            HashTargetID_ = self.gds_validate_string(HashTargetID_, node, 'HashTargetID')
            self.HashTargetID = HashTargetID_
        elif nodeName_ == 'Hash':
            obj_ = Hash.factory()
            obj_.build(child_)
            self.Hash.append(obj_)
            obj_.original_tagname_ = 'Hash'
        elif nodeName_ == 'FuzzyHash':
            obj_ = FuzzyHash.factory()
            obj_.build(child_)
            self.FuzzyHash.append(obj_)
            obj_.original_tagname_ = 'FuzzyHash'
# end class HashData


class Hash(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DigestMethod=None, DigestValue=None, CanonicalizationMethod=None, Application=None):
        self.original_tagname_ = None
        self.DigestMethod = DigestMethod
        self.DigestValue = DigestValue
        self.CanonicalizationMethod = CanonicalizationMethod
        self.Application = Application
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Hash)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Hash.subclass:
            return Hash.subclass(*args_, **kwargs_)
        else:
            return Hash(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DigestMethod(self): return self.DigestMethod
    def set_DigestMethod(self, DigestMethod): self.DigestMethod = DigestMethod
    def get_DigestValue(self): return self.DigestValue
    def set_DigestValue(self, DigestValue): self.DigestValue = DigestValue
    def get_CanonicalizationMethod(self): return self.CanonicalizationMethod
    def set_CanonicalizationMethod(self, CanonicalizationMethod): self.CanonicalizationMethod = CanonicalizationMethod
    def get_Application(self): return self.Application
    def set_Application(self, Application): self.Application = Application
    def hasContent_(self):
        if (
            self.DigestMethod is not None or
            self.DigestValue is not None or
            self.CanonicalizationMethod is not None or
            self.Application is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Hash', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Hash')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Hash')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Hash', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Hash'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Hash', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DigestMethod is not None:
            self.DigestMethod.export(outfile, level, namespace_='ds:', name_='DigestMethod', pretty_print=pretty_print)
        if self.DigestValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:DigestValue>%s</ds:DigestValue>%s' % (self.gds_format_base64(self.DigestValue, input_name='DigestValue'), eol_))
        if self.CanonicalizationMethod is not None:
            self.CanonicalizationMethod.export(outfile, level, namespace_='ds:', name_='CanonicalizationMethod', pretty_print=pretty_print)
        if self.Application is not None:
            self.Application.export(outfile, level, namespace_='iodef:', name_='Application', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DigestMethod':
            obj_ = DigestMethodType.factory()
            obj_.build(child_)
            self.DigestMethod = obj_
            obj_.original_tagname_ = 'DigestMethod'
        elif nodeName_ == 'DigestValue':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'DigestValue')
            else:
                bval_ = None
            self.DigestValue = bval_
        elif nodeName_ == 'CanonicalizationMethod':
            obj_ = CanonicalizationMethodType.factory()
            obj_.build(child_)
            self.CanonicalizationMethod = obj_
            obj_.original_tagname_ = 'CanonicalizationMethod'
        elif nodeName_ == 'Application':
            obj_ = SoftwareType.factory()
            obj_.build(child_)
            self.Application = obj_
            obj_.original_tagname_ = 'Application'
# end class Hash


class FuzzyHash(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FuzzyHashValue=None, Application=None, AdditionalData=None):
        self.original_tagname_ = None
        if FuzzyHashValue is None:
            self.FuzzyHashValue = []
        else:
            self.FuzzyHashValue = FuzzyHashValue
        self.Application = Application
        if AdditionalData is None:
            self.AdditionalData = []
        else:
            self.AdditionalData = AdditionalData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FuzzyHash)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FuzzyHash.subclass:
            return FuzzyHash.subclass(*args_, **kwargs_)
        else:
            return FuzzyHash(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FuzzyHashValue(self): return self.FuzzyHashValue
    def set_FuzzyHashValue(self, FuzzyHashValue): self.FuzzyHashValue = FuzzyHashValue
    def add_FuzzyHashValue(self, value): self.FuzzyHashValue.append(value)
    def insert_FuzzyHashValue_at(self, index, value): self.FuzzyHashValue.insert(index, value)
    def replace_FuzzyHashValue_at(self, index, value): self.FuzzyHashValue[index] = value
    def get_Application(self): return self.Application
    def set_Application(self, Application): self.Application = Application
    def get_AdditionalData(self): return self.AdditionalData
    def set_AdditionalData(self, AdditionalData): self.AdditionalData = AdditionalData
    def add_AdditionalData(self, value): self.AdditionalData.append(value)
    def insert_AdditionalData_at(self, index, value): self.AdditionalData.insert(index, value)
    def replace_AdditionalData_at(self, index, value): self.AdditionalData[index] = value
    def hasContent_(self):
        if (
            self.FuzzyHashValue or
            self.Application is not None or
            self.AdditionalData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='FuzzyHash', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FuzzyHash')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FuzzyHash')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='FuzzyHash', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='FuzzyHash'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='FuzzyHash', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for FuzzyHashValue_ in self.FuzzyHashValue:
            FuzzyHashValue_.export(outfile, level, namespace_='iodef:', name_='FuzzyHashValue', pretty_print=pretty_print)
        if self.Application is not None:
            self.Application.export(outfile, level, namespace_='iodef:', name_='Application', pretty_print=pretty_print)
        for AdditionalData_ in self.AdditionalData:
            AdditionalData_.export(outfile, level, namespace_='iodef:', name_='AdditionalData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FuzzyHashValue':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.FuzzyHashValue.append(obj_)
            obj_.original_tagname_ = 'FuzzyHashValue'
        elif nodeName_ == 'Application':
            obj_ = SoftwareType.factory()
            obj_.build(child_)
            self.Application = obj_
            obj_.original_tagname_ = 'Application'
        elif nodeName_ == 'AdditionalData':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.AdditionalData.append(obj_)
            obj_.original_tagname_ = 'AdditionalData'
# end class FuzzyHash


class SignatureData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Signature=None):
        self.original_tagname_ = None
        if Signature is None:
            self.Signature = []
        else:
            self.Signature = Signature
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureData.subclass:
            return SignatureData.subclass(*args_, **kwargs_)
        else:
            return SignatureData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Signature(self): return self.Signature
    def set_Signature(self, Signature): self.Signature = Signature
    def add_Signature(self, value): self.Signature.append(value)
    def insert_Signature_at(self, index, value): self.Signature.insert(index, value)
    def replace_Signature_at(self, index, value): self.Signature[index] = value
    def hasContent_(self):
        if (
            self.Signature
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='SignatureData', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='SignatureData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='SignatureData'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='SignatureData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Signature_ in self.Signature:
            Signature_.export(outfile, level, namespace_='ds:', name_='Signature', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Signature':
            obj_ = SignatureType.factory()
            obj_.build(child_)
            self.Signature.append(obj_)
            obj_.original_tagname_ = 'Signature'
# end class SignatureData


class CertificateData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, restriction=None, ext_restriction=None, observable_id=None, Certificate=None):
        self.original_tagname_ = None
        self.restriction = _cast(None, restriction)
        self.ext_restriction = _cast(None, ext_restriction)
        self.observable_id = _cast(None, observable_id)
        if Certificate is None:
            self.Certificate = []
        else:
            self.Certificate = Certificate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CertificateData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CertificateData.subclass:
            return CertificateData.subclass(*args_, **kwargs_)
        else:
            return CertificateData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Certificate(self): return self.Certificate
    def set_Certificate(self, Certificate): self.Certificate = Certificate
    def add_Certificate(self, value): self.Certificate.append(value)
    def insert_Certificate_at(self, index, value): self.Certificate.insert(index, value)
    def replace_Certificate_at(self, index, value): self.Certificate[index] = value
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def get_ext_restriction(self): return self.ext_restriction
    def set_ext_restriction(self, ext_restriction): self.ext_restriction = ext_restriction
    def get_observable_id(self): return self.observable_id
    def set_observable_id(self, observable_id): self.observable_id = observable_id
    def hasContent_(self):
        if (
            self.Certificate
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='CertificateData', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CertificateData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CertificateData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='CertificateData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='CertificateData'):
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
        if self.ext_restriction is not None and 'ext_restriction' not in already_processed:
            already_processed.add('ext_restriction')
            outfile.write(' ext-restriction=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_restriction), input_name='ext-restriction')), ))
        if self.observable_id is not None and 'observable_id' not in already_processed:
            already_processed.add('observable_id')
            outfile.write(' observable-id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.observable_id), input_name='observable-id')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='CertificateData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Certificate_ in self.Certificate:
            Certificate_.export(outfile, level, namespace_='iodef:', name_='Certificate', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
        value = find_attr_value_('ext-restriction', node)
        if value is not None and 'ext-restriction' not in already_processed:
            already_processed.add('ext-restriction')
            self.ext_restriction = value
        value = find_attr_value_('observable-id', node)
        if value is not None and 'observable-id' not in already_processed:
            already_processed.add('observable-id')
            self.observable_id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Certificate':
            obj_ = Certificate.factory()
            obj_.build(child_)
            self.Certificate.append(obj_)
            obj_.original_tagname_ = 'Certificate'
# end class CertificateData


class Certificate(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, observable_id=None, X509Data=None, Description=None):
        self.original_tagname_ = None
        self.observable_id = _cast(None, observable_id)
        self.X509Data = X509Data
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Certificate)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Certificate.subclass:
            return Certificate.subclass(*args_, **kwargs_)
        else:
            return Certificate(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_X509Data(self): return self.X509Data
    def set_X509Data(self, X509Data): self.X509Data = X509Data
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def get_observable_id(self): return self.observable_id
    def set_observable_id(self, observable_id): self.observable_id = observable_id
    def hasContent_(self):
        if (
            self.X509Data is not None or
            self.Description
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Certificate', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Certificate')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Certificate')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Certificate', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Certificate'):
        if self.observable_id is not None and 'observable_id' not in already_processed:
            already_processed.add('observable_id')
            outfile.write(' observable-id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.observable_id), input_name='observable-id')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Certificate', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.X509Data is not None:
            self.X509Data.export(outfile, level, namespace_='ds:', name_='X509Data', pretty_print=pretty_print)
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('observable-id', node)
        if value is not None and 'observable-id' not in already_processed:
            already_processed.add('observable-id')
            self.observable_id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'X509Data':
            obj_ = X509DataType.factory()
            obj_.build(child_)
            self.X509Data = obj_
            obj_.original_tagname_ = 'X509Data'
        elif nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
# end class Certificate


class IndicatorData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Indicator=None):
        self.original_tagname_ = None
        if Indicator is None:
            self.Indicator = []
        else:
            self.Indicator = Indicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IndicatorData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IndicatorData.subclass:
            return IndicatorData.subclass(*args_, **kwargs_)
        else:
            return IndicatorData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Indicator(self): return self.Indicator
    def set_Indicator(self, Indicator): self.Indicator = Indicator
    def add_Indicator(self, value): self.Indicator.append(value)
    def insert_Indicator_at(self, index, value): self.Indicator.insert(index, value)
    def replace_Indicator_at(self, index, value): self.Indicator[index] = value
    def hasContent_(self):
        if (
            self.Indicator
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='IndicatorData', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IndicatorData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IndicatorData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='IndicatorData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='IndicatorData'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='IndicatorData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Indicator_ in self.Indicator:
            Indicator_.export(outfile, level, namespace_='iodef:', name_='Indicator', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Indicator':
            obj_ = Indicator.factory()
            obj_.build(child_)
            self.Indicator.append(obj_)
            obj_.original_tagname_ = 'Indicator'
# end class IndicatorData


class Indicator(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, restriction=None, ext_restriction=None, IndicatorID=None, AlternativeIndicatorID=None, Description=None, StartTime=None, EndTime=None, Confidence=None, Contact=None, Observable=None, ObservableReference=None, IndicatorExpression=None, IndicatorReference=None, NodeRole=None, AttackPhase=None, Reference=None, AdditionalData=None):
        self.original_tagname_ = None
        self.restriction = _cast(None, restriction)
        self.ext_restriction = _cast(None, ext_restriction)
        self.IndicatorID = IndicatorID
        if AlternativeIndicatorID is None:
            self.AlternativeIndicatorID = []
        else:
            self.AlternativeIndicatorID = AlternativeIndicatorID
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
        if isinstance(StartTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(StartTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = StartTime
        self.StartTime = initvalue_
        if isinstance(EndTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EndTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = EndTime
        self.EndTime = initvalue_
        self.Confidence = Confidence
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        self.Observable = Observable
        self.ObservableReference = ObservableReference
        self.IndicatorExpression = IndicatorExpression
        self.IndicatorReference = IndicatorReference
        if NodeRole is None:
            self.NodeRole = []
        else:
            self.NodeRole = NodeRole
        if AttackPhase is None:
            self.AttackPhase = []
        else:
            self.AttackPhase = AttackPhase
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if AdditionalData is None:
            self.AdditionalData = []
        else:
            self.AdditionalData = AdditionalData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Indicator)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Indicator.subclass:
            return Indicator.subclass(*args_, **kwargs_)
        else:
            return Indicator(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IndicatorID(self): return self.IndicatorID
    def set_IndicatorID(self, IndicatorID): self.IndicatorID = IndicatorID
    def get_AlternativeIndicatorID(self): return self.AlternativeIndicatorID
    def set_AlternativeIndicatorID(self, AlternativeIndicatorID): self.AlternativeIndicatorID = AlternativeIndicatorID
    def add_AlternativeIndicatorID(self, value): self.AlternativeIndicatorID.append(value)
    def insert_AlternativeIndicatorID_at(self, index, value): self.AlternativeIndicatorID.insert(index, value)
    def replace_AlternativeIndicatorID_at(self, index, value): self.AlternativeIndicatorID[index] = value
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def get_StartTime(self): return self.StartTime
    def set_StartTime(self, StartTime): self.StartTime = StartTime
    def get_EndTime(self): return self.EndTime
    def set_EndTime(self, EndTime): self.EndTime = EndTime
    def get_Confidence(self): return self.Confidence
    def set_Confidence(self, Confidence): self.Confidence = Confidence
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_Observable(self): return self.Observable
    def set_Observable(self, Observable): self.Observable = Observable
    def get_ObservableReference(self): return self.ObservableReference
    def set_ObservableReference(self, ObservableReference): self.ObservableReference = ObservableReference
    def get_IndicatorExpression(self): return self.IndicatorExpression
    def set_IndicatorExpression(self, IndicatorExpression): self.IndicatorExpression = IndicatorExpression
    def get_IndicatorReference(self): return self.IndicatorReference
    def set_IndicatorReference(self, IndicatorReference): self.IndicatorReference = IndicatorReference
    def get_NodeRole(self): return self.NodeRole
    def set_NodeRole(self, NodeRole): self.NodeRole = NodeRole
    def add_NodeRole(self, value): self.NodeRole.append(value)
    def insert_NodeRole_at(self, index, value): self.NodeRole.insert(index, value)
    def replace_NodeRole_at(self, index, value): self.NodeRole[index] = value
    def get_AttackPhase(self): return self.AttackPhase
    def set_AttackPhase(self, AttackPhase): self.AttackPhase = AttackPhase
    def add_AttackPhase(self, value): self.AttackPhase.append(value)
    def insert_AttackPhase_at(self, index, value): self.AttackPhase.insert(index, value)
    def replace_AttackPhase_at(self, index, value): self.AttackPhase[index] = value
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_AdditionalData(self): return self.AdditionalData
    def set_AdditionalData(self, AdditionalData): self.AdditionalData = AdditionalData
    def add_AdditionalData(self, value): self.AdditionalData.append(value)
    def insert_AdditionalData_at(self, index, value): self.AdditionalData.insert(index, value)
    def replace_AdditionalData_at(self, index, value): self.AdditionalData[index] = value
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def get_ext_restriction(self): return self.ext_restriction
    def set_ext_restriction(self, ext_restriction): self.ext_restriction = ext_restriction
    def hasContent_(self):
        if (
            self.IndicatorID is not None or
            self.AlternativeIndicatorID or
            self.Description or
            self.StartTime is not None or
            self.EndTime is not None or
            self.Confidence is not None or
            self.Contact or
            self.Observable is not None or
            self.ObservableReference is not None or
            self.IndicatorExpression is not None or
            self.IndicatorReference is not None or
            self.NodeRole or
            self.AttackPhase or
            self.Reference or
            self.AdditionalData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Indicator', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Indicator')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Indicator')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Indicator', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Indicator'):
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
        if self.ext_restriction is not None and 'ext_restriction' not in already_processed:
            already_processed.add('ext_restriction')
            outfile.write(' ext-restriction=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_restriction), input_name='ext-restriction')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Indicator', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IndicatorID is not None:
            self.IndicatorID.export(outfile, level, namespace_='iodef:', name_='IndicatorID', pretty_print=pretty_print)
        for AlternativeIndicatorID_ in self.AlternativeIndicatorID:
            AlternativeIndicatorID_.export(outfile, level, namespace_='iodef:', name_='AlternativeIndicatorID', pretty_print=pretty_print)
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
        if self.StartTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:StartTime>%s</iodef:StartTime>%s' % (self.gds_format_datetime(self.StartTime, input_name='StartTime'), eol_))
        if self.EndTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:EndTime>%s</iodef:EndTime>%s' % (self.gds_format_datetime(self.EndTime, input_name='EndTime'), eol_))
        if self.Confidence is not None:
            self.Confidence.export(outfile, level, namespace_='iodef:', name_='Confidence', pretty_print=pretty_print)
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_='iodef:', name_='Contact', pretty_print=pretty_print)
        if self.Observable is not None:
            self.Observable.export(outfile, level, namespace_='iodef:', name_='Observable', pretty_print=pretty_print)
        if self.ObservableReference is not None:
            self.ObservableReference.export(outfile, level, namespace_='iodef:', name_='ObservableReference', pretty_print=pretty_print)
        if self.IndicatorExpression is not None:
            self.IndicatorExpression.export(outfile, level, namespace_='iodef:', name_='IndicatorExpression', pretty_print=pretty_print)
        if self.IndicatorReference is not None:
            self.IndicatorReference.export(outfile, level, namespace_='iodef:', name_='IndicatorReference', pretty_print=pretty_print)
        for NodeRole_ in self.NodeRole:
            NodeRole_.export(outfile, level, namespace_='iodef:', name_='NodeRole', pretty_print=pretty_print)
        for AttackPhase_ in self.AttackPhase:
            AttackPhase_.export(outfile, level, namespace_='iodef:', name_='AttackPhase', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_='iodef:', name_='Reference', pretty_print=pretty_print)
        for AdditionalData_ in self.AdditionalData:
            AdditionalData_.export(outfile, level, namespace_='iodef:', name_='AdditionalData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
        value = find_attr_value_('ext-restriction', node)
        if value is not None and 'ext-restriction' not in already_processed:
            already_processed.add('ext-restriction')
            self.ext_restriction = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IndicatorID':
            obj_ = IndicatorID.factory()
            obj_.build(child_)
            self.IndicatorID = obj_
            obj_.original_tagname_ = 'IndicatorID'
        elif nodeName_ == 'AlternativeIndicatorID':
            obj_ = AlternativeIndicatorID.factory()
            obj_.build(child_)
            self.AlternativeIndicatorID.append(obj_)
            obj_.original_tagname_ = 'AlternativeIndicatorID'
        elif nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'StartTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.StartTime = dval_
        elif nodeName_ == 'EndTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.EndTime = dval_
        elif nodeName_ == 'Confidence':
            obj_ = Confidence.factory()
            obj_.build(child_)
            self.Confidence = obj_
            obj_.original_tagname_ = 'Confidence'
        elif nodeName_ == 'Contact':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Observable':
            obj_ = Observable.factory()
            obj_.build(child_)
            self.Observable = obj_
            obj_.original_tagname_ = 'Observable'
        elif nodeName_ == 'ObservableReference':
            obj_ = ObservableReference.factory()
            obj_.build(child_)
            self.ObservableReference = obj_
            obj_.original_tagname_ = 'ObservableReference'
        elif nodeName_ == 'IndicatorExpression':
            obj_ = IndicatorExpression.factory()
            obj_.build(child_)
            self.IndicatorExpression = obj_
            obj_.original_tagname_ = 'IndicatorExpression'
        elif nodeName_ == 'IndicatorReference':
            obj_ = IndicatorReference.factory()
            obj_.build(child_)
            self.IndicatorReference = obj_
            obj_.original_tagname_ = 'IndicatorReference'
        elif nodeName_ == 'NodeRole':
            obj_ = NodeRole.factory()
            obj_.build(child_)
            self.NodeRole.append(obj_)
            obj_.original_tagname_ = 'NodeRole'
        elif nodeName_ == 'AttackPhase':
            obj_ = AttackPhase.factory()
            obj_.build(child_)
            self.AttackPhase.append(obj_)
            obj_.original_tagname_ = 'AttackPhase'
        elif nodeName_ == 'Reference':
            obj_ = Reference.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'AdditionalData':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.AdditionalData.append(obj_)
            obj_.original_tagname_ = 'AdditionalData'
# end class Indicator


class IndicatorID(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, version=None, valueOf_=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.version = _cast(None, version)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IndicatorID)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IndicatorID.subclass:
            return IndicatorID.subclass(*args_, **kwargs_)
        else:
            return IndicatorID(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='IndicatorID', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IndicatorID')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IndicatorID')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='IndicatorID', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='IndicatorID'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.version), input_name='version')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='IndicatorID', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class IndicatorID


class AlternativeIndicatorID(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, restriction=None, ext_restriction=None, IndicatorID=None):
        self.original_tagname_ = None
        self.restriction = _cast(None, restriction)
        self.ext_restriction = _cast(None, ext_restriction)
        if IndicatorID is None:
            self.IndicatorID = []
        else:
            self.IndicatorID = IndicatorID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AlternativeIndicatorID)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AlternativeIndicatorID.subclass:
            return AlternativeIndicatorID.subclass(*args_, **kwargs_)
        else:
            return AlternativeIndicatorID(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IndicatorID(self): return self.IndicatorID
    def set_IndicatorID(self, IndicatorID): self.IndicatorID = IndicatorID
    def add_IndicatorID(self, value): self.IndicatorID.append(value)
    def insert_IndicatorID_at(self, index, value): self.IndicatorID.insert(index, value)
    def replace_IndicatorID_at(self, index, value): self.IndicatorID[index] = value
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def get_ext_restriction(self): return self.ext_restriction
    def set_ext_restriction(self, ext_restriction): self.ext_restriction = ext_restriction
    def hasContent_(self):
        if (
            self.IndicatorID
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='AlternativeIndicatorID', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AlternativeIndicatorID')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AlternativeIndicatorID')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='AlternativeIndicatorID', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='AlternativeIndicatorID'):
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
        if self.ext_restriction is not None and 'ext_restriction' not in already_processed:
            already_processed.add('ext_restriction')
            outfile.write(' ext-restriction=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_restriction), input_name='ext-restriction')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='AlternativeIndicatorID', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for IndicatorID_ in self.IndicatorID:
            IndicatorID_.export(outfile, level, namespace_='iodef:', name_='IndicatorID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
        value = find_attr_value_('ext-restriction', node)
        if value is not None and 'ext-restriction' not in already_processed:
            already_processed.add('ext-restriction')
            self.ext_restriction = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IndicatorID':
            obj_ = IndicatorID.factory()
            obj_.build(child_)
            self.IndicatorID.append(obj_)
            obj_.original_tagname_ = 'IndicatorID'
# end class AlternativeIndicatorID


class Observable(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, restriction=None, ext_restriction=None, System=None, Address=None, DomainData=None, Service=None, EmailData=None, WindowsRegistryKeysModified=None, FileData=None, CertificateData=None, RegistryHandle=None, RecordData=None, EventData=None, Incident=None, Expectation=None, Reference=None, Assessment=None, DetectionPattern=None, HistoryItem=None, BulkObservable=None, AdditionalData=None):
        self.original_tagname_ = None
        self.restriction = _cast(None, restriction)
        self.ext_restriction = _cast(None, ext_restriction)
        self.System = System
        self.Address = Address
        self.DomainData = DomainData
        self.Service = Service
        self.EmailData = EmailData
        self.WindowsRegistryKeysModified = WindowsRegistryKeysModified
        self.FileData = FileData
        self.CertificateData = CertificateData
        self.RegistryHandle = RegistryHandle
        self.RecordData = RecordData
        self.EventData = EventData
        self.Incident = Incident
        self.Expectation = Expectation
        self.Reference = Reference
        self.Assessment = Assessment
        self.DetectionPattern = DetectionPattern
        self.HistoryItem = HistoryItem
        self.BulkObservable = BulkObservable
        if AdditionalData is None:
            self.AdditionalData = []
        else:
            self.AdditionalData = AdditionalData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Observable)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Observable.subclass:
            return Observable.subclass(*args_, **kwargs_)
        else:
            return Observable(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_System(self): return self.System
    def set_System(self, System): self.System = System
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_DomainData(self): return self.DomainData
    def set_DomainData(self, DomainData): self.DomainData = DomainData
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def get_EmailData(self): return self.EmailData
    def set_EmailData(self, EmailData): self.EmailData = EmailData
    def get_WindowsRegistryKeysModified(self): return self.WindowsRegistryKeysModified
    def set_WindowsRegistryKeysModified(self, WindowsRegistryKeysModified): self.WindowsRegistryKeysModified = WindowsRegistryKeysModified
    def get_FileData(self): return self.FileData
    def set_FileData(self, FileData): self.FileData = FileData
    def get_CertificateData(self): return self.CertificateData
    def set_CertificateData(self, CertificateData): self.CertificateData = CertificateData
    def get_RegistryHandle(self): return self.RegistryHandle
    def set_RegistryHandle(self, RegistryHandle): self.RegistryHandle = RegistryHandle
    def get_RecordData(self): return self.RecordData
    def set_RecordData(self, RecordData): self.RecordData = RecordData
    def get_EventData(self): return self.EventData
    def set_EventData(self, EventData): self.EventData = EventData
    def get_Incident(self): return self.Incident
    def set_Incident(self, Incident): self.Incident = Incident
    def get_Expectation(self): return self.Expectation
    def set_Expectation(self, Expectation): self.Expectation = Expectation
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def get_Assessment(self): return self.Assessment
    def set_Assessment(self, Assessment): self.Assessment = Assessment
    def get_DetectionPattern(self): return self.DetectionPattern
    def set_DetectionPattern(self, DetectionPattern): self.DetectionPattern = DetectionPattern
    def get_HistoryItem(self): return self.HistoryItem
    def set_HistoryItem(self, HistoryItem): self.HistoryItem = HistoryItem
    def get_BulkObservable(self): return self.BulkObservable
    def set_BulkObservable(self, BulkObservable): self.BulkObservable = BulkObservable
    def get_AdditionalData(self): return self.AdditionalData
    def set_AdditionalData(self, AdditionalData): self.AdditionalData = AdditionalData
    def add_AdditionalData(self, value): self.AdditionalData.append(value)
    def insert_AdditionalData_at(self, index, value): self.AdditionalData.insert(index, value)
    def replace_AdditionalData_at(self, index, value): self.AdditionalData[index] = value
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def get_ext_restriction(self): return self.ext_restriction
    def set_ext_restriction(self, ext_restriction): self.ext_restriction = ext_restriction
    def hasContent_(self):
        if (
            self.System is not None or
            self.Address is not None or
            self.DomainData is not None or
            self.Service is not None or
            self.EmailData is not None or
            self.WindowsRegistryKeysModified is not None or
            self.FileData is not None or
            self.CertificateData is not None or
            self.RegistryHandle is not None or
            self.RecordData is not None or
            self.EventData is not None or
            self.Incident is not None or
            self.Expectation is not None or
            self.Reference is not None or
            self.Assessment is not None or
            self.DetectionPattern is not None or
            self.HistoryItem is not None or
            self.BulkObservable is not None or
            self.AdditionalData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Observable', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Observable')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Observable')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Observable', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Observable'):
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
        if self.ext_restriction is not None and 'ext_restriction' not in already_processed:
            already_processed.add('ext_restriction')
            outfile.write(' ext-restriction=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_restriction), input_name='ext-restriction')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Observable', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.System is not None:
            self.System.export(outfile, level, namespace_='iodef:', name_='System', pretty_print=pretty_print)
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_='iodef:', name_='Address', pretty_print=pretty_print)
        if self.DomainData is not None:
            self.DomainData.export(outfile, level, namespace_='iodef:', name_='DomainData', pretty_print=pretty_print)
        if self.Service is not None:
            self.Service.export(outfile, level, namespace_='iodef:', name_='Service', pretty_print=pretty_print)
        if self.EmailData is not None:
            self.EmailData.export(outfile, level, namespace_='iodef:', name_='EmailData', pretty_print=pretty_print)
        if self.WindowsRegistryKeysModified is not None:
            self.WindowsRegistryKeysModified.export(outfile, level, namespace_='iodef:', name_='WindowsRegistryKeysModified', pretty_print=pretty_print)
        if self.FileData is not None:
            self.FileData.export(outfile, level, namespace_='iodef:', name_='FileData', pretty_print=pretty_print)
        if self.CertificateData is not None:
            self.CertificateData.export(outfile, level, namespace_='iodef:', name_='CertificateData', pretty_print=pretty_print)
        if self.RegistryHandle is not None:
            self.RegistryHandle.export(outfile, level, namespace_='iodef:', name_='RegistryHandle', pretty_print=pretty_print)
        if self.RecordData is not None:
            self.RecordData.export(outfile, level, namespace_='iodef:', name_='RecordData', pretty_print=pretty_print)
        if self.EventData is not None:
            self.EventData.export(outfile, level, namespace_='iodef:', name_='EventData', pretty_print=pretty_print)
        if self.Incident is not None:
            self.Incident.export(outfile, level, namespace_='iodef:', name_='Incident', pretty_print=pretty_print)
        if self.Expectation is not None:
            self.Expectation.export(outfile, level, namespace_='iodef:', name_='Expectation', pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(outfile, level, namespace_='iodef:', name_='Reference', pretty_print=pretty_print)
        if self.Assessment is not None:
            self.Assessment.export(outfile, level, namespace_='iodef:', name_='Assessment', pretty_print=pretty_print)
        if self.DetectionPattern is not None:
            self.DetectionPattern.export(outfile, level, namespace_='iodef:', name_='DetectionPattern', pretty_print=pretty_print)
        if self.HistoryItem is not None:
            self.HistoryItem.export(outfile, level, namespace_='iodef:', name_='HistoryItem', pretty_print=pretty_print)
        if self.BulkObservable is not None:
            self.BulkObservable.export(outfile, level, namespace_='iodef:', name_='BulkObservable', pretty_print=pretty_print)
        for AdditionalData_ in self.AdditionalData:
            AdditionalData_.export(outfile, level, namespace_='iodef:', name_='AdditionalData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
        value = find_attr_value_('ext-restriction', node)
        if value is not None and 'ext-restriction' not in already_processed:
            already_processed.add('ext-restriction')
            self.ext_restriction = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'System':
            obj_ = System.factory()
            obj_.build(child_)
            self.System = obj_
            obj_.original_tagname_ = 'System'
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'DomainData':
            obj_ = DomainData.factory()
            obj_.build(child_)
            self.DomainData = obj_
            obj_.original_tagname_ = 'DomainData'
        elif nodeName_ == 'Service':
            obj_ = Service.factory()
            obj_.build(child_)
            self.Service = obj_
            obj_.original_tagname_ = 'Service'
        elif nodeName_ == 'EmailData':
            obj_ = EmailData.factory()
            obj_.build(child_)
            self.EmailData = obj_
            obj_.original_tagname_ = 'EmailData'
        elif nodeName_ == 'WindowsRegistryKeysModified':
            obj_ = WindowsRegistryKeysModified.factory()
            obj_.build(child_)
            self.WindowsRegistryKeysModified = obj_
            obj_.original_tagname_ = 'WindowsRegistryKeysModified'
        elif nodeName_ == 'FileData':
            obj_ = FileData.factory()
            obj_.build(child_)
            self.FileData = obj_
            obj_.original_tagname_ = 'FileData'
        elif nodeName_ == 'CertificateData':
            obj_ = CertificateData.factory()
            obj_.build(child_)
            self.CertificateData = obj_
            obj_.original_tagname_ = 'CertificateData'
        elif nodeName_ == 'RegistryHandle':
            obj_ = RegistryHandle.factory()
            obj_.build(child_)
            self.RegistryHandle = obj_
            obj_.original_tagname_ = 'RegistryHandle'
        elif nodeName_ == 'RecordData':
            obj_ = RecordData.factory()
            obj_.build(child_)
            self.RecordData = obj_
            obj_.original_tagname_ = 'RecordData'
        elif nodeName_ == 'EventData':
            obj_ = EventData.factory()
            obj_.build(child_)
            self.EventData = obj_
            obj_.original_tagname_ = 'EventData'
        elif nodeName_ == 'Incident':
            obj_ = Incident.factory()
            obj_.build(child_)
            self.Incident = obj_
            obj_.original_tagname_ = 'Incident'
        elif nodeName_ == 'Expectation':
            obj_ = Expectation.factory()
            obj_.build(child_)
            self.Expectation = obj_
            obj_.original_tagname_ = 'Expectation'
        elif nodeName_ == 'Reference':
            obj_ = Reference.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Assessment':
            obj_ = Assessment.factory()
            obj_.build(child_)
            self.Assessment = obj_
            obj_.original_tagname_ = 'Assessment'
        elif nodeName_ == 'DetectionPattern':
            obj_ = DetectionPattern.factory()
            obj_.build(child_)
            self.DetectionPattern = obj_
            obj_.original_tagname_ = 'DetectionPattern'
        elif nodeName_ == 'HistoryItem':
            obj_ = HistoryItem.factory()
            obj_.build(child_)
            self.HistoryItem = obj_
            obj_.original_tagname_ = 'HistoryItem'
        elif nodeName_ == 'BulkObservable':
            obj_ = BulkObservable.factory()
            obj_.build(child_)
            self.BulkObservable = obj_
            obj_.original_tagname_ = 'BulkObservable'
        elif nodeName_ == 'AdditionalData':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.AdditionalData.append(obj_)
            obj_.original_tagname_ = 'AdditionalData'
# end class Observable


class BulkObservable(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, ext_type=None, BulkObservableFormat=None, BulkObservableList=None, AdditionalData=None):
        self.original_tagname_ = None
        self.type_ = _cast(None, type_)
        self.ext_type = _cast(None, ext_type)
        self.BulkObservableFormat = BulkObservableFormat
        self.BulkObservableList = BulkObservableList
        if AdditionalData is None:
            self.AdditionalData = []
        else:
            self.AdditionalData = AdditionalData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BulkObservable)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BulkObservable.subclass:
            return BulkObservable.subclass(*args_, **kwargs_)
        else:
            return BulkObservable(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BulkObservableFormat(self): return self.BulkObservableFormat
    def set_BulkObservableFormat(self, BulkObservableFormat): self.BulkObservableFormat = BulkObservableFormat
    def get_BulkObservableList(self): return self.BulkObservableList
    def set_BulkObservableList(self, BulkObservableList): self.BulkObservableList = BulkObservableList
    def get_AdditionalData(self): return self.AdditionalData
    def set_AdditionalData(self, AdditionalData): self.AdditionalData = AdditionalData
    def add_AdditionalData(self, value): self.AdditionalData.append(value)
    def insert_AdditionalData_at(self, index, value): self.AdditionalData.insert(index, value)
    def replace_AdditionalData_at(self, index, value): self.AdditionalData[index] = value
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_ext_type(self): return self.ext_type
    def set_ext_type(self, ext_type): self.ext_type = ext_type
    def validate_bulkobservable_type_type(self, value):
        # Validate type bulkobservable-type-type, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['asn', 'atm', 'e-mail', 'ipv4-addr', 'ipv4-net', 'ipv4-net-mask', 'ipv6-addr', 'ipv6-net', 'ipv6-net-mask', 'mac', 'site-uri', 'domain-name', 'domain-to-ipv4', 'domain-to-ipv6', 'domain-to-ipv4-timestamp', 'domain-to-ipv6-timestamp', 'ipv4-port', 'ipv6-port', 'windows-reg-key', 'file-hash', 'email-x-mailer', 'email-subject', 'http-user-agent', 'http-request-uri', 'mutex', 'file-path', 'user-name']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on bulkobservable-type-type' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.BulkObservableFormat is not None or
            self.BulkObservableList is not None or
            self.AdditionalData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='BulkObservable', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BulkObservable')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BulkObservable')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='BulkObservable', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='BulkObservable'):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.ext_type is not None and 'ext_type' not in already_processed:
            already_processed.add('ext_type')
            outfile.write(' ext-type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_type), input_name='ext-type')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='BulkObservable', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BulkObservableFormat is not None:
            self.BulkObservableFormat.export(outfile, level, namespace_='iodef:', name_='BulkObservableFormat', pretty_print=pretty_print)
        if self.BulkObservableList is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:BulkObservableList>%s</iodef:BulkObservableList>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BulkObservableList), input_name='BulkObservableList')), eol_))
        for AdditionalData_ in self.AdditionalData:
            AdditionalData_.export(outfile, level, namespace_='iodef:', name_='AdditionalData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
            self.validate_bulkobservable_type_type(self.type_)    # validate type bulkobservable-type-type
        value = find_attr_value_('ext-type', node)
        if value is not None and 'ext-type' not in already_processed:
            already_processed.add('ext-type')
            self.ext_type = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BulkObservableFormat':
            obj_ = BulkObservableFormat.factory()
            obj_.build(child_)
            self.BulkObservableFormat = obj_
            obj_.original_tagname_ = 'BulkObservableFormat'
        elif nodeName_ == 'BulkObservableList':
            BulkObservableList_ = child_.text
            BulkObservableList_ = self.gds_validate_string(BulkObservableList_, node, 'BulkObservableList')
            self.BulkObservableList = BulkObservableList_
        elif nodeName_ == 'AdditionalData':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.AdditionalData.append(obj_)
            obj_.original_tagname_ = 'AdditionalData'
# end class BulkObservable


class BulkObservableList(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BulkObservableList)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BulkObservableList.subclass:
            return BulkObservableList.subclass(*args_, **kwargs_)
        else:
            return BulkObservableList(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='BulkObservableList', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BulkObservableList')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BulkObservableList')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='BulkObservableList', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='BulkObservableList'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='BulkObservableList', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class BulkObservableList


class BulkObservableFormat(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Hash=None, AdditionalData=None):
        self.original_tagname_ = None
        self.Hash = Hash
        if AdditionalData is None:
            self.AdditionalData = []
        else:
            self.AdditionalData = AdditionalData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BulkObservableFormat)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BulkObservableFormat.subclass:
            return BulkObservableFormat.subclass(*args_, **kwargs_)
        else:
            return BulkObservableFormat(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Hash(self): return self.Hash
    def set_Hash(self, Hash): self.Hash = Hash
    def get_AdditionalData(self): return self.AdditionalData
    def set_AdditionalData(self, AdditionalData): self.AdditionalData = AdditionalData
    def add_AdditionalData(self, value): self.AdditionalData.append(value)
    def insert_AdditionalData_at(self, index, value): self.AdditionalData.insert(index, value)
    def replace_AdditionalData_at(self, index, value): self.AdditionalData[index] = value
    def hasContent_(self):
        if (
            self.Hash is not None or
            self.AdditionalData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='BulkObservableFormat', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BulkObservableFormat')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BulkObservableFormat')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='BulkObservableFormat', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='BulkObservableFormat'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='BulkObservableFormat', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Hash is not None:
            self.Hash.export(outfile, level, namespace_='iodef:', name_='Hash', pretty_print=pretty_print)
        for AdditionalData_ in self.AdditionalData:
            AdditionalData_.export(outfile, level, namespace_='iodef:', name_='AdditionalData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Hash':
            obj_ = Hash.factory()
            obj_.build(child_)
            self.Hash = obj_
            obj_.original_tagname_ = 'Hash'
        elif nodeName_ == 'AdditionalData':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.AdditionalData.append(obj_)
            obj_.original_tagname_ = 'AdditionalData'
# end class BulkObservableFormat


class IndicatorExpression(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, operator='and', ext_operator=None, IndicatorExpression_member=None, Observable=None, ObservableReference=None, IndicatorReference=None, Confidence=None, AdditionalData=None):
        self.original_tagname_ = None
        self.operator = _cast(None, operator)
        self.ext_operator = _cast(None, ext_operator)
        if IndicatorExpression_member is None:
            self.IndicatorExpression = []
        else:
            self.IndicatorExpression = IndicatorExpression_member
        if Observable is None:
            self.Observable = []
        else:
            self.Observable = Observable
        if ObservableReference is None:
            self.ObservableReference = []
        else:
            self.ObservableReference = ObservableReference
        if IndicatorReference is None:
            self.IndicatorReference = []
        else:
            self.IndicatorReference = IndicatorReference
        if Confidence is None:
            self.Confidence = []
        else:
            self.Confidence = Confidence
        if AdditionalData is None:
            self.AdditionalData = []
        else:
            self.AdditionalData = AdditionalData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IndicatorExpression)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IndicatorExpression.subclass:
            return IndicatorExpression.subclass(*args_, **kwargs_)
        else:
            return IndicatorExpression(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IndicatorExpression(self): return self.IndicatorExpression
    def set_IndicatorExpression(self, IndicatorExpression): self.IndicatorExpression = IndicatorExpression
    def add_IndicatorExpression(self, value): self.IndicatorExpression.append(value)
    def insert_IndicatorExpression_at(self, index, value): self.IndicatorExpression.insert(index, value)
    def replace_IndicatorExpression_at(self, index, value): self.IndicatorExpression[index] = value
    def get_Observable(self): return self.Observable
    def set_Observable(self, Observable): self.Observable = Observable
    def add_Observable(self, value): self.Observable.append(value)
    def insert_Observable_at(self, index, value): self.Observable.insert(index, value)
    def replace_Observable_at(self, index, value): self.Observable[index] = value
    def get_ObservableReference(self): return self.ObservableReference
    def set_ObservableReference(self, ObservableReference): self.ObservableReference = ObservableReference
    def add_ObservableReference(self, value): self.ObservableReference.append(value)
    def insert_ObservableReference_at(self, index, value): self.ObservableReference.insert(index, value)
    def replace_ObservableReference_at(self, index, value): self.ObservableReference[index] = value
    def get_IndicatorReference(self): return self.IndicatorReference
    def set_IndicatorReference(self, IndicatorReference): self.IndicatorReference = IndicatorReference
    def add_IndicatorReference(self, value): self.IndicatorReference.append(value)
    def insert_IndicatorReference_at(self, index, value): self.IndicatorReference.insert(index, value)
    def replace_IndicatorReference_at(self, index, value): self.IndicatorReference[index] = value
    def get_Confidence(self): return self.Confidence
    def set_Confidence(self, Confidence): self.Confidence = Confidence
    def add_Confidence(self, value): self.Confidence.append(value)
    def insert_Confidence_at(self, index, value): self.Confidence.insert(index, value)
    def replace_Confidence_at(self, index, value): self.Confidence[index] = value
    def get_AdditionalData(self): return self.AdditionalData
    def set_AdditionalData(self, AdditionalData): self.AdditionalData = AdditionalData
    def add_AdditionalData(self, value): self.AdditionalData.append(value)
    def insert_AdditionalData_at(self, index, value): self.AdditionalData.insert(index, value)
    def replace_AdditionalData_at(self, index, value): self.AdditionalData[index] = value
    def get_operator(self): return self.operator
    def set_operator(self, operator): self.operator = operator
    def get_ext_operator(self): return self.ext_operator
    def set_ext_operator(self, ext_operator): self.ext_operator = ext_operator
    def validate_indicatorexpression_operator_type(self, value):
        # Validate type indicatorexpression-operator-type, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['not', 'and', 'or', 'xor']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on indicatorexpression-operator-type' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.IndicatorExpression or
            self.Observable or
            self.ObservableReference or
            self.IndicatorReference or
            self.Confidence or
            self.AdditionalData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='IndicatorExpression', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IndicatorExpression')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IndicatorExpression')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='IndicatorExpression', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='IndicatorExpression'):
        if self.operator != "and" and 'operator' not in already_processed:
            already_processed.add('operator')
            outfile.write(' operator=%s' % (quote_attrib(self.operator), ))
        if self.ext_operator is not None and 'ext_operator' not in already_processed:
            already_processed.add('ext_operator')
            outfile.write(' ext-operator=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_operator), input_name='ext-operator')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='IndicatorExpression', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for IndicatorExpression_ in self.IndicatorExpression:
            IndicatorExpression_.export(outfile, level, namespace_='iodef:', name_='IndicatorExpression', pretty_print=pretty_print)
        for Observable_ in self.Observable:
            Observable_.export(outfile, level, namespace_='iodef:', name_='Observable', pretty_print=pretty_print)
        for ObservableReference_ in self.ObservableReference:
            ObservableReference_.export(outfile, level, namespace_='iodef:', name_='ObservableReference', pretty_print=pretty_print)
        for IndicatorReference_ in self.IndicatorReference:
            IndicatorReference_.export(outfile, level, namespace_='iodef:', name_='IndicatorReference', pretty_print=pretty_print)
        for Confidence_ in self.Confidence:
            Confidence_.export(outfile, level, namespace_='iodef:', name_='Confidence', pretty_print=pretty_print)
        for AdditionalData_ in self.AdditionalData:
            AdditionalData_.export(outfile, level, namespace_='iodef:', name_='AdditionalData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('operator', node)
        if value is not None and 'operator' not in already_processed:
            already_processed.add('operator')
            self.operator = value
            self.validate_indicatorexpression_operator_type(self.operator)    # validate type indicatorexpression-operator-type
        value = find_attr_value_('ext-operator', node)
        if value is not None and 'ext-operator' not in already_processed:
            already_processed.add('ext-operator')
            self.ext_operator = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IndicatorExpression':
            obj_ = IndicatorExpression.factory()
            obj_.build(child_)
            self.IndicatorExpression.append(obj_)
            obj_.original_tagname_ = 'IndicatorExpression'
        elif nodeName_ == 'Observable':
            obj_ = Observable.factory()
            obj_.build(child_)
            self.Observable.append(obj_)
            obj_.original_tagname_ = 'Observable'
        elif nodeName_ == 'ObservableReference':
            obj_ = ObservableReference.factory()
            obj_.build(child_)
            self.ObservableReference.append(obj_)
            obj_.original_tagname_ = 'ObservableReference'
        elif nodeName_ == 'IndicatorReference':
            obj_ = IndicatorReference.factory()
            obj_.build(child_)
            self.IndicatorReference.append(obj_)
            obj_.original_tagname_ = 'IndicatorReference'
        elif nodeName_ == 'Confidence':
            obj_ = Confidence.factory()
            obj_.build(child_)
            self.Confidence.append(obj_)
            obj_.original_tagname_ = 'Confidence'
        elif nodeName_ == 'AdditionalData':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.AdditionalData.append(obj_)
            obj_.original_tagname_ = 'AdditionalData'
# end class IndicatorExpression


class ObservableReference(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, uid_ref=None):
        self.original_tagname_ = None
        self.uid_ref = _cast(None, uid_ref)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ObservableReference)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ObservableReference.subclass:
            return ObservableReference.subclass(*args_, **kwargs_)
        else:
            return ObservableReference(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_uid_ref(self): return self.uid_ref
    def set_uid_ref(self, uid_ref): self.uid_ref = uid_ref
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='ObservableReference', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ObservableReference')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ObservableReference')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='ObservableReference', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='ObservableReference'):
        if self.uid_ref is not None and 'uid_ref' not in already_processed:
            already_processed.add('uid_ref')
            outfile.write(' uid-ref=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.uid_ref), input_name='uid-ref')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='ObservableReference', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('uid-ref', node)
        if value is not None and 'uid-ref' not in already_processed:
            already_processed.add('uid-ref')
            self.uid_ref = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ObservableReference


class IndicatorReference(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, uid_ref=None, euid_ref=None, version=None):
        self.original_tagname_ = None
        self.uid_ref = _cast(None, uid_ref)
        self.euid_ref = _cast(None, euid_ref)
        self.version = _cast(None, version)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IndicatorReference)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IndicatorReference.subclass:
            return IndicatorReference.subclass(*args_, **kwargs_)
        else:
            return IndicatorReference(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_uid_ref(self): return self.uid_ref
    def set_uid_ref(self, uid_ref): self.uid_ref = uid_ref
    def get_euid_ref(self): return self.euid_ref
    def set_euid_ref(self, euid_ref): self.euid_ref = euid_ref
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='IndicatorReference', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IndicatorReference')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IndicatorReference')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='IndicatorReference', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='IndicatorReference'):
        if self.uid_ref is not None and 'uid_ref' not in already_processed:
            already_processed.add('uid_ref')
            outfile.write(' uid-ref=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.uid_ref), input_name='uid-ref')), ))
        if self.euid_ref is not None and 'euid_ref' not in already_processed:
            already_processed.add('euid_ref')
            outfile.write(' euid-ref=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.euid_ref), input_name='euid-ref')), ))
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.version), input_name='version')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='IndicatorReference', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('uid-ref', node)
        if value is not None and 'uid-ref' not in already_processed:
            already_processed.add('uid-ref')
            self.uid_ref = value
        value = find_attr_value_('euid-ref', node)
        if value is not None and 'euid-ref' not in already_processed:
            already_processed.add('euid-ref')
            self.euid_ref = value
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class IndicatorReference


class AttackPhase(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AttackPhaseID=None, URL=None, Description=None, AdditionalData=None):
        self.original_tagname_ = None
        if AttackPhaseID is None:
            self.AttackPhaseID = []
        else:
            self.AttackPhaseID = AttackPhaseID
        if URL is None:
            self.URL = []
        else:
            self.URL = URL
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
        if AdditionalData is None:
            self.AdditionalData = []
        else:
            self.AdditionalData = AdditionalData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AttackPhase)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AttackPhase.subclass:
            return AttackPhase.subclass(*args_, **kwargs_)
        else:
            return AttackPhase(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AttackPhaseID(self): return self.AttackPhaseID
    def set_AttackPhaseID(self, AttackPhaseID): self.AttackPhaseID = AttackPhaseID
    def add_AttackPhaseID(self, value): self.AttackPhaseID.append(value)
    def insert_AttackPhaseID_at(self, index, value): self.AttackPhaseID.insert(index, value)
    def replace_AttackPhaseID_at(self, index, value): self.AttackPhaseID[index] = value
    def get_URL(self): return self.URL
    def set_URL(self, URL): self.URL = URL
    def add_URL(self, value): self.URL.append(value)
    def insert_URL_at(self, index, value): self.URL.insert(index, value)
    def replace_URL_at(self, index, value): self.URL[index] = value
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def get_AdditionalData(self): return self.AdditionalData
    def set_AdditionalData(self, AdditionalData): self.AdditionalData = AdditionalData
    def add_AdditionalData(self, value): self.AdditionalData.append(value)
    def insert_AdditionalData_at(self, index, value): self.AdditionalData.insert(index, value)
    def replace_AdditionalData_at(self, index, value): self.AdditionalData[index] = value
    def hasContent_(self):
        if (
            self.AttackPhaseID or
            self.URL or
            self.Description or
            self.AdditionalData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='AttackPhase', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AttackPhase')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AttackPhase')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='AttackPhase', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='AttackPhase'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='AttackPhase', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AttackPhaseID_ in self.AttackPhaseID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:AttackPhaseID>%s</iodef:AttackPhaseID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(AttackPhaseID_), input_name='AttackPhaseID')), eol_))
        for URL_ in self.URL:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:URL>%s</iodef:URL>%s' % (self.gds_encode(self.gds_format_string(quote_xml(URL_), input_name='URL')), eol_))
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
        for AdditionalData_ in self.AdditionalData:
            AdditionalData_.export(outfile, level, namespace_='iodef:', name_='AdditionalData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AttackPhaseID':
            AttackPhaseID_ = child_.text
            AttackPhaseID_ = self.gds_validate_string(AttackPhaseID_, node, 'AttackPhaseID')
            self.AttackPhaseID.append(AttackPhaseID_)
        elif nodeName_ == 'URL':
            URL_ = child_.text
            URL_ = self.gds_validate_string(URL_, node, 'URL')
            self.URL.append(URL_)
        elif nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'AdditionalData':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.AdditionalData.append(obj_)
            obj_.original_tagname_ = 'AdditionalData'
# end class AttackPhase


class MLStringType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, translation_id=None, lang=None, valueOf_=None):
        self.original_tagname_ = None
        self.translation_id = _cast(None, translation_id)
        self.lang = _cast(None, lang)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MLStringType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MLStringType.subclass:
            return MLStringType.subclass(*args_, **kwargs_)
        else:
            return MLStringType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_translation_id(self): return self.translation_id
    def set_translation_id(self, translation_id): self.translation_id = translation_id
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='MLStringType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MLStringType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MLStringType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='MLStringType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='MLStringType'):
        if self.translation_id is not None and 'translation_id' not in already_processed:
            already_processed.add('translation_id')
            outfile.write(' translation-id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.translation_id), input_name='translation-id')), ))
        if self.lang is not None and 'lang' not in already_processed:
            already_processed.add('lang')
            outfile.write(' lang=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.lang), input_name='lang')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='MLStringType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('translation-id', node)
        if value is not None and 'translation-id' not in already_processed:
            already_processed.add('translation-id')
            self.translation_id = value
        value = find_attr_value_('lang', node)
        if value is not None and 'lang' not in already_processed:
            already_processed.add('lang')
            self.lang = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MLStringType


class ExtensionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, dtype=None, ext_dtype=None, meaning=None, formatid=None, restriction=None, ext_restriction=None, observable_id=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.dtype = _cast(None, dtype)
        self.ext_dtype = _cast(None, ext_dtype)
        self.meaning = _cast(None, meaning)
        self.formatid = _cast(None, formatid)
        self.restriction = _cast(None, restriction)
        self.ext_restriction = _cast(None, ext_restriction)
        self.observable_id = _cast(None, observable_id)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExtensionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExtensionType.subclass:
            return ExtensionType.subclass(*args_, **kwargs_)
        else:
            return ExtensionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_dtype(self): return self.dtype
    def set_dtype(self, dtype): self.dtype = dtype
    def get_ext_dtype(self): return self.ext_dtype
    def set_ext_dtype(self, ext_dtype): self.ext_dtype = ext_dtype
    def get_meaning(self): return self.meaning
    def set_meaning(self, meaning): self.meaning = meaning
    def get_formatid(self): return self.formatid
    def set_formatid(self, formatid): self.formatid = formatid
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def get_ext_restriction(self): return self.ext_restriction
    def set_ext_restriction(self, ext_restriction): self.ext_restriction = ext_restriction
    def get_observable_id(self): return self.observable_id
    def set_observable_id(self, observable_id): self.observable_id = observable_id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='ExtensionType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExtensionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExtensionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='ExtensionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='ExtensionType'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.dtype is not None and 'dtype' not in already_processed:
            already_processed.add('dtype')
            outfile.write(' dtype=%s' % (quote_attrib(self.dtype), ))
        if self.ext_dtype is not None and 'ext_dtype' not in already_processed:
            already_processed.add('ext_dtype')
            outfile.write(' ext-dtype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_dtype), input_name='ext-dtype')), ))
        if self.meaning is not None and 'meaning' not in already_processed:
            already_processed.add('meaning')
            outfile.write(' meaning=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.meaning), input_name='meaning')), ))
        if self.formatid is not None and 'formatid' not in already_processed:
            already_processed.add('formatid')
            outfile.write(' formatid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.formatid), input_name='formatid')), ))
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
        if self.ext_restriction is not None and 'ext_restriction' not in already_processed:
            already_processed.add('ext_restriction')
            outfile.write(' ext-restriction=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_restriction), input_name='ext-restriction')), ))
        if self.observable_id is not None and 'observable_id' not in already_processed:
            already_processed.add('observable_id')
            outfile.write(' observable-id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.observable_id), input_name='observable-id')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='ExtensionType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('dtype', node)
        if value is not None and 'dtype' not in already_processed:
            already_processed.add('dtype')
            self.dtype = value
        value = find_attr_value_('ext-dtype', node)
        if value is not None and 'ext-dtype' not in already_processed:
            already_processed.add('ext-dtype')
            self.ext_dtype = value
        value = find_attr_value_('meaning', node)
        if value is not None and 'meaning' not in already_processed:
            already_processed.add('meaning')
            self.meaning = value
        value = find_attr_value_('formatid', node)
        if value is not None and 'formatid' not in already_processed:
            already_processed.add('formatid')
            self.formatid = value
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
        value = find_attr_value_('ext-restriction', node)
        if value is not None and 'ext-restriction' not in already_processed:
            already_processed.add('ext-restriction')
            self.ext_restriction = value
        value = find_attr_value_('observable-id', node)
        if value is not None and 'observable-id' not in already_processed:
            already_processed.add('observable-id')
            self.observable_id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class ExtensionType


class SoftwareType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SoftwareReference=None, URL=None, Description=None):
        self.original_tagname_ = None
        self.SoftwareReference = SoftwareReference
        if URL is None:
            self.URL = []
        else:
            self.URL = URL
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SoftwareType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SoftwareType.subclass:
            return SoftwareType.subclass(*args_, **kwargs_)
        else:
            return SoftwareType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SoftwareReference(self): return self.SoftwareReference
    def set_SoftwareReference(self, SoftwareReference): self.SoftwareReference = SoftwareReference
    def get_URL(self): return self.URL
    def set_URL(self, URL): self.URL = URL
    def add_URL(self, value): self.URL.append(value)
    def insert_URL_at(self, index, value): self.URL.insert(index, value)
    def replace_URL_at(self, index, value): self.URL[index] = value
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def hasContent_(self):
        if (
            self.SoftwareReference is not None or
            self.URL or
            self.Description
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='SoftwareType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SoftwareType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SoftwareType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='SoftwareType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='SoftwareType'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='SoftwareType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SoftwareReference is not None:
            self.SoftwareReference.export(outfile, level, namespace_='iodef:', name_='SoftwareReference', pretty_print=pretty_print)
        for URL_ in self.URL:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:URL>%s</iodef:URL>%s' % (self.gds_encode(self.gds_format_string(quote_xml(URL_), input_name='URL')), eol_))
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SoftwareReference':
            obj_ = SoftwareReference.factory()
            obj_.build(child_)
            self.SoftwareReference = obj_
            obj_.original_tagname_ = 'SoftwareReference'
        elif nodeName_ == 'URL':
            URL_ = child_.text
            URL_ = self.gds_validate_string(URL_, node, 'URL')
            self.URL.append(URL_)
        elif nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
# end class SoftwareType


class SoftwareReference(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, spec_name=None, ext_spec_name=None, dtype=None, ext_dtype=None, anytypeobjs_=None):
        self.original_tagname_ = None
        self.spec_name = _cast(None, spec_name)
        self.ext_spec_name = _cast(None, ext_spec_name)
        self.dtype = _cast(None, dtype)
        self.ext_dtype = _cast(None, ext_dtype)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SoftwareReference)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SoftwareReference.subclass:
            return SoftwareReference.subclass(*args_, **kwargs_)
        else:
            return SoftwareReference(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_spec_name(self): return self.spec_name
    def set_spec_name(self, spec_name): self.spec_name = spec_name
    def get_ext_spec_name(self): return self.ext_spec_name
    def set_ext_spec_name(self, ext_spec_name): self.ext_spec_name = ext_spec_name
    def get_dtype(self): return self.dtype
    def set_dtype(self, dtype): self.dtype = dtype
    def get_ext_dtype(self): return self.ext_dtype
    def set_ext_dtype(self, ext_dtype): self.ext_dtype = ext_dtype
    def validate_softwarereference_spec_name_type(self, value):
        # Validate type softwarereference-spec-name-type, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['custom', 'cpe', 'swid', 'ext-value']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on softwarereference-spec-name-type' % {"value" : value.encode("utf-8")} )
    def validate_softwarereference_dtype_type(self, value):
        # Validate type softwarereference-dtype-type, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['bytes', 'integer', 'real', 'string', 'xml', 'ext-value']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on softwarereference-dtype-type' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='SoftwareReference', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SoftwareReference')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SoftwareReference')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='SoftwareReference', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='SoftwareReference'):
        if self.spec_name is not None and 'spec_name' not in already_processed:
            already_processed.add('spec_name')
            outfile.write(' spec-name=%s' % (quote_attrib(self.spec_name), ))
        if self.ext_spec_name is not None and 'ext_spec_name' not in already_processed:
            already_processed.add('ext_spec_name')
            outfile.write(' ext-spec-name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_spec_name), input_name='ext-spec-name')), ))
        if self.dtype is not None and 'dtype' not in already_processed:
            already_processed.add('dtype')
            outfile.write(' dtype=%s' % (quote_attrib(self.dtype), ))
        if self.ext_dtype is not None and 'ext_dtype' not in already_processed:
            already_processed.add('ext_dtype')
            outfile.write(' ext-dtype=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_dtype), input_name='ext-dtype')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='SoftwareReference', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('spec-name', node)
        if value is not None and 'spec-name' not in already_processed:
            already_processed.add('spec-name')
            self.spec_name = value
            self.validate_softwarereference_spec_name_type(self.spec_name)    # validate type softwarereference-spec-name-type
        value = find_attr_value_('ext-spec-name', node)
        if value is not None and 'ext-spec-name' not in already_processed:
            already_processed.add('ext-spec-name')
            self.ext_spec_name = value
        value = find_attr_value_('dtype', node)
        if value is not None and 'dtype' not in already_processed:
            already_processed.add('dtype')
            self.dtype = value
            self.validate_softwarereference_dtype_type(self.dtype)    # validate type softwarereference-dtype-type
        value = find_attr_value_('ext-dtype', node)
        if value is not None and 'ext-dtype' not in already_processed:
            already_processed.add('ext-dtype')
            self.ext_dtype = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        obj_ = self.gds_build_any(child_, 'SoftwareReference')
        if obj_ is not None:
            self.add_anytypeobjs_(obj_)
# end class SoftwareReference


class SignatureType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, SignedInfo=None, SignatureValue=None, KeyInfo=None, Object=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.SignedInfo = SignedInfo
        self.SignatureValue = SignatureValue
        self.KeyInfo = KeyInfo
        if Object is None:
            self.Object = []
        else:
            self.Object = Object
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureType.subclass:
            return SignatureType.subclass(*args_, **kwargs_)
        else:
            return SignatureType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SignedInfo(self): return self.SignedInfo
    def set_SignedInfo(self, SignedInfo): self.SignedInfo = SignedInfo
    def get_SignatureValue(self): return self.SignatureValue
    def set_SignatureValue(self, SignatureValue): self.SignatureValue = SignatureValue
    def get_KeyInfo(self): return self.KeyInfo
    def set_KeyInfo(self, KeyInfo): self.KeyInfo = KeyInfo
    def get_Object(self): return self.Object
    def set_Object(self, Object): self.Object = Object
    def add_Object(self, value): self.Object.append(value)
    def insert_Object_at(self, index, value): self.Object.insert(index, value)
    def replace_Object_at(self, index, value): self.Object[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.SignedInfo is not None or
            self.SignatureValue is not None or
            self.KeyInfo is not None or
            self.Object
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='SignatureType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='SignatureType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='SignatureType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='SignatureType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SignedInfo is not None:
            self.SignedInfo.export(outfile, level, namespace_='ds:', name_='SignedInfo', pretty_print=pretty_print)
        if self.SignatureValue is not None:
            self.SignatureValue.export(outfile, level, namespace_='ds:', name_='SignatureValue', pretty_print=pretty_print)
        if self.KeyInfo is not None:
            self.KeyInfo.export(outfile, level, namespace_='ds:', name_='KeyInfo', pretty_print=pretty_print)
        for Object_ in self.Object:
            Object_.export(outfile, level, namespace_='ds:', name_='Object', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SignedInfo':
            obj_ = SignedInfoType.factory()
            obj_.build(child_)
            self.SignedInfo = obj_
            obj_.original_tagname_ = 'SignedInfo'
        elif nodeName_ == 'SignatureValue':
            obj_ = SignatureValueType.factory()
            obj_.build(child_)
            self.SignatureValue = obj_
            obj_.original_tagname_ = 'SignatureValue'
        elif nodeName_ == 'KeyInfo':
            obj_ = KeyInfoType.factory()
            obj_.build(child_)
            self.KeyInfo = obj_
            obj_.original_tagname_ = 'KeyInfo'
        elif nodeName_ == 'Object':
            obj_ = ObjectType.factory()
            obj_.build(child_)
            self.Object.append(obj_)
            obj_.original_tagname_ = 'Object'
# end class SignatureType


class SignatureValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, valueOf_=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureValueType.subclass:
            return SignatureValueType.subclass(*args_, **kwargs_)
        else:
            return SignatureValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='SignatureValueType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureValueType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='SignatureValueType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='SignatureValueType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='SignatureValueType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SignatureValueType


class SignedInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, CanonicalizationMethod=None, SignatureMethod=None, Reference=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.CanonicalizationMethod = CanonicalizationMethod
        self.SignatureMethod = SignatureMethod
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignedInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignedInfoType.subclass:
            return SignedInfoType.subclass(*args_, **kwargs_)
        else:
            return SignedInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CanonicalizationMethod(self): return self.CanonicalizationMethod
    def set_CanonicalizationMethod(self, CanonicalizationMethod): self.CanonicalizationMethod = CanonicalizationMethod
    def get_SignatureMethod(self): return self.SignatureMethod
    def set_SignatureMethod(self, SignatureMethod): self.SignatureMethod = SignatureMethod
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.CanonicalizationMethod is not None or
            self.SignatureMethod is not None or
            self.Reference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='SignedInfoType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignedInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignedInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='SignedInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='SignedInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='SignedInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CanonicalizationMethod is not None:
            self.CanonicalizationMethod.export(outfile, level, namespace_='ds:', name_='CanonicalizationMethod', pretty_print=pretty_print)
        if self.SignatureMethod is not None:
            self.SignatureMethod.export(outfile, level, namespace_='ds:', name_='SignatureMethod', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_='ds:', name_='Reference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CanonicalizationMethod':
            obj_ = CanonicalizationMethodType.factory()
            obj_.build(child_)
            self.CanonicalizationMethod = obj_
            obj_.original_tagname_ = 'CanonicalizationMethod'
        elif nodeName_ == 'SignatureMethod':
            obj_ = SignatureMethodType.factory()
            obj_.build(child_)
            self.SignatureMethod = obj_
            obj_.original_tagname_ = 'SignatureMethod'
        elif nodeName_ == 'Reference':
            obj_ = Reference.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
# end class SignedInfoType


class CanonicalizationMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CanonicalizationMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CanonicalizationMethodType.subclass:
            return CanonicalizationMethodType.subclass(*args_, **kwargs_)
        else:
            return CanonicalizationMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='CanonicalizationMethodType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CanonicalizationMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CanonicalizationMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='CanonicalizationMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='CanonicalizationMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='CanonicalizationMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class CanonicalizationMethodType


class SignatureMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, HMACOutputLength=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)
        self.HMACOutputLength = HMACOutputLength
        self.validate_HMACOutputLengthType(self.HMACOutputLength)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureMethodType.subclass:
            return SignatureMethodType.subclass(*args_, **kwargs_)
        else:
            return SignatureMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HMACOutputLength(self): return self.HMACOutputLength
    def set_HMACOutputLength(self, HMACOutputLength): self.HMACOutputLength = HMACOutputLength
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_HMACOutputLengthType(self, value):
        # Validate type HMACOutputLengthType, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.HMACOutputLength is not None or
            self.anytypeobjs_ or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='SignatureMethodType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='SignatureMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='SignatureMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='SignatureMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HMACOutputLength is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:HMACOutputLength>%s</iodef:HMACOutputLength>%s' % (self.gds_format_integer(self.HMACOutputLength, input_name='HMACOutputLength'), eol_))
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HMACOutputLength' and child_.text is not None:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeInteger, 'HMACOutputLength', ival_)
            self.content_.append(obj_)
        elif nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class SignatureMethodType


class ReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, URI=None, Type=None, Transforms=None, DigestMethod=None, DigestValue=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.URI = _cast(None, URI)
        self.Type = _cast(None, Type)
        self.Transforms = Transforms
        self.DigestMethod = DigestMethod
        self.DigestValue = DigestValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType.subclass:
            return ReferenceType.subclass(*args_, **kwargs_)
        else:
            return ReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transforms(self): return self.Transforms
    def set_Transforms(self, Transforms): self.Transforms = Transforms
    def get_DigestMethod(self): return self.DigestMethod
    def set_DigestMethod(self, DigestMethod): self.DigestMethod = DigestMethod
    def get_DigestValue(self): return self.DigestValue
    def set_DigestValue(self, DigestValue): self.DigestValue = DigestValue
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_URI(self): return self.URI
    def set_URI(self, URI): self.URI = URI
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def hasContent_(self):
        if (
            self.Transforms is not None or
            self.DigestMethod is not None or
            self.DigestValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='ReferenceType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='ReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='ReferenceType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            outfile.write(' URI=%s' % (quote_attrib(self.URI), ))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (quote_attrib(self.Type), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='ReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transforms is not None:
            self.Transforms.export(outfile, level, namespace_='ds:', name_='Transforms', pretty_print=pretty_print)
        if self.DigestMethod is not None:
            self.DigestMethod.export(outfile, level, namespace_='ds:', name_='DigestMethod', pretty_print=pretty_print)
        if self.DigestValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:DigestValue>%s</ds:DigestValue>%s' % (self.gds_format_base64(self.DigestValue, input_name='DigestValue'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
        value = find_attr_value_('URI', node)
        if value is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            self.URI = value
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transforms':
            obj_ = TransformsType.factory()
            obj_.build(child_)
            self.Transforms = obj_
            obj_.original_tagname_ = 'Transforms'
        elif nodeName_ == 'DigestMethod':
            obj_ = DigestMethodType.factory()
            obj_.build(child_)
            self.DigestMethod = obj_
            obj_.original_tagname_ = 'DigestMethod'
        elif nodeName_ == 'DigestValue':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'DigestValue')
            else:
                bval_ = None
            self.DigestValue = bval_
# end class ReferenceType


class TransformsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Transform=None):
        self.original_tagname_ = None
        if Transform is None:
            self.Transform = []
        else:
            self.Transform = Transform
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransformsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransformsType.subclass:
            return TransformsType.subclass(*args_, **kwargs_)
        else:
            return TransformsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transform(self): return self.Transform
    def set_Transform(self, Transform): self.Transform = Transform
    def add_Transform(self, value): self.Transform.append(value)
    def insert_Transform_at(self, index, value): self.Transform.insert(index, value)
    def replace_Transform_at(self, index, value): self.Transform[index] = value
    def hasContent_(self):
        if (
            self.Transform
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='TransformsType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransformsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransformsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='TransformsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='TransformsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='TransformsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Transform_ in self.Transform:
            Transform_.export(outfile, level, namespace_='ds:', name_='Transform', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transform':
            obj_ = TransformType.factory()
            obj_.build(child_)
            self.Transform.append(obj_)
            obj_.original_tagname_ = 'Transform'
# end class TransformsType


class TransformType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, XPath=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)
        self.anytypeobjs_ = anytypeobjs_
        if XPath is None:
            self.XPath = []
        else:
            self.XPath = XPath
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransformType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransformType.subclass:
            return TransformType.subclass(*args_, **kwargs_)
        else:
            return TransformType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_XPath(self): return self.XPath
    def set_XPath(self, XPath): self.XPath = XPath
    def add_XPath(self, value): self.XPath.append(value)
    def insert_XPath_at(self, index, value): self.XPath.insert(index, value)
    def replace_XPath_at(self, index, value): self.XPath[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ is not None or
            self.XPath or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='TransformType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransformType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransformType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='TransformType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='TransformType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='TransformType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for XPath_ in self.XPath:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:XPath>%s</iodef:XPath>%s' % (self.gds_encode(self.gds_format_string(quote_xml(XPath_), input_name='XPath')), eol_))
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        elif nodeName_ == 'XPath' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'XPath', valuestr_)
            self.content_.append(obj_)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class TransformType


class DigestMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DigestMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DigestMethodType.subclass:
            return DigestMethodType.subclass(*args_, **kwargs_)
        else:
            return DigestMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='DigestMethodType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DigestMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DigestMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='DigestMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='DigestMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='DigestMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class DigestMethodType


class KeyInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, KeyName=None, KeyValue=None, RetrievalMethod=None, X509Data=None, PGPData=None, SPKIData=None, MgmtData=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        if KeyName is None:
            self.KeyName = []
        else:
            self.KeyName = KeyName
        if KeyValue is None:
            self.KeyValue = []
        else:
            self.KeyValue = KeyValue
        if RetrievalMethod is None:
            self.RetrievalMethod = []
        else:
            self.RetrievalMethod = RetrievalMethod
        if X509Data is None:
            self.X509Data = []
        else:
            self.X509Data = X509Data
        if PGPData is None:
            self.PGPData = []
        else:
            self.PGPData = PGPData
        if SPKIData is None:
            self.SPKIData = []
        else:
            self.SPKIData = SPKIData
        if MgmtData is None:
            self.MgmtData = []
        else:
            self.MgmtData = MgmtData
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, KeyInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if KeyInfoType.subclass:
            return KeyInfoType.subclass(*args_, **kwargs_)
        else:
            return KeyInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_KeyName(self): return self.KeyName
    def set_KeyName(self, KeyName): self.KeyName = KeyName
    def add_KeyName(self, value): self.KeyName.append(value)
    def insert_KeyName_at(self, index, value): self.KeyName.insert(index, value)
    def replace_KeyName_at(self, index, value): self.KeyName[index] = value
    def get_KeyValue(self): return self.KeyValue
    def set_KeyValue(self, KeyValue): self.KeyValue = KeyValue
    def add_KeyValue(self, value): self.KeyValue.append(value)
    def insert_KeyValue_at(self, index, value): self.KeyValue.insert(index, value)
    def replace_KeyValue_at(self, index, value): self.KeyValue[index] = value
    def get_RetrievalMethod(self): return self.RetrievalMethod
    def set_RetrievalMethod(self, RetrievalMethod): self.RetrievalMethod = RetrievalMethod
    def add_RetrievalMethod(self, value): self.RetrievalMethod.append(value)
    def insert_RetrievalMethod_at(self, index, value): self.RetrievalMethod.insert(index, value)
    def replace_RetrievalMethod_at(self, index, value): self.RetrievalMethod[index] = value
    def get_X509Data(self): return self.X509Data
    def set_X509Data(self, X509Data): self.X509Data = X509Data
    def add_X509Data(self, value): self.X509Data.append(value)
    def insert_X509Data_at(self, index, value): self.X509Data.insert(index, value)
    def replace_X509Data_at(self, index, value): self.X509Data[index] = value
    def get_PGPData(self): return self.PGPData
    def set_PGPData(self, PGPData): self.PGPData = PGPData
    def add_PGPData(self, value): self.PGPData.append(value)
    def insert_PGPData_at(self, index, value): self.PGPData.insert(index, value)
    def replace_PGPData_at(self, index, value): self.PGPData[index] = value
    def get_SPKIData(self): return self.SPKIData
    def set_SPKIData(self, SPKIData): self.SPKIData = SPKIData
    def add_SPKIData(self, value): self.SPKIData.append(value)
    def insert_SPKIData_at(self, index, value): self.SPKIData.insert(index, value)
    def replace_SPKIData_at(self, index, value): self.SPKIData[index] = value
    def get_MgmtData(self): return self.MgmtData
    def set_MgmtData(self, MgmtData): self.MgmtData = MgmtData
    def add_MgmtData(self, value): self.MgmtData.append(value)
    def insert_MgmtData_at(self, index, value): self.MgmtData.insert(index, value)
    def replace_MgmtData_at(self, index, value): self.MgmtData[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.KeyName or
            self.KeyValue or
            self.RetrievalMethod or
            self.X509Data or
            self.PGPData or
            self.SPKIData or
            self.MgmtData or
            self.anytypeobjs_ is not None or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='KeyInfoType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('KeyInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='KeyInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='KeyInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='KeyInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='KeyInfoType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for KeyName_ in self.KeyName:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:KeyName>%s</ds:KeyName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(KeyName_), input_name='KeyName')), eol_))
        for KeyValue_ in self.KeyValue:
            KeyValue_.export(outfile, level, namespace_='ds:', name_='KeyValue', pretty_print=pretty_print)
        for RetrievalMethod_ in self.RetrievalMethod:
            RetrievalMethod_.export(outfile, level, namespace_='ds:', name_='RetrievalMethod', pretty_print=pretty_print)
        for X509Data_ in self.X509Data:
            X509Data_.export(outfile, level, namespace_='ds:', name_='X509Data', pretty_print=pretty_print)
        for PGPData_ in self.PGPData:
            PGPData_.export(outfile, level, namespace_='ds:', name_='PGPData', pretty_print=pretty_print)
        for SPKIData_ in self.SPKIData:
            SPKIData_.export(outfile, level, namespace_='ds:', name_='SPKIData', pretty_print=pretty_print)
        for MgmtData_ in self.MgmtData:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:MgmtData>%s</ds:MgmtData>%s' % (self.gds_encode(self.gds_format_string(quote_xml(MgmtData_), input_name='MgmtData')), eol_))
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'KeyName' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'KeyName', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'KeyValue':
            obj_ = KeyValueType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'KeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_KeyValue'):
              self.add_KeyValue(obj_.value)
            elif hasattr(self, 'set_KeyValue'):
              self.set_KeyValue(obj_.value)
        elif nodeName_ == 'RetrievalMethod':
            obj_ = RetrievalMethodType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'RetrievalMethod', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_RetrievalMethod'):
              self.add_RetrievalMethod(obj_.value)
            elif hasattr(self, 'set_RetrievalMethod'):
              self.set_RetrievalMethod(obj_.value)
        elif nodeName_ == 'X509Data':
            obj_ = X509DataType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'X509Data', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_X509Data'):
              self.add_X509Data(obj_.value)
            elif hasattr(self, 'set_X509Data'):
              self.set_X509Data(obj_.value)
        elif nodeName_ == 'PGPData':
            obj_ = PGPDataType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'PGPData', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_PGPData'):
              self.add_PGPData(obj_.value)
            elif hasattr(self, 'set_PGPData'):
              self.set_PGPData(obj_.value)
        elif nodeName_ == 'SPKIData':
            obj_ = SPKIDataType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'SPKIData', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_SPKIData'):
              self.add_SPKIData(obj_.value)
            elif hasattr(self, 'set_SPKIData'):
              self.set_SPKIData(obj_.value)
        elif nodeName_ == 'MgmtData' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'MgmtData', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class KeyInfoType


class KeyValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DSAKeyValue=None, RSAKeyValue=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.DSAKeyValue = DSAKeyValue
        self.RSAKeyValue = RSAKeyValue
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, KeyValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if KeyValueType.subclass:
            return KeyValueType.subclass(*args_, **kwargs_)
        else:
            return KeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DSAKeyValue(self): return self.DSAKeyValue
    def set_DSAKeyValue(self, DSAKeyValue): self.DSAKeyValue = DSAKeyValue
    def get_RSAKeyValue(self): return self.RSAKeyValue
    def set_RSAKeyValue(self, RSAKeyValue): self.RSAKeyValue = RSAKeyValue
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.DSAKeyValue is not None or
            self.RSAKeyValue is not None or
            self.anytypeobjs_ is not None or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='KeyValueType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('KeyValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='KeyValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='KeyValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='KeyValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='KeyValueType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DSAKeyValue is not None:
            self.DSAKeyValue.export(outfile, level, namespace_='ds:', name_='DSAKeyValue', pretty_print=pretty_print)
        if self.RSAKeyValue is not None:
            self.RSAKeyValue.export(outfile, level, namespace_='ds:', name_='RSAKeyValue', pretty_print=pretty_print)
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DSAKeyValue':
            obj_ = DSAKeyValueType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'DSAKeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_DSAKeyValue'):
              self.add_DSAKeyValue(obj_.value)
            elif hasattr(self, 'set_DSAKeyValue'):
              self.set_DSAKeyValue(obj_.value)
        elif nodeName_ == 'RSAKeyValue':
            obj_ = RSAKeyValueType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'RSAKeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_RSAKeyValue'):
              self.add_RSAKeyValue(obj_.value)
            elif hasattr(self, 'set_RSAKeyValue'):
              self.set_RSAKeyValue(obj_.value)
        elif nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class KeyValueType


class RetrievalMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, URI=None, Type=None, Transforms=None):
        self.original_tagname_ = None
        self.URI = _cast(None, URI)
        self.Type = _cast(None, Type)
        self.Transforms = Transforms
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RetrievalMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RetrievalMethodType.subclass:
            return RetrievalMethodType.subclass(*args_, **kwargs_)
        else:
            return RetrievalMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transforms(self): return self.Transforms
    def set_Transforms(self, Transforms): self.Transforms = Transforms
    def get_URI(self): return self.URI
    def set_URI(self, URI): self.URI = URI
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def hasContent_(self):
        if (
            self.Transforms is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='RetrievalMethodType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RetrievalMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RetrievalMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='RetrievalMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='RetrievalMethodType'):
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            outfile.write(' URI=%s' % (quote_attrib(self.URI), ))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (quote_attrib(self.Type), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='RetrievalMethodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transforms is not None:
            self.Transforms.export(outfile, level, namespace_='ds:', name_='Transforms', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('URI', node)
        if value is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            self.URI = value
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transforms':
            obj_ = TransformsType.factory()
            obj_.build(child_)
            self.Transforms = obj_
            obj_.original_tagname_ = 'Transforms'
# end class RetrievalMethodType


class X509DataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, X509IssuerSerial=None, X509SKI=None, X509SubjectName=None, X509Certificate=None, X509CRL=None, anytypeobjs_=None):
        self.original_tagname_ = None
        if X509IssuerSerial is None:
            self.X509IssuerSerial = []
        else:
            self.X509IssuerSerial = X509IssuerSerial
        if X509SKI is None:
            self.X509SKI = []
        else:
            self.X509SKI = X509SKI
        if X509SubjectName is None:
            self.X509SubjectName = []
        else:
            self.X509SubjectName = X509SubjectName
        if X509Certificate is None:
            self.X509Certificate = []
        else:
            self.X509Certificate = X509Certificate
        if X509CRL is None:
            self.X509CRL = []
        else:
            self.X509CRL = X509CRL
        self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, X509DataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if X509DataType.subclass:
            return X509DataType.subclass(*args_, **kwargs_)
        else:
            return X509DataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_X509IssuerSerial(self): return self.X509IssuerSerial
    def set_X509IssuerSerial(self, X509IssuerSerial): self.X509IssuerSerial = X509IssuerSerial
    def add_X509IssuerSerial(self, value): self.X509IssuerSerial.append(value)
    def insert_X509IssuerSerial_at(self, index, value): self.X509IssuerSerial.insert(index, value)
    def replace_X509IssuerSerial_at(self, index, value): self.X509IssuerSerial[index] = value
    def get_X509SKI(self): return self.X509SKI
    def set_X509SKI(self, X509SKI): self.X509SKI = X509SKI
    def add_X509SKI(self, value): self.X509SKI.append(value)
    def insert_X509SKI_at(self, index, value): self.X509SKI.insert(index, value)
    def replace_X509SKI_at(self, index, value): self.X509SKI[index] = value
    def get_X509SubjectName(self): return self.X509SubjectName
    def set_X509SubjectName(self, X509SubjectName): self.X509SubjectName = X509SubjectName
    def add_X509SubjectName(self, value): self.X509SubjectName.append(value)
    def insert_X509SubjectName_at(self, index, value): self.X509SubjectName.insert(index, value)
    def replace_X509SubjectName_at(self, index, value): self.X509SubjectName[index] = value
    def get_X509Certificate(self): return self.X509Certificate
    def set_X509Certificate(self, X509Certificate): self.X509Certificate = X509Certificate
    def add_X509Certificate(self, value): self.X509Certificate.append(value)
    def insert_X509Certificate_at(self, index, value): self.X509Certificate.insert(index, value)
    def replace_X509Certificate_at(self, index, value): self.X509Certificate[index] = value
    def get_X509CRL(self): return self.X509CRL
    def set_X509CRL(self, X509CRL): self.X509CRL = X509CRL
    def add_X509CRL(self, value): self.X509CRL.append(value)
    def insert_X509CRL_at(self, index, value): self.X509CRL.insert(index, value)
    def replace_X509CRL_at(self, index, value): self.X509CRL[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def hasContent_(self):
        if (
            self.X509IssuerSerial or
            self.X509SKI or
            self.X509SubjectName or
            self.X509Certificate or
            self.X509CRL or
            self.anytypeobjs_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='X509DataType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('X509DataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='X509DataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='X509DataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='X509DataType'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='X509DataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for X509IssuerSerial_ in self.X509IssuerSerial:
            X509IssuerSerial_.export(outfile, level, namespace_, name_='X509IssuerSerial', pretty_print=pretty_print)
        for X509SKI_ in self.X509SKI:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:X509SKI>%s</iodef:X509SKI>%s' % (self.gds_encode(self.gds_format_string(quote_xml(X509SKI_), input_name='X509SKI')), eol_))
        for X509SubjectName_ in self.X509SubjectName:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:X509SubjectName>%s</iodef:X509SubjectName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(X509SubjectName_), input_name='X509SubjectName')), eol_))
        for X509Certificate_ in self.X509Certificate:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:X509Certificate>%s</iodef:X509Certificate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(X509Certificate_), input_name='X509Certificate')), eol_))
        for X509CRL_ in self.X509CRL:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:X509CRL>%s</iodef:X509CRL>%s' % (self.gds_encode(self.gds_format_string(quote_xml(X509CRL_), input_name='X509CRL')), eol_))
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'X509IssuerSerial':
            obj_ = X509IssuerSerialType.factory()
            obj_.build(child_)
            self.X509IssuerSerial.append(obj_)
            obj_.original_tagname_ = 'X509IssuerSerial'
        elif nodeName_ == 'X509SKI':
            X509SKI_ = child_.text
            X509SKI_ = self.gds_validate_string(X509SKI_, node, 'X509SKI')
            self.X509SKI.append(X509SKI_)
        elif nodeName_ == 'X509SubjectName':
            X509SubjectName_ = child_.text
            X509SubjectName_ = self.gds_validate_string(X509SubjectName_, node, 'X509SubjectName')
            self.X509SubjectName.append(X509SubjectName_)
        elif nodeName_ == 'X509Certificate':
            X509Certificate_ = child_.text
            X509Certificate_ = self.gds_validate_string(X509Certificate_, node, 'X509Certificate')
            self.X509Certificate.append(X509Certificate_)
        elif nodeName_ == 'X509CRL':
            X509CRL_ = child_.text
            X509CRL_ = self.gds_validate_string(X509CRL_, node, 'X509CRL')
            self.X509CRL.append(X509CRL_)
        else:
            obj_ = self.gds_build_any(child_, 'X509DataType')
            if obj_ is not None:
                self.set_anytypeobjs_(obj_)
# end class X509DataType


class X509IssuerSerialType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, X509IssuerName=None, X509SerialNumber=None):
        self.original_tagname_ = None
        self.X509IssuerName = X509IssuerName
        self.X509SerialNumber = X509SerialNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, X509IssuerSerialType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if X509IssuerSerialType.subclass:
            return X509IssuerSerialType.subclass(*args_, **kwargs_)
        else:
            return X509IssuerSerialType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_X509IssuerName(self): return self.X509IssuerName
    def set_X509IssuerName(self, X509IssuerName): self.X509IssuerName = X509IssuerName
    def get_X509SerialNumber(self): return self.X509SerialNumber
    def set_X509SerialNumber(self, X509SerialNumber): self.X509SerialNumber = X509SerialNumber
    def hasContent_(self):
        if (
            self.X509IssuerName is not None or
            self.X509SerialNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='X509IssuerSerialType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('X509IssuerSerialType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='X509IssuerSerialType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='X509IssuerSerialType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='X509IssuerSerialType'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='X509IssuerSerialType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.X509IssuerName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:X509IssuerName>%s</iodef:X509IssuerName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.X509IssuerName), input_name='X509IssuerName')), eol_))
        if self.X509SerialNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:X509SerialNumber>%s</iodef:X509SerialNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.X509SerialNumber), input_name='X509SerialNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'X509IssuerName':
            X509IssuerName_ = child_.text
            X509IssuerName_ = self.gds_validate_string(X509IssuerName_, node, 'X509IssuerName')
            self.X509IssuerName = X509IssuerName_
        elif nodeName_ == 'X509SerialNumber':
            X509SerialNumber_ = child_.text
            X509SerialNumber_ = self.gds_validate_string(X509SerialNumber_, node, 'X509SerialNumber')
            self.X509SerialNumber = X509SerialNumber_
# end class X509IssuerSerialType


class PGPDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PGPKeyID=None, PGPKeyPacket=None, anytypeobjs_=None):
        self.original_tagname_ = None
        self.PGPKeyID = PGPKeyID
        self.PGPKeyPacket = PGPKeyPacket
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PGPDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PGPDataType.subclass:
            return PGPDataType.subclass(*args_, **kwargs_)
        else:
            return PGPDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PGPKeyID(self): return self.PGPKeyID
    def set_PGPKeyID(self, PGPKeyID): self.PGPKeyID = PGPKeyID
    def get_PGPKeyPacket(self): return self.PGPKeyPacket
    def set_PGPKeyPacket(self, PGPKeyPacket): self.PGPKeyPacket = PGPKeyPacket
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.PGPKeyID is not None or
            self.PGPKeyPacket is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='PGPDataType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PGPDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PGPDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='PGPDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='PGPDataType'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='PGPDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PGPKeyID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:PGPKeyID>%s</iodef:PGPKeyID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PGPKeyID), input_name='PGPKeyID')), eol_))
        if self.PGPKeyPacket is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:PGPKeyPacket>%s</iodef:PGPKeyPacket>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PGPKeyPacket), input_name='PGPKeyPacket')), eol_))
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PGPKeyID':
            PGPKeyID_ = child_.text
            PGPKeyID_ = self.gds_validate_string(PGPKeyID_, node, 'PGPKeyID')
            self.PGPKeyID = PGPKeyID_
        elif nodeName_ == 'PGPKeyPacket':
            PGPKeyPacket_ = child_.text
            PGPKeyPacket_ = self.gds_validate_string(PGPKeyPacket_, node, 'PGPKeyPacket')
            self.PGPKeyPacket = PGPKeyPacket_
        else:
            obj_ = self.gds_build_any(child_, 'PGPDataType')
            if obj_ is not None:
                self.add_anytypeobjs_(obj_)
# end class PGPDataType


class SPKIDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SPKISexp=None, anytypeobjs_=None):
        self.original_tagname_ = None
        if SPKISexp is None:
            self.SPKISexp = []
        else:
            self.SPKISexp = SPKISexp
        self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SPKIDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SPKIDataType.subclass:
            return SPKIDataType.subclass(*args_, **kwargs_)
        else:
            return SPKIDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SPKISexp(self): return self.SPKISexp
    def set_SPKISexp(self, SPKISexp): self.SPKISexp = SPKISexp
    def add_SPKISexp(self, value): self.SPKISexp.append(value)
    def insert_SPKISexp_at(self, index, value): self.SPKISexp.insert(index, value)
    def replace_SPKISexp_at(self, index, value): self.SPKISexp[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def hasContent_(self):
        if (
            self.SPKISexp or
            self.anytypeobjs_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='SPKIDataType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SPKIDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SPKIDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='SPKIDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='SPKIDataType'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='SPKIDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SPKISexp_ in self.SPKISexp:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:SPKISexp>%s</iodef:SPKISexp>%s' % (self.gds_encode(self.gds_format_string(quote_xml(SPKISexp_), input_name='SPKISexp')), eol_))
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SPKISexp':
            SPKISexp_ = child_.text
            SPKISexp_ = self.gds_validate_string(SPKISexp_, node, 'SPKISexp')
            self.SPKISexp.append(SPKISexp_)
        else:
            obj_ = self.gds_build_any(child_, 'SPKIDataType')
            if obj_ is not None:
                self.set_anytypeobjs_(obj_)
# end class SPKIDataType


class ObjectType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, MimeType=None, Encoding=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.MimeType = _cast(None, MimeType)
        self.Encoding = _cast(None, Encoding)
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ObjectType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ObjectType.subclass:
            return ObjectType.subclass(*args_, **kwargs_)
        else:
            return ObjectType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_MimeType(self): return self.MimeType
    def set_MimeType(self, MimeType): self.MimeType = MimeType
    def get_Encoding(self): return self.Encoding
    def set_Encoding(self, Encoding): self.Encoding = Encoding
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ is not None or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='ObjectType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ObjectType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ObjectType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='ObjectType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='ObjectType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
        if self.MimeType is not None and 'MimeType' not in already_processed:
            already_processed.add('MimeType')
            outfile.write(' MimeType=%s' % (quote_attrib(self.MimeType), ))
        if self.Encoding is not None and 'Encoding' not in already_processed:
            already_processed.add('Encoding')
            outfile.write(' Encoding=%s' % (quote_attrib(self.Encoding), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='ObjectType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
        value = find_attr_value_('MimeType', node)
        if value is not None and 'MimeType' not in already_processed:
            already_processed.add('MimeType')
            self.MimeType = value
        value = find_attr_value_('Encoding', node)
        if value is not None and 'Encoding' not in already_processed:
            already_processed.add('Encoding')
            self.Encoding = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class ObjectType


class ManifestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, Reference=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ManifestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ManifestType.subclass:
            return ManifestType.subclass(*args_, **kwargs_)
        else:
            return ManifestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.Reference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='ManifestType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ManifestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ManifestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='ManifestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='ManifestType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='ManifestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_='ds:', name_='Reference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Reference':
            obj_ = Reference.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
# end class ManifestType


class SignaturePropertiesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, SignatureProperty=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        if SignatureProperty is None:
            self.SignatureProperty = []
        else:
            self.SignatureProperty = SignatureProperty
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignaturePropertiesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignaturePropertiesType.subclass:
            return SignaturePropertiesType.subclass(*args_, **kwargs_)
        else:
            return SignaturePropertiesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SignatureProperty(self): return self.SignatureProperty
    def set_SignatureProperty(self, SignatureProperty): self.SignatureProperty = SignatureProperty
    def add_SignatureProperty(self, value): self.SignatureProperty.append(value)
    def insert_SignatureProperty_at(self, index, value): self.SignatureProperty.insert(index, value)
    def replace_SignatureProperty_at(self, index, value): self.SignatureProperty[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.SignatureProperty
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='SignaturePropertiesType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignaturePropertiesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignaturePropertiesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='SignaturePropertiesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='SignaturePropertiesType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='SignaturePropertiesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SignatureProperty_ in self.SignatureProperty:
            SignatureProperty_.export(outfile, level, namespace_='ds:', name_='SignatureProperty', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SignatureProperty':
            obj_ = SignaturePropertyType.factory()
            obj_.build(child_)
            self.SignatureProperty.append(obj_)
            obj_.original_tagname_ = 'SignatureProperty'
# end class SignaturePropertiesType


class SignaturePropertyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Target=None, Id=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Target = _cast(None, Target)
        self.Id = _cast(None, Id)
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignaturePropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignaturePropertyType.subclass:
            return SignaturePropertyType.subclass(*args_, **kwargs_)
        else:
            return SignaturePropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Target(self): return self.Target
    def set_Target(self, Target): self.Target = Target
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ is not None or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='SignaturePropertyType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignaturePropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignaturePropertyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='SignaturePropertyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='SignaturePropertyType'):
        if self.Target is not None and 'Target' not in already_processed:
            already_processed.add('Target')
            outfile.write(' Target=%s' % (quote_attrib(self.Target), ))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='SignaturePropertyType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Target', node)
        if value is not None and 'Target' not in already_processed:
            already_processed.add('Target')
            self.Target = value
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class SignaturePropertyType


class DSAKeyValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, P=None, Q=None, G=None, Y=None, J=None, Seed=None, PgenCounter=None):
        self.original_tagname_ = None
        self.P = P
        self.validate_CryptoBinary(self.P)
        self.Q = Q
        self.validate_CryptoBinary(self.Q)
        self.G = G
        self.validate_CryptoBinary(self.G)
        self.Y = Y
        self.validate_CryptoBinary(self.Y)
        self.J = J
        self.validate_CryptoBinary(self.J)
        self.Seed = Seed
        self.validate_CryptoBinary(self.Seed)
        self.PgenCounter = PgenCounter
        self.validate_CryptoBinary(self.PgenCounter)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DSAKeyValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DSAKeyValueType.subclass:
            return DSAKeyValueType.subclass(*args_, **kwargs_)
        else:
            return DSAKeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_P(self): return self.P
    def set_P(self, P): self.P = P
    def get_Q(self): return self.Q
    def set_Q(self, Q): self.Q = Q
    def get_G(self): return self.G
    def set_G(self, G): self.G = G
    def get_Y(self): return self.Y
    def set_Y(self, Y): self.Y = Y
    def get_J(self): return self.J
    def set_J(self, J): self.J = J
    def get_Seed(self): return self.Seed
    def set_Seed(self, Seed): self.Seed = Seed
    def get_PgenCounter(self): return self.PgenCounter
    def set_PgenCounter(self, PgenCounter): self.PgenCounter = PgenCounter
    def validate_CryptoBinary(self, value):
        # Validate type CryptoBinary, a restriction on base64Binary.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.P is not None or
            self.Q is not None or
            self.G is not None or
            self.Y is not None or
            self.J is not None or
            self.Seed is not None or
            self.PgenCounter is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='DSAKeyValueType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DSAKeyValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DSAKeyValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='DSAKeyValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='DSAKeyValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='DSAKeyValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.P is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:P>%s</iodef:P>%s' % (self.gds_format_base64(self.P, input_name='P'), eol_))
        if self.Q is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:Q>%s</iodef:Q>%s' % (self.gds_format_base64(self.Q, input_name='Q'), eol_))
        if self.G is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:G>%s</iodef:G>%s' % (self.gds_format_base64(self.G, input_name='G'), eol_))
        if self.Y is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:Y>%s</iodef:Y>%s' % (self.gds_format_base64(self.Y, input_name='Y'), eol_))
        if self.J is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:J>%s</iodef:J>%s' % (self.gds_format_base64(self.J, input_name='J'), eol_))
        if self.Seed is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:Seed>%s</iodef:Seed>%s' % (self.gds_format_base64(self.Seed, input_name='Seed'), eol_))
        if self.PgenCounter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:PgenCounter>%s</iodef:PgenCounter>%s' % (self.gds_format_base64(self.PgenCounter, input_name='PgenCounter'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'P':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'P')
            else:
                bval_ = None
            self.P = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.P)
        elif nodeName_ == 'Q':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Q')
            else:
                bval_ = None
            self.Q = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Q)
        elif nodeName_ == 'G':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'G')
            else:
                bval_ = None
            self.G = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.G)
        elif nodeName_ == 'Y':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Y')
            else:
                bval_ = None
            self.Y = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Y)
        elif nodeName_ == 'J':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'J')
            else:
                bval_ = None
            self.J = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.J)
        elif nodeName_ == 'Seed':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Seed')
            else:
                bval_ = None
            self.Seed = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Seed)
        elif nodeName_ == 'PgenCounter':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'PgenCounter')
            else:
                bval_ = None
            self.PgenCounter = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.PgenCounter)
# end class DSAKeyValueType


class RSAKeyValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Modulus=None, Exponent=None):
        self.original_tagname_ = None
        self.Modulus = Modulus
        self.validate_CryptoBinary(self.Modulus)
        self.Exponent = Exponent
        self.validate_CryptoBinary(self.Exponent)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RSAKeyValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RSAKeyValueType.subclass:
            return RSAKeyValueType.subclass(*args_, **kwargs_)
        else:
            return RSAKeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Modulus(self): return self.Modulus
    def set_Modulus(self, Modulus): self.Modulus = Modulus
    def get_Exponent(self): return self.Exponent
    def set_Exponent(self, Exponent): self.Exponent = Exponent
    def validate_CryptoBinary(self, value):
        # Validate type CryptoBinary, a restriction on base64Binary.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.Modulus is not None or
            self.Exponent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='RSAKeyValueType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RSAKeyValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RSAKeyValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='RSAKeyValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='RSAKeyValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='RSAKeyValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Modulus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:Modulus>%s</iodef:Modulus>%s' % (self.gds_format_base64(self.Modulus, input_name='Modulus'), eol_))
        if self.Exponent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:Exponent>%s</iodef:Exponent>%s' % (self.gds_format_base64(self.Exponent, input_name='Exponent'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Modulus':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Modulus')
            else:
                bval_ = None
            self.Modulus = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Modulus)
        elif nodeName_ == 'Exponent':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Exponent')
            else:
                bval_ = None
            self.Exponent = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Exponent)
# end class RSAKeyValueType


class ReferenceName(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, specIndex=None, ID=None):
        self.original_tagname_ = None
        self.specIndex = _cast(int, specIndex)
        self.ID = ID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceName)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceName.subclass:
            return ReferenceName.subclass(*args_, **kwargs_)
        else:
            return ReferenceName(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def get_specIndex(self): return self.specIndex
    def set_specIndex(self, specIndex): self.specIndex = specIndex
    def hasContent_(self):
        if (
            self.ID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='ReferenceName', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReferenceName')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceName')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='ReferenceName', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='ReferenceName'):
        if self.specIndex is not None and 'specIndex' not in already_processed:
            already_processed.add('specIndex')
            outfile.write(' specIndex="%s"' % self.gds_format_integer(self.specIndex, input_name='specIndex'))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='ReferenceName', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ID is not None:
            self.ID.export(outfile, level, namespace_, name_='ID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('specIndex', node)
        if value is not None and 'specIndex' not in already_processed:
            already_processed.add('specIndex')
            try:
                self.specIndex = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ID':
            obj_ = xs_NCName.factory()
            obj_.build(child_)
            self.ID = obj_
            obj_.original_tagname_ = 'ID'
# end class ReferenceName


class XMLDATA(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dtype=None, ext_dtype=None, meaning=None, formatid=None, restriction=None, anytypeobjs_=None):
        self.original_tagname_ = None
        self.dtype = _cast(None, dtype)
        self.ext_dtype = _cast(None, ext_dtype)
        self.meaning = _cast(None, meaning)
        self.formatid = _cast(None, formatid)
        self.restriction = _cast(None, restriction)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, XMLDATA)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if XMLDATA.subclass:
            return XMLDATA.subclass(*args_, **kwargs_)
        else:
            return XMLDATA(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_dtype(self): return self.dtype
    def set_dtype(self, dtype): self.dtype = dtype
    def get_ext_dtype(self): return self.ext_dtype
    def set_ext_dtype(self, ext_dtype): self.ext_dtype = ext_dtype
    def get_meaning(self): return self.meaning
    def set_meaning(self, meaning): self.meaning = meaning
    def get_formatid(self): return self.formatid
    def set_formatid(self, formatid): self.formatid = formatid
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def hasContent_(self):
        if (
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='XMLDATA', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('XMLDATA')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='XMLDATA')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='XMLDATA', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='XMLDATA'):
        if self.dtype is not None and 'dtype' not in already_processed:
            already_processed.add('dtype')
            outfile.write(' dtype=%s' % (quote_attrib(self.dtype), ))
        if self.ext_dtype is not None and 'ext_dtype' not in already_processed:
            already_processed.add('ext_dtype')
            outfile.write(' ext-dtype=%s' % (quote_attrib(self.ext_dtype), ))
        if self.meaning is not None and 'meaning' not in already_processed:
            already_processed.add('meaning')
            outfile.write(' meaning=%s' % (quote_attrib(self.meaning), ))
        if self.formatid is not None and 'formatid' not in already_processed:
            already_processed.add('formatid')
            outfile.write(' formatid=%s' % (quote_attrib(self.formatid), ))
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='XMLDATA', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dtype', node)
        if value is not None and 'dtype' not in already_processed:
            already_processed.add('dtype')
            self.dtype = value
        value = find_attr_value_('ext-dtype', node)
        if value is not None and 'ext-dtype' not in already_processed:
            already_processed.add('ext-dtype')
            self.ext_dtype = value
        value = find_attr_value_('meaning', node)
        if value is not None and 'meaning' not in already_processed:
            already_processed.add('meaning')
            self.meaning = value
        value = find_attr_value_('formatid', node)
        if value is not None and 'formatid' not in already_processed:
            already_processed.add('formatid')
            self.formatid = value
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        obj_ = self.gds_build_any(child_, 'XMLDATA')
        if obj_ is not None:
            self.add_anytypeobjs_(obj_)
# end class XMLDATA


class BasicStructure(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SpecID=None, ext_SpecID=None, ContentID=None, RawData=None, Reference=None, extensiontype_=None):
        self.original_tagname_ = None
        self.SpecID = _cast(None, SpecID)
        self.ext_SpecID = _cast(None, ext_SpecID)
        self.ContentID = _cast(None, ContentID)
        if RawData is None:
            self.RawData = []
        else:
            self.RawData = RawData
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BasicStructure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BasicStructure.subclass:
            return BasicStructure.subclass(*args_, **kwargs_)
        else:
            return BasicStructure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RawData(self): return self.RawData
    def set_RawData(self, RawData): self.RawData = RawData
    def add_RawData(self, value): self.RawData.append(value)
    def insert_RawData_at(self, index, value): self.RawData.insert(index, value)
    def replace_RawData_at(self, index, value): self.RawData[index] = value
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_SpecID(self): return self.SpecID
    def set_SpecID(self, SpecID): self.SpecID = SpecID
    def get_ext_SpecID(self): return self.ext_SpecID
    def set_ext_SpecID(self, ext_SpecID): self.ext_SpecID = ext_SpecID
    def get_ContentID(self): return self.ContentID
    def set_ContentID(self, ContentID): self.ContentID = ContentID
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.RawData or
            self.Reference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='BasicStructure', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:sci="urn:ietf:params:xml:ns:iodef-sci-1.0" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BasicStructure')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BasicStructure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='BasicStructure', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='BasicStructure'):
        if self.SpecID is not None and 'SpecID' not in already_processed:
            already_processed.add('SpecID')
            outfile.write(' SpecID=%s' % (quote_attrib(self.SpecID), ))
        if self.ext_SpecID is not None and 'ext_SpecID' not in already_processed:
            already_processed.add('ext_SpecID')
            outfile.write(' ext-SpecID=%s' % (quote_attrib(self.ext_SpecID), ))
        if self.ContentID is not None and 'ContentID' not in already_processed:
            already_processed.add('ContentID')
            outfile.write(' ContentID=%s' % (quote_attrib(self.ContentID), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='BasicStructure', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RawData_ in self.RawData:
            RawData_.export(outfile, level, namespace_, name_='RawData', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_='iodef:', name_='Reference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('SpecID', node)
        if value is not None and 'SpecID' not in already_processed:
            already_processed.add('SpecID')
            self.SpecID = value
        value = find_attr_value_('ext-SpecID', node)
        if value is not None and 'ext-SpecID' not in already_processed:
            already_processed.add('ext-SpecID')
            self.ext_SpecID = value
        value = find_attr_value_('ContentID', node)
        if value is not None and 'ContentID' not in already_processed:
            already_processed.add('ContentID')
            self.ContentID = value
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RawData':
            obj_ = XMLDATA.factory()
            obj_.build(child_)
            self.RawData.append(obj_)
            obj_.original_tagname_ = 'RawData'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
# end class BasicStructure


class AttackPattern(BasicStructure):
    subclass = None
    superclass = BasicStructure
    def __init__(self, SpecID=None, ext_SpecID=None, ContentID=None, RawData=None, Reference=None, Platform=None):
        self.original_tagname_ = None
        super(AttackPattern, self).__init__(SpecID, ext_SpecID, ContentID, RawData, Reference, )
        if Platform is None:
            self.Platform = []
        else:
            self.Platform = Platform
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AttackPattern)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AttackPattern.subclass:
            return AttackPattern.subclass(*args_, **kwargs_)
        else:
            return AttackPattern(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Platform(self): return self.Platform
    def set_Platform(self, Platform): self.Platform = Platform
    def add_Platform(self, value): self.Platform.append(value)
    def insert_Platform_at(self, index, value): self.Platform.insert(index, value)
    def replace_Platform_at(self, index, value): self.Platform[index] = value
    def hasContent_(self):
        if (
            self.Platform or
            super(AttackPattern, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='AttackPattern', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:sci="urn:ietf:params:xml:ns:iodef-sci-1.0" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AttackPattern')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AttackPattern')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='AttackPattern', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='AttackPattern'):
        super(AttackPattern, self).exportAttributes(outfile, level, already_processed, namespace_, name_='AttackPattern')
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='AttackPattern', fromsubclass_=False, pretty_print=True):
        super(AttackPattern, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Platform_ in self.Platform:
            Platform_.export(outfile, level, namespace_='sci:', name_='Platform', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(AttackPattern, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Platform':
            class_obj_ = self.get_class_obj_(child_, BasicStructure)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Platform.append(obj_)
            obj_.original_tagname_ = 'Platform'
        super(AttackPattern, self).buildChildren(child_, node, nodeName_, True)
# end class AttackPattern


class Vulnerability(BasicStructure):
    subclass = None
    superclass = BasicStructure
    def __init__(self, SpecID=None, ext_SpecID=None, ContentID=None, RawData=None, Reference=None, Platform=None, Scoring=None):
        self.original_tagname_ = None
        super(Vulnerability, self).__init__(SpecID, ext_SpecID, ContentID, RawData, Reference, )
        if Platform is None:
            self.Platform = []
        else:
            self.Platform = Platform
        if Scoring is None:
            self.Scoring = []
        else:
            self.Scoring = Scoring
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Vulnerability)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Vulnerability.subclass:
            return Vulnerability.subclass(*args_, **kwargs_)
        else:
            return Vulnerability(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Platform(self): return self.Platform
    def set_Platform(self, Platform): self.Platform = Platform
    def add_Platform(self, value): self.Platform.append(value)
    def insert_Platform_at(self, index, value): self.Platform.insert(index, value)
    def replace_Platform_at(self, index, value): self.Platform[index] = value
    def get_Scoring(self): return self.Scoring
    def set_Scoring(self, Scoring): self.Scoring = Scoring
    def add_Scoring(self, value): self.Scoring.append(value)
    def insert_Scoring_at(self, index, value): self.Scoring.insert(index, value)
    def replace_Scoring_at(self, index, value): self.Scoring[index] = value
    def hasContent_(self):
        if (
            self.Platform or
            self.Scoring or
            super(Vulnerability, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Vulnerability', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:sci="urn:ietf:params:xml:ns:iodef-sci-1.0" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Vulnerability')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Vulnerability')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Vulnerability', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Vulnerability'):
        super(Vulnerability, self).exportAttributes(outfile, level, already_processed, namespace_, name_='Vulnerability')
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Vulnerability', fromsubclass_=False, pretty_print=True):
        super(Vulnerability, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Platform_ in self.Platform:
            Platform_.export(outfile, level, namespace_='sci:', name_='Platform', pretty_print=pretty_print)
        for Scoring_ in self.Scoring:
            Scoring_.export(outfile, level, namespace_='sci:', name_='Scoring', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(Vulnerability, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Platform':
            class_obj_ = self.get_class_obj_(child_, BasicStructure)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Platform.append(obj_)
            obj_.original_tagname_ = 'Platform'
        elif nodeName_ == 'Scoring':
            class_obj_ = self.get_class_obj_(child_, BasicStructure)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Scoring.append(obj_)
            obj_.original_tagname_ = 'Scoring'
        super(Vulnerability, self).buildChildren(child_, node, nodeName_, True)
# end class Vulnerability


class Weakness(BasicStructure):
    subclass = None
    superclass = BasicStructure
    def __init__(self, SpecID=None, ext_SpecID=None, ContentID=None, RawData=None, Reference=None, Platform=None, Scoring=None):
        self.original_tagname_ = None
        super(Weakness, self).__init__(SpecID, ext_SpecID, ContentID, RawData, Reference, )
        if Platform is None:
            self.Platform = []
        else:
            self.Platform = Platform
        if Scoring is None:
            self.Scoring = []
        else:
            self.Scoring = Scoring
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Weakness)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Weakness.subclass:
            return Weakness.subclass(*args_, **kwargs_)
        else:
            return Weakness(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Platform(self): return self.Platform
    def set_Platform(self, Platform): self.Platform = Platform
    def add_Platform(self, value): self.Platform.append(value)
    def insert_Platform_at(self, index, value): self.Platform.insert(index, value)
    def replace_Platform_at(self, index, value): self.Platform[index] = value
    def get_Scoring(self): return self.Scoring
    def set_Scoring(self, Scoring): self.Scoring = Scoring
    def add_Scoring(self, value): self.Scoring.append(value)
    def insert_Scoring_at(self, index, value): self.Scoring.insert(index, value)
    def replace_Scoring_at(self, index, value): self.Scoring[index] = value
    def hasContent_(self):
        if (
            self.Platform or
            self.Scoring or
            super(Weakness, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Weakness', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0" xmlns:sci="urn:ietf:params:xml:ns:iodef-sci-1.0" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Weakness')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Weakness')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Weakness', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Weakness'):
        super(Weakness, self).exportAttributes(outfile, level, already_processed, namespace_, name_='Weakness')
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Weakness', fromsubclass_=False, pretty_print=True):
        super(Weakness, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Platform_ in self.Platform:
            Platform_.export(outfile, level, namespace_='sci:', name_='Platform', pretty_print=pretty_print)
        for Scoring_ in self.Scoring:
            Scoring_.export(outfile, level, namespace_='sci:', name_='Scoring', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(Weakness, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Platform':
            class_obj_ = self.get_class_obj_(child_, BasicStructure)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Platform.append(obj_)
            obj_.original_tagname_ = 'Platform'
        elif nodeName_ == 'Scoring':
            class_obj_ = self.get_class_obj_(child_, BasicStructure)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Scoring.append(obj_)
            obj_.original_tagname_ = 'Scoring'
        super(Weakness, self).buildChildren(child_, node, nodeName_, True)
# end class Weakness


class IODEF_Document(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, version=None, lang=None, formatid=None, Incident=None):
        self.original_tagname_ = None
        self.version = _cast(None, version)
        self.lang = _cast(None, lang)
        self.formatid = _cast(None, formatid)
        if Incident is None:
            self.Incident = []
        else:
            self.Incident = Incident
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IODEF_Document)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IODEF_Document.subclass:
            return IODEF_Document.subclass(*args_, **kwargs_)
        else:
            return IODEF_Document(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Incident(self): return self.Incident
    def set_Incident(self, Incident): self.Incident = Incident
    def add_Incident(self, value): self.Incident.append(value)
    def insert_Incident_at(self, index, value): self.Incident.insert(index, value)
    def replace_Incident_at(self, index, value): self.Incident[index] = value
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_formatid(self): return self.formatid
    def set_formatid(self, formatid): self.formatid = formatid
    def hasContent_(self):
        if (
            self.Incident
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='IODEF-Document', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IODEF-Document')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IODEF-Document')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='IODEF-Document', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='IODEF-Document'):
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.version), input_name='version')), ))
        if self.lang is not None and 'lang' not in already_processed:
            already_processed.add('lang')
            outfile.write(' lang=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.lang), input_name='lang')), ))
        if self.formatid is not None and 'formatid' not in already_processed:
            already_processed.add('formatid')
            outfile.write(' formatid=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.formatid), input_name='formatid')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='IODEF-Document', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Incident_ in self.Incident:
            Incident_.export(outfile, level, namespace_='iodef:', name_='Incident', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = value
        value = find_attr_value_('lang', node)
        if value is not None and 'lang' not in already_processed:
            already_processed.add('lang')
            self.lang = value
        value = find_attr_value_('formatid', node)
        if value is not None and 'formatid' not in already_processed:
            already_processed.add('formatid')
            self.formatid = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Incident':
            obj_ = Incident.factory()
            obj_.build(child_)
            self.Incident.append(obj_)
            obj_.original_tagname_ = 'Incident'
# end class IODEF_Document


class Incident(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, purpose=None, ext_purpose=None, lang=None, restriction='private', IncidentID=None, AlternativeID=None, RelatedActivity=None, DetectTime=None, StartTime=None, EndTime=None, ReportTime=None, Description=None, Assessment=None, Method=None, Contact=None, EventData=None, History=None, AdditionalData=None):
        self.original_tagname_ = None
        self.purpose = _cast(None, purpose)
        self.ext_purpose = _cast(None, ext_purpose)
        self.lang = _cast(None, lang)
        self.restriction = _cast(None, restriction)
        self.IncidentID = IncidentID
        self.AlternativeID = AlternativeID
        self.RelatedActivity = RelatedActivity
        if isinstance(DetectTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DetectTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = DetectTime
        self.DetectTime = initvalue_
        if isinstance(StartTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(StartTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = StartTime
        self.StartTime = initvalue_
        if isinstance(EndTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EndTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = EndTime
        self.EndTime = initvalue_
        if isinstance(ReportTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ReportTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ReportTime
        self.ReportTime = initvalue_
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
        if Assessment is None:
            self.Assessment = []
        else:
            self.Assessment = Assessment
        if Method is None:
            self.Method = []
        else:
            self.Method = Method
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        if EventData is None:
            self.EventData = []
        else:
            self.EventData = EventData
        self.History = History
        if AdditionalData is None:
            self.AdditionalData = []
        else:
            self.AdditionalData = AdditionalData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Incident)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Incident.subclass:
            return Incident.subclass(*args_, **kwargs_)
        else:
            return Incident(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IncidentID(self): return self.IncidentID
    def set_IncidentID(self, IncidentID): self.IncidentID = IncidentID
    def get_AlternativeID(self): return self.AlternativeID
    def set_AlternativeID(self, AlternativeID): self.AlternativeID = AlternativeID
    def get_RelatedActivity(self): return self.RelatedActivity
    def set_RelatedActivity(self, RelatedActivity): self.RelatedActivity = RelatedActivity
    def get_DetectTime(self): return self.DetectTime
    def set_DetectTime(self, DetectTime): self.DetectTime = DetectTime
    def get_StartTime(self): return self.StartTime
    def set_StartTime(self, StartTime): self.StartTime = StartTime
    def get_EndTime(self): return self.EndTime
    def set_EndTime(self, EndTime): self.EndTime = EndTime
    def get_ReportTime(self): return self.ReportTime
    def set_ReportTime(self, ReportTime): self.ReportTime = ReportTime
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def get_Assessment(self): return self.Assessment
    def set_Assessment(self, Assessment): self.Assessment = Assessment
    def add_Assessment(self, value): self.Assessment.append(value)
    def insert_Assessment_at(self, index, value): self.Assessment.insert(index, value)
    def replace_Assessment_at(self, index, value): self.Assessment[index] = value
    def get_Method(self): return self.Method
    def set_Method(self, Method): self.Method = Method
    def add_Method(self, value): self.Method.append(value)
    def insert_Method_at(self, index, value): self.Method.insert(index, value)
    def replace_Method_at(self, index, value): self.Method[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_EventData(self): return self.EventData
    def set_EventData(self, EventData): self.EventData = EventData
    def add_EventData(self, value): self.EventData.append(value)
    def insert_EventData_at(self, index, value): self.EventData.insert(index, value)
    def replace_EventData_at(self, index, value): self.EventData[index] = value
    def get_History(self): return self.History
    def set_History(self, History): self.History = History
    def get_AdditionalData(self): return self.AdditionalData
    def set_AdditionalData(self, AdditionalData): self.AdditionalData = AdditionalData
    def add_AdditionalData(self, value): self.AdditionalData.append(value)
    def insert_AdditionalData_at(self, index, value): self.AdditionalData.insert(index, value)
    def replace_AdditionalData_at(self, index, value): self.AdditionalData[index] = value
    def get_purpose(self): return self.purpose
    def set_purpose(self, purpose): self.purpose = purpose
    def get_ext_purpose(self): return self.ext_purpose
    def set_ext_purpose(self, ext_purpose): self.ext_purpose = ext_purpose
    def get_lang(self): return self.lang
    def set_lang(self, lang): self.lang = lang
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def hasContent_(self):
        if (
            self.IncidentID is not None or
            self.AlternativeID is not None or
            self.RelatedActivity is not None or
            self.DetectTime is not None or
            self.StartTime is not None or
            self.EndTime is not None or
            self.ReportTime is not None or
            self.Description or
            self.Assessment or
            self.Method or
            self.Contact or
            self.EventData or
            self.History is not None or
            self.AdditionalData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Incident', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Incident')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Incident')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Incident', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Incident'):
        if self.purpose is not None and 'purpose' not in already_processed:
            already_processed.add('purpose')
            outfile.write(' purpose=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.purpose), input_name='purpose')), ))
        if self.ext_purpose is not None and 'ext_purpose' not in already_processed:
            already_processed.add('ext_purpose')
            outfile.write(' ext-purpose=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_purpose), input_name='ext-purpose')), ))
        if self.lang is not None and 'lang' not in already_processed:
            already_processed.add('lang')
            outfile.write(' lang=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.lang), input_name='lang')), ))
        if self.restriction != "private" and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Incident', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IncidentID is not None:
            self.IncidentID.export(outfile, level, namespace_='iodef:', name_='IncidentID', pretty_print=pretty_print)
        if self.AlternativeID is not None:
            self.AlternativeID.export(outfile, level, namespace_='iodef:', name_='AlternativeID', pretty_print=pretty_print)
        if self.RelatedActivity is not None:
            self.RelatedActivity.export(outfile, level, namespace_='iodef:', name_='RelatedActivity', pretty_print=pretty_print)
        if self.DetectTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:DetectTime>%s</iodef:DetectTime>%s' % (self.gds_format_datetime(self.DetectTime, input_name='DetectTime'), eol_))
        if self.StartTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:StartTime>%s</iodef:StartTime>%s' % (self.gds_format_datetime(self.StartTime, input_name='StartTime'), eol_))
        if self.EndTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:EndTime>%s</iodef:EndTime>%s' % (self.gds_format_datetime(self.EndTime, input_name='EndTime'), eol_))
        if self.ReportTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:ReportTime>%s</iodef:ReportTime>%s' % (self.gds_format_datetime(self.ReportTime, input_name='ReportTime'), eol_))
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
        for Assessment_ in self.Assessment:
            Assessment_.export(outfile, level, namespace_='iodef:', name_='Assessment', pretty_print=pretty_print)
        for Method_ in self.Method:
            Method_.export(outfile, level, namespace_='iodef:', name_='Method', pretty_print=pretty_print)
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_='iodef:', name_='Contact', pretty_print=pretty_print)
        for EventData_ in self.EventData:
            EventData_.export(outfile, level, namespace_='iodef:', name_='EventData', pretty_print=pretty_print)
        if self.History is not None:
            self.History.export(outfile, level, namespace_='iodef:', name_='History', pretty_print=pretty_print)
        for AdditionalData_ in self.AdditionalData:
            AdditionalData_.export(outfile, level, namespace_='iodef:', name_='AdditionalData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('purpose', node)
        if value is not None and 'purpose' not in already_processed:
            already_processed.add('purpose')
            self.purpose = value
        value = find_attr_value_('ext-purpose', node)
        if value is not None and 'ext-purpose' not in already_processed:
            already_processed.add('ext-purpose')
            self.ext_purpose = value
        value = find_attr_value_('lang', node)
        if value is not None and 'lang' not in already_processed:
            already_processed.add('lang')
            self.lang = value
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IncidentID':
            obj_ = IncidentIDType.factory()
            obj_.build(child_)
            self.IncidentID = obj_
            obj_.original_tagname_ = 'IncidentID'
        elif nodeName_ == 'AlternativeID':
            obj_ = AlternativeID.factory()
            obj_.build(child_)
            self.AlternativeID = obj_
            obj_.original_tagname_ = 'AlternativeID'
        elif nodeName_ == 'RelatedActivity':
            obj_ = RelatedActivity.factory()
            obj_.build(child_)
            self.RelatedActivity = obj_
            obj_.original_tagname_ = 'RelatedActivity'
        elif nodeName_ == 'DetectTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.DetectTime = dval_
        elif nodeName_ == 'StartTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.StartTime = dval_
        elif nodeName_ == 'EndTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.EndTime = dval_
        elif nodeName_ == 'ReportTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ReportTime = dval_
        elif nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Assessment':
            obj_ = Assessment.factory()
            obj_.build(child_)
            self.Assessment.append(obj_)
            obj_.original_tagname_ = 'Assessment'
        elif nodeName_ == 'Method':
            obj_ = Method.factory()
            obj_.build(child_)
            self.Method.append(obj_)
            obj_.original_tagname_ = 'Method'
        elif nodeName_ == 'Contact':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'EventData':
            obj_ = EventData.factory()
            obj_.build(child_)
            self.EventData.append(obj_)
            obj_.original_tagname_ = 'EventData'
        elif nodeName_ == 'History':
            obj_ = History.factory()
            obj_.build(child_)
            self.History = obj_
            obj_.original_tagname_ = 'History'
        elif nodeName_ == 'AdditionalData':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.AdditionalData.append(obj_)
            obj_.original_tagname_ = 'AdditionalData'
# end class Incident


class AlternativeID(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, restriction=None, IncidentID=None):
        self.original_tagname_ = None
        self.restriction = _cast(None, restriction)
        if IncidentID is None:
            self.IncidentID = []
        else:
            self.IncidentID = IncidentID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AlternativeID)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AlternativeID.subclass:
            return AlternativeID.subclass(*args_, **kwargs_)
        else:
            return AlternativeID(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IncidentID(self): return self.IncidentID
    def set_IncidentID(self, IncidentID): self.IncidentID = IncidentID
    def add_IncidentID(self, value): self.IncidentID.append(value)
    def insert_IncidentID_at(self, index, value): self.IncidentID.insert(index, value)
    def replace_IncidentID_at(self, index, value): self.IncidentID[index] = value
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def hasContent_(self):
        if (
            self.IncidentID
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='AlternativeID', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AlternativeID')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AlternativeID')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='AlternativeID', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='AlternativeID'):
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='AlternativeID', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for IncidentID_ in self.IncidentID:
            IncidentID_.export(outfile, level, namespace_='iodef:', name_='IncidentID', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IncidentID':
            obj_ = IncidentIDType.factory()
            obj_.build(child_)
            self.IncidentID.append(obj_)
            obj_.original_tagname_ = 'IncidentID'
# end class AlternativeID


class RelatedActivity(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, restriction=None, IncidentID=None, URL=None):
        self.original_tagname_ = None
        self.restriction = _cast(None, restriction)
        if IncidentID is None:
            self.IncidentID = []
        else:
            self.IncidentID = IncidentID
        if URL is None:
            self.URL = []
        else:
            self.URL = URL
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RelatedActivity)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RelatedActivity.subclass:
            return RelatedActivity.subclass(*args_, **kwargs_)
        else:
            return RelatedActivity(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IncidentID(self): return self.IncidentID
    def set_IncidentID(self, IncidentID): self.IncidentID = IncidentID
    def add_IncidentID(self, value): self.IncidentID.append(value)
    def insert_IncidentID_at(self, index, value): self.IncidentID.insert(index, value)
    def replace_IncidentID_at(self, index, value): self.IncidentID[index] = value
    def get_URL(self): return self.URL
    def set_URL(self, URL): self.URL = URL
    def add_URL(self, value): self.URL.append(value)
    def insert_URL_at(self, index, value): self.URL.insert(index, value)
    def replace_URL_at(self, index, value): self.URL[index] = value
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def hasContent_(self):
        if (
            self.IncidentID or
            self.URL
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='RelatedActivity', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RelatedActivity')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RelatedActivity')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='RelatedActivity', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='RelatedActivity'):
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='RelatedActivity', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for IncidentID_ in self.IncidentID:
            IncidentID_.export(outfile, level, namespace_='iodef:', name_='IncidentID', pretty_print=pretty_print)
        for URL_ in self.URL:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:URL>%s</iodef:URL>%s' % (self.gds_encode(self.gds_format_string(quote_xml(URL_), input_name='URL')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IncidentID':
            obj_ = IncidentIDType.factory()
            obj_.build(child_)
            self.IncidentID.append(obj_)
            obj_.original_tagname_ = 'IncidentID'
        elif nodeName_ == 'URL':
            URL_ = child_.text
            URL_ = self.gds_validate_string(URL_, node, 'URL')
            self.URL.append(URL_)
# end class RelatedActivity


class Contact(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, role=None, ext_role=None, type_=None, ext_type=None, restriction=None, ContactName=None, Description=None, RegistryHandle=None, PostalAddress=None, Email=None, Telephone=None, Fax=None, Timezone=None, Contact_member=None, AdditionalData=None):
        self.original_tagname_ = None
        self.role = _cast(None, role)
        self.ext_role = _cast(None, ext_role)
        self.type_ = _cast(None, type_)
        self.ext_type = _cast(None, ext_type)
        self.restriction = _cast(None, restriction)
        self.ContactName = ContactName
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
        if RegistryHandle is None:
            self.RegistryHandle = []
        else:
            self.RegistryHandle = RegistryHandle
        self.PostalAddress = PostalAddress
        if Email is None:
            self.Email = []
        else:
            self.Email = Email
        if Telephone is None:
            self.Telephone = []
        else:
            self.Telephone = Telephone
        self.Fax = Fax
        self.Timezone = Timezone
        self.validate_TimezoneType(self.Timezone)
        if Contact_member is None:
            self.Contact = []
        else:
            self.Contact = Contact_member
        if AdditionalData is None:
            self.AdditionalData = []
        else:
            self.AdditionalData = AdditionalData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Contact)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Contact.subclass:
            return Contact.subclass(*args_, **kwargs_)
        else:
            return Contact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def get_RegistryHandle(self): return self.RegistryHandle
    def set_RegistryHandle(self, RegistryHandle): self.RegistryHandle = RegistryHandle
    def add_RegistryHandle(self, value): self.RegistryHandle.append(value)
    def insert_RegistryHandle_at(self, index, value): self.RegistryHandle.insert(index, value)
    def replace_RegistryHandle_at(self, index, value): self.RegistryHandle[index] = value
    def get_PostalAddress(self): return self.PostalAddress
    def set_PostalAddress(self, PostalAddress): self.PostalAddress = PostalAddress
    def get_Email(self): return self.Email
    def set_Email(self, Email): self.Email = Email
    def add_Email(self, value): self.Email.append(value)
    def insert_Email_at(self, index, value): self.Email.insert(index, value)
    def replace_Email_at(self, index, value): self.Email[index] = value
    def get_Telephone(self): return self.Telephone
    def set_Telephone(self, Telephone): self.Telephone = Telephone
    def add_Telephone(self, value): self.Telephone.append(value)
    def insert_Telephone_at(self, index, value): self.Telephone.insert(index, value)
    def replace_Telephone_at(self, index, value): self.Telephone[index] = value
    def get_Fax(self): return self.Fax
    def set_Fax(self, Fax): self.Fax = Fax
    def get_Timezone(self): return self.Timezone
    def set_Timezone(self, Timezone): self.Timezone = Timezone
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_AdditionalData(self): return self.AdditionalData
    def set_AdditionalData(self, AdditionalData): self.AdditionalData = AdditionalData
    def add_AdditionalData(self, value): self.AdditionalData.append(value)
    def insert_AdditionalData_at(self, index, value): self.AdditionalData.insert(index, value)
    def replace_AdditionalData_at(self, index, value): self.AdditionalData[index] = value
    def get_role(self): return self.role
    def set_role(self, role): self.role = role
    def get_ext_role(self): return self.ext_role
    def set_ext_role(self, ext_role): self.ext_role = ext_role
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_ext_type(self): return self.ext_type
    def set_ext_type(self, ext_type): self.ext_type = ext_type
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def validate_TimezoneType(self, value):
        # Validate type TimezoneType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_TimezoneType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_TimezoneType_patterns_, ))
    validate_TimezoneType_patterns_ = [['^Z$|^[\\+\\-](0[0-9]$|^1[0-4]):[0-5][0-9]$']]
    def hasContent_(self):
        if (
            self.ContactName is not None or
            self.Description or
            self.RegistryHandle or
            self.PostalAddress is not None or
            self.Email or
            self.Telephone or
            self.Fax is not None or
            self.Timezone is not None or
            self.Contact or
            self.AdditionalData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Contact', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Contact')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Contact')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Contact', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Contact'):
        if self.role is not None and 'role' not in already_processed:
            already_processed.add('role')
            outfile.write(' role=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.role), input_name='role')), ))
        if self.ext_role is not None and 'ext_role' not in already_processed:
            already_processed.add('ext_role')
            outfile.write(' ext-role=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_role), input_name='ext-role')), ))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.type_), input_name='type')), ))
        if self.ext_type is not None and 'ext_type' not in already_processed:
            already_processed.add('ext_type')
            outfile.write(' ext-type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_type), input_name='ext-type')), ))
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Contact', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactName is not None:
            self.ContactName.export(outfile, level, namespace_='iodef:', name_='ContactName', pretty_print=pretty_print)
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
        for RegistryHandle_ in self.RegistryHandle:
            RegistryHandle_.export(outfile, level, namespace_='iodef:', name_='RegistryHandle', pretty_print=pretty_print)
        if self.PostalAddress is not None:
            self.PostalAddress.export(outfile, level, namespace_='iodef:', name_='PostalAddress', pretty_print=pretty_print)
        for Email_ in self.Email:
            Email_.export(outfile, level, namespace_='iodef:', name_='Email', pretty_print=pretty_print)
        for Telephone_ in self.Telephone:
            Telephone_.export(outfile, level, namespace_='iodef:', name_='Telephone', pretty_print=pretty_print)
        if self.Fax is not None:
            self.Fax.export(outfile, level, namespace_='iodef:', name_='Fax', pretty_print=pretty_print)
        if self.Timezone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:Timezone>%s</iodef:Timezone>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Timezone), input_name='Timezone')), eol_))
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_='iodef:', name_='Contact', pretty_print=pretty_print)
        for AdditionalData_ in self.AdditionalData:
            AdditionalData_.export(outfile, level, namespace_='iodef:', name_='AdditionalData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('role', node)
        if value is not None and 'role' not in already_processed:
            already_processed.add('role')
            self.role = value
        value = find_attr_value_('ext-role', node)
        if value is not None and 'ext-role' not in already_processed:
            already_processed.add('ext-role')
            self.ext_role = value
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
        value = find_attr_value_('ext-type', node)
        if value is not None and 'ext-type' not in already_processed:
            already_processed.add('ext-type')
            self.ext_type = value
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactName':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.ContactName = obj_
            obj_.original_tagname_ = 'ContactName'
        elif nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'RegistryHandle':
            obj_ = RegistryHandle.factory()
            obj_.build(child_)
            self.RegistryHandle.append(obj_)
            obj_.original_tagname_ = 'RegistryHandle'
        elif nodeName_ == 'PostalAddress':
            obj_ = PostalAddress.factory()
            obj_.build(child_)
            self.PostalAddress = obj_
            obj_.original_tagname_ = 'PostalAddress'
        elif nodeName_ == 'Email':
            obj_ = ContactMeansType.factory()
            obj_.build(child_)
            self.Email.append(obj_)
            obj_.original_tagname_ = 'Email'
        elif nodeName_ == 'Telephone':
            obj_ = ContactMeansType.factory()
            obj_.build(child_)
            self.Telephone.append(obj_)
            obj_.original_tagname_ = 'Telephone'
        elif nodeName_ == 'Fax':
            obj_ = ContactMeansType.factory()
            obj_.build(child_)
            self.Fax = obj_
            obj_.original_tagname_ = 'Fax'
        elif nodeName_ == 'Timezone':
            Timezone_ = child_.text
            Timezone_ = self.gds_validate_string(Timezone_, node, 'Timezone')
            self.Timezone = Timezone_
            # validate type TimezoneType
            self.validate_TimezoneType(self.Timezone)
        elif nodeName_ == 'Contact':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'AdditionalData':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.AdditionalData.append(obj_)
            obj_.original_tagname_ = 'AdditionalData'
# end class Contact


class RegistryHandle(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, registry=None, ext_registry=None, valueOf_=None):
        self.original_tagname_ = None
        self.registry = _cast(None, registry)
        self.ext_registry = _cast(None, ext_registry)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RegistryHandle)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RegistryHandle.subclass:
            return RegistryHandle.subclass(*args_, **kwargs_)
        else:
            return RegistryHandle(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_registry(self): return self.registry
    def set_registry(self, registry): self.registry = registry
    def get_ext_registry(self): return self.ext_registry
    def set_ext_registry(self, ext_registry): self.ext_registry = ext_registry
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='RegistryHandle', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RegistryHandle')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RegistryHandle')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='RegistryHandle', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='RegistryHandle'):
        if self.registry is not None and 'registry' not in already_processed:
            already_processed.add('registry')
            outfile.write(' registry=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.registry), input_name='registry')), ))
        if self.ext_registry is not None and 'ext_registry' not in already_processed:
            already_processed.add('ext_registry')
            outfile.write(' ext-registry=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_registry), input_name='ext-registry')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='RegistryHandle', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('registry', node)
        if value is not None and 'registry' not in already_processed:
            already_processed.add('registry')
            self.registry = value
        value = find_attr_value_('ext-registry', node)
        if value is not None and 'ext-registry' not in already_processed:
            already_processed.add('ext-registry')
            self.ext_registry = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class RegistryHandle


class PostalAddress(MLStringType):
    subclass = None
    superclass = MLStringType
    def __init__(self, lang=None, meaning=None, valueOf_=None):
        self.original_tagname_ = None
        super(PostalAddress, self).__init__(lang, valueOf_, )
        self.meaning = _cast(None, meaning)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PostalAddress)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PostalAddress.subclass:
            return PostalAddress.subclass(*args_, **kwargs_)
        else:
            return PostalAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_meaning(self): return self.meaning
    def set_meaning(self, meaning): self.meaning = meaning
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(PostalAddress, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='PostalAddress', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PostalAddress')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PostalAddress')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='PostalAddress', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='PostalAddress'):
        super(PostalAddress, self).exportAttributes(outfile, level, already_processed, namespace_, name_='PostalAddress')
        if self.meaning is not None and 'meaning' not in already_processed:
            already_processed.add('meaning')
            outfile.write(' meaning=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.meaning), input_name='meaning')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='PostalAddress', fromsubclass_=False, pretty_print=True):
        super(PostalAddress, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('meaning', node)
        if value is not None and 'meaning' not in already_processed:
            already_processed.add('meaning')
            self.meaning = value
        super(PostalAddress, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PostalAddress


class ContactMeansType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, meaning=None, valueOf_=None):
        self.original_tagname_ = None
        self.meaning = _cast(None, meaning)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactMeansType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactMeansType.subclass:
            return ContactMeansType.subclass(*args_, **kwargs_)
        else:
            return ContactMeansType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_meaning(self): return self.meaning
    def set_meaning(self, meaning): self.meaning = meaning
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='ContactMeansType', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContactMeansType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactMeansType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='ContactMeansType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='ContactMeansType'):
        if self.meaning is not None and 'meaning' not in already_processed:
            already_processed.add('meaning')
            outfile.write(' meaning=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.meaning), input_name='meaning')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='ContactMeansType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('meaning', node)
        if value is not None and 'meaning' not in already_processed:
            already_processed.add('meaning')
            self.meaning = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ContactMeansType


class History(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, restriction='default', HistoryItem=None):
        self.original_tagname_ = None
        self.restriction = _cast(None, restriction)
        if HistoryItem is None:
            self.HistoryItem = []
        else:
            self.HistoryItem = HistoryItem
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, History)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if History.subclass:
            return History.subclass(*args_, **kwargs_)
        else:
            return History(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HistoryItem(self): return self.HistoryItem
    def set_HistoryItem(self, HistoryItem): self.HistoryItem = HistoryItem
    def add_HistoryItem(self, value): self.HistoryItem.append(value)
    def insert_HistoryItem_at(self, index, value): self.HistoryItem.insert(index, value)
    def replace_HistoryItem_at(self, index, value): self.HistoryItem[index] = value
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def hasContent_(self):
        if (
            self.HistoryItem
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='History', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('History')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='History')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='History', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='History'):
        if self.restriction != "default" and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='History', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for HistoryItem_ in self.HistoryItem:
            HistoryItem_.export(outfile, level, namespace_='iodef:', name_='HistoryItem', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HistoryItem':
            obj_ = HistoryItem.factory()
            obj_.build(child_)
            self.HistoryItem.append(obj_)
            obj_.original_tagname_ = 'HistoryItem'
# end class History


class HistoryItem(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, restriction=None, action=None, ext_action=None, DateTime=None, IncidentID=None, Contact=None, Description=None, AdditionalData=None):
        self.original_tagname_ = None
        self.restriction = _cast(None, restriction)
        self.action = _cast(None, action)
        self.ext_action = _cast(None, ext_action)
        if isinstance(DateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = DateTime
        self.DateTime = initvalue_
        self.IncidentID = IncidentID
        self.Contact = Contact
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
        if AdditionalData is None:
            self.AdditionalData = []
        else:
            self.AdditionalData = AdditionalData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HistoryItem)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HistoryItem.subclass:
            return HistoryItem.subclass(*args_, **kwargs_)
        else:
            return HistoryItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTime(self): return self.DateTime
    def set_DateTime(self, DateTime): self.DateTime = DateTime
    def get_IncidentID(self): return self.IncidentID
    def set_IncidentID(self, IncidentID): self.IncidentID = IncidentID
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def get_AdditionalData(self): return self.AdditionalData
    def set_AdditionalData(self, AdditionalData): self.AdditionalData = AdditionalData
    def add_AdditionalData(self, value): self.AdditionalData.append(value)
    def insert_AdditionalData_at(self, index, value): self.AdditionalData.insert(index, value)
    def replace_AdditionalData_at(self, index, value): self.AdditionalData[index] = value
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def get_action(self): return self.action
    def set_action(self, action): self.action = action
    def get_ext_action(self): return self.ext_action
    def set_ext_action(self, ext_action): self.ext_action = ext_action
    def hasContent_(self):
        if (
            self.DateTime is not None or
            self.IncidentID is not None or
            self.Contact is not None or
            self.Description or
            self.AdditionalData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='HistoryItem', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HistoryItem')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HistoryItem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='HistoryItem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='HistoryItem'):
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
        if self.action is not None and 'action' not in already_processed:
            already_processed.add('action')
            outfile.write(' action=%s' % (quote_attrib(self.action), ))
        if self.ext_action is not None and 'ext_action' not in already_processed:
            already_processed.add('ext_action')
            outfile.write(' ext-action=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_action), input_name='ext-action')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='HistoryItem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:DateTime>%s</iodef:DateTime>%s' % (self.gds_format_datetime(self.DateTime, input_name='DateTime'), eol_))
        if self.IncidentID is not None:
            self.IncidentID.export(outfile, level, namespace_='iodef:', name_='IncidentID', pretty_print=pretty_print)
        if self.Contact is not None:
            self.Contact.export(outfile, level, namespace_='iodef:', name_='Contact', pretty_print=pretty_print)
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
        for AdditionalData_ in self.AdditionalData:
            AdditionalData_.export(outfile, level, namespace_='iodef:', name_='AdditionalData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
        value = find_attr_value_('action', node)
        if value is not None and 'action' not in already_processed:
            already_processed.add('action')
            self.action = value
        value = find_attr_value_('ext-action', node)
        if value is not None and 'ext-action' not in already_processed:
            already_processed.add('ext-action')
            self.ext_action = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.DateTime = dval_
        elif nodeName_ == 'IncidentID':
            obj_ = IncidentIDType.factory()
            obj_.build(child_)
            self.IncidentID = obj_
            obj_.original_tagname_ = 'IncidentID'
        elif nodeName_ == 'Contact':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'AdditionalData':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.AdditionalData.append(obj_)
            obj_.original_tagname_ = 'AdditionalData'
# end class HistoryItem


class Expectation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, restriction='default', severity=None, action='other', ext_action=None, Description=None, StartTime=None, EndTime=None, Contact=None):
        self.original_tagname_ = None
        self.restriction = _cast(None, restriction)
        self.severity = _cast(None, severity)
        self.action = _cast(None, action)
        self.ext_action = _cast(None, ext_action)
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
        if isinstance(StartTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(StartTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = StartTime
        self.StartTime = initvalue_
        if isinstance(EndTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EndTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = EndTime
        self.EndTime = initvalue_
        self.Contact = Contact
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Expectation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Expectation.subclass:
            return Expectation.subclass(*args_, **kwargs_)
        else:
            return Expectation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def get_StartTime(self): return self.StartTime
    def set_StartTime(self, StartTime): self.StartTime = StartTime
    def get_EndTime(self): return self.EndTime
    def set_EndTime(self, EndTime): self.EndTime = EndTime
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def get_severity(self): return self.severity
    def set_severity(self, severity): self.severity = severity
    def get_action(self): return self.action
    def set_action(self, action): self.action = action
    def get_ext_action(self): return self.ext_action
    def set_ext_action(self, ext_action): self.ext_action = ext_action
    def hasContent_(self):
        if (
            self.Description or
            self.StartTime is not None or
            self.EndTime is not None or
            self.Contact is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Expectation', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Expectation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Expectation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Expectation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Expectation'):
        if self.restriction != "default" and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
        if self.severity is not None and 'severity' not in already_processed:
            already_processed.add('severity')
            outfile.write(' severity=%s' % (quote_attrib(self.severity), ))
        if self.action != "other" and 'action' not in already_processed:
            already_processed.add('action')
            outfile.write(' action=%s' % (quote_attrib(self.action), ))
        if self.ext_action is not None and 'ext_action' not in already_processed:
            already_processed.add('ext_action')
            outfile.write(' ext-action=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_action), input_name='ext-action')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Expectation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
        if self.StartTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:StartTime>%s</iodef:StartTime>%s' % (self.gds_format_datetime(self.StartTime, input_name='StartTime'), eol_))
        if self.EndTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:EndTime>%s</iodef:EndTime>%s' % (self.gds_format_datetime(self.EndTime, input_name='EndTime'), eol_))
        if self.Contact is not None:
            self.Contact.export(outfile, level, namespace_='iodef:', name_='Contact', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
        value = find_attr_value_('severity', node)
        if value is not None and 'severity' not in already_processed:
            already_processed.add('severity')
            self.severity = value
        value = find_attr_value_('action', node)
        if value is not None and 'action' not in already_processed:
            already_processed.add('action')
            self.action = value
        value = find_attr_value_('ext-action', node)
        if value is not None and 'ext-action' not in already_processed:
            already_processed.add('ext-action')
            self.ext_action = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'StartTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.StartTime = dval_
        elif nodeName_ == 'EndTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.EndTime = dval_
        elif nodeName_ == 'Contact':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
# end class Expectation


class Method(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, restriction=None, Reference=None, Description=None, AdditionalData=None):
        self.original_tagname_ = None
        self.restriction = _cast(None, restriction)
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
        if AdditionalData is None:
            self.AdditionalData = []
        else:
            self.AdditionalData = AdditionalData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Method)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Method.subclass:
            return Method.subclass(*args_, **kwargs_)
        else:
            return Method(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def get_AdditionalData(self): return self.AdditionalData
    def set_AdditionalData(self, AdditionalData): self.AdditionalData = AdditionalData
    def add_AdditionalData(self, value): self.AdditionalData.append(value)
    def insert_AdditionalData_at(self, index, value): self.AdditionalData.insert(index, value)
    def replace_AdditionalData_at(self, index, value): self.AdditionalData[index] = value
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def hasContent_(self):
        if (
            self.Reference or
            self.Description or
            self.AdditionalData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Method', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Method')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Method')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Method', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Method'):
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Method', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_='iodef:', name_='Reference', pretty_print=pretty_print)
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
        for AdditionalData_ in self.AdditionalData:
            AdditionalData_.export(outfile, level, namespace_='iodef:', name_='AdditionalData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Reference':
            obj_ = ReferenceType.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'AdditionalData':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.AdditionalData.append(obj_)
            obj_.original_tagname_ = 'AdditionalData'
# end class Method


class Reference(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceName=None, URL=None, Description=None):
        self.original_tagname_ = None
        self.ReferenceName = ReferenceName
        if URL is None:
            self.URL = []
        else:
            self.URL = URL
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Reference)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Reference.subclass:
            return Reference.subclass(*args_, **kwargs_)
        else:
            return Reference(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceName(self): return self.ReferenceName
    def set_ReferenceName(self, ReferenceName): self.ReferenceName = ReferenceName
    def get_URL(self): return self.URL
    def set_URL(self, URL): self.URL = URL
    def add_URL(self, value): self.URL.append(value)
    def insert_URL_at(self, index, value): self.URL.insert(index, value)
    def replace_URL_at(self, index, value): self.URL[index] = value
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def hasContent_(self):
        if (
            self.ReferenceName is not None or
            self.URL or
            self.Description
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Reference', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Reference')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Reference')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Reference', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Reference'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Reference', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceName is not None:
            self.ReferenceName.export(outfile, level, namespace_, name_='ReferenceName', pretty_print=pretty_print)
        for URL_ in self.URL:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:URL>%s</iodef:URL>%s' % (self.gds_encode(self.gds_format_string(quote_xml(URL_), input_name='URL')), eol_))
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReferenceName':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.ReferenceName = obj_
            obj_.original_tagname_ = 'ReferenceName'
        elif nodeName_ == 'URL':
            URL_ = child_.text
            URL_ = self.gds_validate_string(URL_, node, 'URL')
            self.URL.append(URL_)
        elif nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
# end class Reference


class Assessment(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, occurrence=None, restriction=None, Impact=None, TimeImpact=None, MonetaryImpact=None, Counter=None, Confidence=None, AdditionalData=None):
        self.original_tagname_ = None
        self.occurrence = _cast(None, occurrence)
        self.restriction = _cast(None, restriction)
        if Impact is None:
            self.Impact = []
        else:
            self.Impact = Impact
        if TimeImpact is None:
            self.TimeImpact = []
        else:
            self.TimeImpact = TimeImpact
        if MonetaryImpact is None:
            self.MonetaryImpact = []
        else:
            self.MonetaryImpact = MonetaryImpact
        if Counter is None:
            self.Counter = []
        else:
            self.Counter = Counter
        self.Confidence = Confidence
        if AdditionalData is None:
            self.AdditionalData = []
        else:
            self.AdditionalData = AdditionalData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Assessment)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Assessment.subclass:
            return Assessment.subclass(*args_, **kwargs_)
        else:
            return Assessment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Impact(self): return self.Impact
    def set_Impact(self, Impact): self.Impact = Impact
    def add_Impact(self, value): self.Impact.append(value)
    def insert_Impact_at(self, index, value): self.Impact.insert(index, value)
    def replace_Impact_at(self, index, value): self.Impact[index] = value
    def get_TimeImpact(self): return self.TimeImpact
    def set_TimeImpact(self, TimeImpact): self.TimeImpact = TimeImpact
    def add_TimeImpact(self, value): self.TimeImpact.append(value)
    def insert_TimeImpact_at(self, index, value): self.TimeImpact.insert(index, value)
    def replace_TimeImpact_at(self, index, value): self.TimeImpact[index] = value
    def get_MonetaryImpact(self): return self.MonetaryImpact
    def set_MonetaryImpact(self, MonetaryImpact): self.MonetaryImpact = MonetaryImpact
    def add_MonetaryImpact(self, value): self.MonetaryImpact.append(value)
    def insert_MonetaryImpact_at(self, index, value): self.MonetaryImpact.insert(index, value)
    def replace_MonetaryImpact_at(self, index, value): self.MonetaryImpact[index] = value
    def get_Counter(self): return self.Counter
    def set_Counter(self, Counter): self.Counter = Counter
    def add_Counter(self, value): self.Counter.append(value)
    def insert_Counter_at(self, index, value): self.Counter.insert(index, value)
    def replace_Counter_at(self, index, value): self.Counter[index] = value
    def get_Confidence(self): return self.Confidence
    def set_Confidence(self, Confidence): self.Confidence = Confidence
    def get_AdditionalData(self): return self.AdditionalData
    def set_AdditionalData(self, AdditionalData): self.AdditionalData = AdditionalData
    def add_AdditionalData(self, value): self.AdditionalData.append(value)
    def insert_AdditionalData_at(self, index, value): self.AdditionalData.insert(index, value)
    def replace_AdditionalData_at(self, index, value): self.AdditionalData[index] = value
    def get_occurrence(self): return self.occurrence
    def set_occurrence(self, occurrence): self.occurrence = occurrence
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def hasContent_(self):
        if (
            self.Impact or
            self.TimeImpact or
            self.MonetaryImpact or
            self.Counter or
            self.Confidence is not None or
            self.AdditionalData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Assessment', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Assessment')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Assessment')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Assessment', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Assessment'):
        if self.occurrence is not None and 'occurrence' not in already_processed:
            already_processed.add('occurrence')
            outfile.write(' occurrence=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.occurrence), input_name='occurrence')), ))
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Assessment', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Impact_ in self.Impact:
            Impact_.export(outfile, level, namespace_='iodef:', name_='Impact', pretty_print=pretty_print)
        for TimeImpact_ in self.TimeImpact:
            TimeImpact_.export(outfile, level, namespace_='iodef:', name_='TimeImpact', pretty_print=pretty_print)
        for MonetaryImpact_ in self.MonetaryImpact:
            MonetaryImpact_.export(outfile, level, namespace_='iodef:', name_='MonetaryImpact', pretty_print=pretty_print)
        for Counter_ in self.Counter:
            Counter_.export(outfile, level, namespace_='iodef:', name_='Counter', pretty_print=pretty_print)
        if self.Confidence is not None:
            self.Confidence.export(outfile, level, namespace_='iodef:', name_='Confidence', pretty_print=pretty_print)
        for AdditionalData_ in self.AdditionalData:
            AdditionalData_.export(outfile, level, namespace_='iodef:', name_='AdditionalData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('occurrence', node)
        if value is not None and 'occurrence' not in already_processed:
            already_processed.add('occurrence')
            self.occurrence = value
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Impact':
            obj_ = Impact.factory()
            obj_.build(child_)
            self.Impact.append(obj_)
            obj_.original_tagname_ = 'Impact'
        elif nodeName_ == 'TimeImpact':
            obj_ = TimeImpact.factory()
            obj_.build(child_)
            self.TimeImpact.append(obj_)
            obj_.original_tagname_ = 'TimeImpact'
        elif nodeName_ == 'MonetaryImpact':
            obj_ = MonetaryImpact.factory()
            obj_.build(child_)
            self.MonetaryImpact.append(obj_)
            obj_.original_tagname_ = 'MonetaryImpact'
        elif nodeName_ == 'Counter':
            obj_ = Counter.factory()
            obj_.build(child_)
            self.Counter.append(obj_)
            obj_.original_tagname_ = 'Counter'
        elif nodeName_ == 'Confidence':
            obj_ = Confidence.factory()
            obj_.build(child_)
            self.Confidence = obj_
            obj_.original_tagname_ = 'Confidence'
        elif nodeName_ == 'AdditionalData':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.AdditionalData.append(obj_)
            obj_.original_tagname_ = 'AdditionalData'
# end class Assessment


class Impact(MLStringType):
    subclass = None
    superclass = MLStringType
    def __init__(self, lang=None, severity=None, completion=None, type_='unknown', ext_type=None, valueOf_=None):
        self.original_tagname_ = None
        super(Impact, self).__init__(lang, valueOf_, )
        self.severity = _cast(None, severity)
        self.completion = _cast(None, completion)
        self.type_ = _cast(None, type_)
        self.ext_type = _cast(None, ext_type)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Impact)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Impact.subclass:
            return Impact.subclass(*args_, **kwargs_)
        else:
            return Impact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_severity(self): return self.severity
    def set_severity(self, severity): self.severity = severity
    def get_completion(self): return self.completion
    def set_completion(self, completion): self.completion = completion
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_ext_type(self): return self.ext_type
    def set_ext_type(self, ext_type): self.ext_type = ext_type
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(Impact, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Impact', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Impact')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Impact')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Impact', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Impact'):
        super(Impact, self).exportAttributes(outfile, level, already_processed, namespace_, name_='Impact')
        if self.severity is not None and 'severity' not in already_processed:
            already_processed.add('severity')
            outfile.write(' severity=%s' % (quote_attrib(self.severity), ))
        if self.completion is not None and 'completion' not in already_processed:
            already_processed.add('completion')
            outfile.write(' completion=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.completion), input_name='completion')), ))
        if self.type_ != "unknown" and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.type_), input_name='type')), ))
        if self.ext_type is not None and 'ext_type' not in already_processed:
            already_processed.add('ext_type')
            outfile.write(' ext-type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_type), input_name='ext-type')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Impact', fromsubclass_=False, pretty_print=True):
        super(Impact, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('severity', node)
        if value is not None and 'severity' not in already_processed:
            already_processed.add('severity')
            self.severity = value
        value = find_attr_value_('completion', node)
        if value is not None and 'completion' not in already_processed:
            already_processed.add('completion')
            self.completion = value
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
        value = find_attr_value_('ext-type', node)
        if value is not None and 'ext-type' not in already_processed:
            already_processed.add('ext-type')
            self.ext_type = value
        super(Impact, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Impact


class TimeImpact(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, severity=None, metric=None, ext_metric=None, duration=None, ext_duration=None, valueOf_=None):
        self.original_tagname_ = None
        self.severity = _cast(None, severity)
        self.metric = _cast(None, metric)
        self.ext_metric = _cast(None, ext_metric)
        self.duration = _cast(None, duration)
        self.ext_duration = _cast(None, ext_duration)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TimeImpact)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TimeImpact.subclass:
            return TimeImpact.subclass(*args_, **kwargs_)
        else:
            return TimeImpact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_severity(self): return self.severity
    def set_severity(self, severity): self.severity = severity
    def get_metric(self): return self.metric
    def set_metric(self, metric): self.metric = metric
    def get_ext_metric(self): return self.ext_metric
    def set_ext_metric(self, ext_metric): self.ext_metric = ext_metric
    def get_duration(self): return self.duration
    def set_duration(self, duration): self.duration = duration
    def get_ext_duration(self): return self.ext_duration
    def set_ext_duration(self, ext_duration): self.ext_duration = ext_duration
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='TimeImpact', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TimeImpact')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TimeImpact')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='TimeImpact', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='TimeImpact'):
        if self.severity is not None and 'severity' not in already_processed:
            already_processed.add('severity')
            outfile.write(' severity=%s' % (quote_attrib(self.severity), ))
        if self.metric is not None and 'metric' not in already_processed:
            already_processed.add('metric')
            outfile.write(' metric=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.metric), input_name='metric')), ))
        if self.ext_metric is not None and 'ext_metric' not in already_processed:
            already_processed.add('ext_metric')
            outfile.write(' ext-metric=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_metric), input_name='ext-metric')), ))
        if self.duration is not None and 'duration' not in already_processed:
            already_processed.add('duration')
            outfile.write(' duration=%s' % (quote_attrib(self.duration), ))
        if self.ext_duration is not None and 'ext_duration' not in already_processed:
            already_processed.add('ext_duration')
            outfile.write(' ext-duration=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_duration), input_name='ext-duration')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='TimeImpact', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('severity', node)
        if value is not None and 'severity' not in already_processed:
            already_processed.add('severity')
            self.severity = value
        value = find_attr_value_('metric', node)
        if value is not None and 'metric' not in already_processed:
            already_processed.add('metric')
            self.metric = value
        value = find_attr_value_('ext-metric', node)
        if value is not None and 'ext-metric' not in already_processed:
            already_processed.add('ext-metric')
            self.ext_metric = value
        value = find_attr_value_('duration', node)
        if value is not None and 'duration' not in already_processed:
            already_processed.add('duration')
            self.duration = value
        value = find_attr_value_('ext-duration', node)
        if value is not None and 'ext-duration' not in already_processed:
            already_processed.add('ext-duration')
            self.ext_duration = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TimeImpact


class MonetaryImpact(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, severity=None, currency=None, valueOf_=None):
        self.original_tagname_ = None
        self.severity = _cast(None, severity)
        self.currency = _cast(None, currency)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MonetaryImpact)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MonetaryImpact.subclass:
            return MonetaryImpact.subclass(*args_, **kwargs_)
        else:
            return MonetaryImpact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_severity(self): return self.severity
    def set_severity(self, severity): self.severity = severity
    def get_currency(self): return self.currency
    def set_currency(self, currency): self.currency = currency
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='MonetaryImpact', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MonetaryImpact')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MonetaryImpact')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='MonetaryImpact', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='MonetaryImpact'):
        if self.severity is not None and 'severity' not in already_processed:
            already_processed.add('severity')
            outfile.write(' severity=%s' % (quote_attrib(self.severity), ))
        if self.currency is not None and 'currency' not in already_processed:
            already_processed.add('currency')
            outfile.write(' currency=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.currency), input_name='currency')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='MonetaryImpact', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('severity', node)
        if value is not None and 'severity' not in already_processed:
            already_processed.add('severity')
            self.severity = value
        value = find_attr_value_('currency', node)
        if value is not None and 'currency' not in already_processed:
            already_processed.add('currency')
            self.currency = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MonetaryImpact


class Confidence(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, rating=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.rating = _cast(None, rating)
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Confidence)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Confidence.subclass:
            return Confidence.subclass(*args_, **kwargs_)
        else:
            return Confidence(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_rating(self): return self.rating
    def set_rating(self, rating): self.rating = rating
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Confidence', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Confidence')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Confidence')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Confidence'):
        if self.rating is not None and 'rating' not in already_processed:
            already_processed.add('rating')
            outfile.write(' rating=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.rating), input_name='rating')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Confidence', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('rating', node)
        if value is not None and 'rating' not in already_processed:
            already_processed.add('rating')
            self.rating = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        pass
# end class Confidence


class EventData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, restriction='default', Description=None, DetectTime=None, StartTime=None, EndTime=None, Contact=None, Assessment=None, Method=None, Flow=None, Expectation=None, Record=None, EventData_member=None, AdditionalData=None):
        self.original_tagname_ = None
        self.restriction = _cast(None, restriction)
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
        if isinstance(DetectTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DetectTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = DetectTime
        self.DetectTime = initvalue_
        if isinstance(StartTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(StartTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = StartTime
        self.StartTime = initvalue_
        if isinstance(EndTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EndTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = EndTime
        self.EndTime = initvalue_
        if Contact is None:
            self.Contact = []
        else:
            self.Contact = Contact
        self.Assessment = Assessment
        if Method is None:
            self.Method = []
        else:
            self.Method = Method
        if Flow is None:
            self.Flow = []
        else:
            self.Flow = Flow
        if Expectation is None:
            self.Expectation = []
        else:
            self.Expectation = Expectation
        self.Record = Record
        if EventData_member is None:
            self.EventData = []
        else:
            self.EventData = EventData_member
        if AdditionalData is None:
            self.AdditionalData = []
        else:
            self.AdditionalData = AdditionalData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EventData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EventData.subclass:
            return EventData.subclass(*args_, **kwargs_)
        else:
            return EventData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def get_DetectTime(self): return self.DetectTime
    def set_DetectTime(self, DetectTime): self.DetectTime = DetectTime
    def get_StartTime(self): return self.StartTime
    def set_StartTime(self, StartTime): self.StartTime = StartTime
    def get_EndTime(self): return self.EndTime
    def set_EndTime(self, EndTime): self.EndTime = EndTime
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def add_Contact(self, value): self.Contact.append(value)
    def insert_Contact_at(self, index, value): self.Contact.insert(index, value)
    def replace_Contact_at(self, index, value): self.Contact[index] = value
    def get_Assessment(self): return self.Assessment
    def set_Assessment(self, Assessment): self.Assessment = Assessment
    def get_Method(self): return self.Method
    def set_Method(self, Method): self.Method = Method
    def add_Method(self, value): self.Method.append(value)
    def insert_Method_at(self, index, value): self.Method.insert(index, value)
    def replace_Method_at(self, index, value): self.Method[index] = value
    def get_Flow(self): return self.Flow
    def set_Flow(self, Flow): self.Flow = Flow
    def add_Flow(self, value): self.Flow.append(value)
    def insert_Flow_at(self, index, value): self.Flow.insert(index, value)
    def replace_Flow_at(self, index, value): self.Flow[index] = value
    def get_Expectation(self): return self.Expectation
    def set_Expectation(self, Expectation): self.Expectation = Expectation
    def add_Expectation(self, value): self.Expectation.append(value)
    def insert_Expectation_at(self, index, value): self.Expectation.insert(index, value)
    def replace_Expectation_at(self, index, value): self.Expectation[index] = value
    def get_Record(self): return self.Record
    def set_Record(self, Record): self.Record = Record
    def get_EventData(self): return self.EventData
    def set_EventData(self, EventData): self.EventData = EventData
    def add_EventData(self, value): self.EventData.append(value)
    def insert_EventData_at(self, index, value): self.EventData.insert(index, value)
    def replace_EventData_at(self, index, value): self.EventData[index] = value
    def get_AdditionalData(self): return self.AdditionalData
    def set_AdditionalData(self, AdditionalData): self.AdditionalData = AdditionalData
    def add_AdditionalData(self, value): self.AdditionalData.append(value)
    def insert_AdditionalData_at(self, index, value): self.AdditionalData.insert(index, value)
    def replace_AdditionalData_at(self, index, value): self.AdditionalData[index] = value
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def hasContent_(self):
        if (
            self.Description or
            self.DetectTime is not None or
            self.StartTime is not None or
            self.EndTime is not None or
            self.Contact or
            self.Assessment is not None or
            self.Method or
            self.Flow or
            self.Expectation or
            self.Record is not None or
            self.EventData or
            self.AdditionalData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='EventData', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EventData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EventData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='EventData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='EventData'):
        if self.restriction != "default" and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='EventData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
        if self.DetectTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:DetectTime>%s</iodef:DetectTime>%s' % (self.gds_format_datetime(self.DetectTime, input_name='DetectTime'), eol_))
        if self.StartTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:StartTime>%s</iodef:StartTime>%s' % (self.gds_format_datetime(self.StartTime, input_name='StartTime'), eol_))
        if self.EndTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:EndTime>%s</iodef:EndTime>%s' % (self.gds_format_datetime(self.EndTime, input_name='EndTime'), eol_))
        for Contact_ in self.Contact:
            Contact_.export(outfile, level, namespace_='iodef:', name_='Contact', pretty_print=pretty_print)
        if self.Assessment is not None:
            self.Assessment.export(outfile, level, namespace_='iodef:', name_='Assessment', pretty_print=pretty_print)
        for Method_ in self.Method:
            Method_.export(outfile, level, namespace_='iodef:', name_='Method', pretty_print=pretty_print)
        for Flow_ in self.Flow:
            Flow_.export(outfile, level, namespace_='iodef:', name_='Flow', pretty_print=pretty_print)
        for Expectation_ in self.Expectation:
            Expectation_.export(outfile, level, namespace_='iodef:', name_='Expectation', pretty_print=pretty_print)
        if self.Record is not None:
            self.Record.export(outfile, level, namespace_='iodef:', name_='Record', pretty_print=pretty_print)
        for EventData_ in self.EventData:
            EventData_.export(outfile, level, namespace_='iodef:', name_='EventData', pretty_print=pretty_print)
        for AdditionalData_ in self.AdditionalData:
            AdditionalData_.export(outfile, level, namespace_='iodef:', name_='AdditionalData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'DetectTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.DetectTime = dval_
        elif nodeName_ == 'StartTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.StartTime = dval_
        elif nodeName_ == 'EndTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.EndTime = dval_
        elif nodeName_ == 'Contact':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.Contact.append(obj_)
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Assessment':
            obj_ = Assessment.factory()
            obj_.build(child_)
            self.Assessment = obj_
            obj_.original_tagname_ = 'Assessment'
        elif nodeName_ == 'Method':
            obj_ = Method.factory()
            obj_.build(child_)
            self.Method.append(obj_)
            obj_.original_tagname_ = 'Method'
        elif nodeName_ == 'Flow':
            obj_ = Flow.factory()
            obj_.build(child_)
            self.Flow.append(obj_)
            obj_.original_tagname_ = 'Flow'
        elif nodeName_ == 'Expectation':
            obj_ = Expectation.factory()
            obj_.build(child_)
            self.Expectation.append(obj_)
            obj_.original_tagname_ = 'Expectation'
        elif nodeName_ == 'Record':
            obj_ = Record.factory()
            obj_.build(child_)
            self.Record = obj_
            obj_.original_tagname_ = 'Record'
        elif nodeName_ == 'EventData':
            obj_ = EventData.factory()
            obj_.build(child_)
            self.EventData.append(obj_)
            obj_.original_tagname_ = 'EventData'
        elif nodeName_ == 'AdditionalData':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.AdditionalData.append(obj_)
            obj_.original_tagname_ = 'AdditionalData'
# end class EventData


class Flow(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, System=None):
        self.original_tagname_ = None
        if System is None:
            self.System = []
        else:
            self.System = System
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Flow)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Flow.subclass:
            return Flow.subclass(*args_, **kwargs_)
        else:
            return Flow(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_System(self): return self.System
    def set_System(self, System): self.System = System
    def add_System(self, value): self.System.append(value)
    def insert_System_at(self, index, value): self.System.insert(index, value)
    def replace_System_at(self, index, value): self.System[index] = value
    def hasContent_(self):
        if (
            self.System
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Flow', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Flow')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Flow')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Flow', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Flow'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Flow', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for System_ in self.System:
            System_.export(outfile, level, namespace_='iodef:', name_='System', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'System':
            obj_ = System.factory()
            obj_.build(child_)
            self.System.append(obj_)
            obj_.original_tagname_ = 'System'
# end class Flow


class System(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, restriction=None, interface=None, category=None, ext_category=None, spoofed='unknown', Node=None, Service=None, OperatingSystem=None, Counter=None, Description=None, AdditionalData=None):
        self.original_tagname_ = None
        self.restriction = _cast(None, restriction)
        self.interface = _cast(None, interface)
        self.category = _cast(None, category)
        self.ext_category = _cast(None, ext_category)
        self.spoofed = _cast(None, spoofed)
        self.Node = Node
        if Service is None:
            self.Service = []
        else:
            self.Service = Service
        if OperatingSystem is None:
            self.OperatingSystem = []
        else:
            self.OperatingSystem = OperatingSystem
        if Counter is None:
            self.Counter = []
        else:
            self.Counter = Counter
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
        if AdditionalData is None:
            self.AdditionalData = []
        else:
            self.AdditionalData = AdditionalData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, System)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if System.subclass:
            return System.subclass(*args_, **kwargs_)
        else:
            return System(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Node(self): return self.Node
    def set_Node(self, Node): self.Node = Node
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def add_Service(self, value): self.Service.append(value)
    def insert_Service_at(self, index, value): self.Service.insert(index, value)
    def replace_Service_at(self, index, value): self.Service[index] = value
    def get_OperatingSystem(self): return self.OperatingSystem
    def set_OperatingSystem(self, OperatingSystem): self.OperatingSystem = OperatingSystem
    def add_OperatingSystem(self, value): self.OperatingSystem.append(value)
    def insert_OperatingSystem_at(self, index, value): self.OperatingSystem.insert(index, value)
    def replace_OperatingSystem_at(self, index, value): self.OperatingSystem[index] = value
    def get_Counter(self): return self.Counter
    def set_Counter(self, Counter): self.Counter = Counter
    def add_Counter(self, value): self.Counter.append(value)
    def insert_Counter_at(self, index, value): self.Counter.insert(index, value)
    def replace_Counter_at(self, index, value): self.Counter[index] = value
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def get_AdditionalData(self): return self.AdditionalData
    def set_AdditionalData(self, AdditionalData): self.AdditionalData = AdditionalData
    def add_AdditionalData(self, value): self.AdditionalData.append(value)
    def insert_AdditionalData_at(self, index, value): self.AdditionalData.insert(index, value)
    def replace_AdditionalData_at(self, index, value): self.AdditionalData[index] = value
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def get_interface(self): return self.interface
    def set_interface(self, interface): self.interface = interface
    def get_category(self): return self.category
    def set_category(self, category): self.category = category
    def get_ext_category(self): return self.ext_category
    def set_ext_category(self, ext_category): self.ext_category = ext_category
    def get_spoofed(self): return self.spoofed
    def set_spoofed(self, spoofed): self.spoofed = spoofed
    def hasContent_(self):
        if (
            self.Node is not None or
            self.Service or
            self.OperatingSystem or
            self.Counter or
            self.Description or
            self.AdditionalData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='System', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('System')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='System')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='System', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='System'):
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
        if self.interface is not None and 'interface' not in already_processed:
            already_processed.add('interface')
            outfile.write(' interface=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.interface), input_name='interface')), ))
        if self.category is not None and 'category' not in already_processed:
            already_processed.add('category')
            outfile.write(' category=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.category), input_name='category')), ))
        if self.ext_category is not None and 'ext_category' not in already_processed:
            already_processed.add('ext_category')
            outfile.write(' ext-category=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_category), input_name='ext-category')), ))
        if self.spoofed != "unknown" and 'spoofed' not in already_processed:
            already_processed.add('spoofed')
            outfile.write(' spoofed=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.spoofed), input_name='spoofed')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='System', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Node is not None:
            self.Node.export(outfile, level, namespace_='iodef:', name_='Node', pretty_print=pretty_print)
        for Service_ in self.Service:
            Service_.export(outfile, level, namespace_='iodef:', name_='Service', pretty_print=pretty_print)
        for OperatingSystem_ in self.OperatingSystem:
            OperatingSystem_.export(outfile, level, namespace_='iodef:', name_='OperatingSystem', pretty_print=pretty_print)
        for Counter_ in self.Counter:
            Counter_.export(outfile, level, namespace_='iodef:', name_='Counter', pretty_print=pretty_print)
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
        for AdditionalData_ in self.AdditionalData:
            AdditionalData_.export(outfile, level, namespace_='iodef:', name_='AdditionalData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
        value = find_attr_value_('interface', node)
        if value is not None and 'interface' not in already_processed:
            already_processed.add('interface')
            self.interface = value
        value = find_attr_value_('category', node)
        if value is not None and 'category' not in already_processed:
            already_processed.add('category')
            self.category = value
        value = find_attr_value_('ext-category', node)
        if value is not None and 'ext-category' not in already_processed:
            already_processed.add('ext-category')
            self.ext_category = value
        value = find_attr_value_('spoofed', node)
        if value is not None and 'spoofed' not in already_processed:
            already_processed.add('spoofed')
            self.spoofed = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Node':
            obj_ = Node.factory()
            obj_.build(child_)
            self.Node = obj_
            obj_.original_tagname_ = 'Node'
        elif nodeName_ == 'Service':
            obj_ = Service.factory()
            obj_.build(child_)
            self.Service.append(obj_)
            obj_.original_tagname_ = 'Service'
        elif nodeName_ == 'OperatingSystem':
            obj_ = SoftwareType.factory()
            obj_.build(child_)
            self.OperatingSystem.append(obj_)
            obj_.original_tagname_ = 'OperatingSystem'
        elif nodeName_ == 'Counter':
            obj_ = Counter.factory()
            obj_.build(child_)
            self.Counter.append(obj_)
            obj_.original_tagname_ = 'Counter'
        elif nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'AdditionalData':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.AdditionalData.append(obj_)
            obj_.original_tagname_ = 'AdditionalData'
# end class System


class Node(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NodeName=None, Address=None, Location=None, DateTime=None, NodeRole=None, Counter=None):
        self.original_tagname_ = None
        if NodeName is None:
            self.NodeName = []
        else:
            self.NodeName = NodeName
        if Address is None:
            self.Address = []
        else:
            self.Address = Address
        self.Location = Location
        if isinstance(DateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = DateTime
        self.DateTime = initvalue_
        if NodeRole is None:
            self.NodeRole = []
        else:
            self.NodeRole = NodeRole
        if Counter is None:
            self.Counter = []
        else:
            self.Counter = Counter
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Node)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Node.subclass:
            return Node.subclass(*args_, **kwargs_)
        else:
            return Node(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NodeName(self): return self.NodeName
    def set_NodeName(self, NodeName): self.NodeName = NodeName
    def add_NodeName(self, value): self.NodeName.append(value)
    def insert_NodeName_at(self, index, value): self.NodeName.insert(index, value)
    def replace_NodeName_at(self, index, value): self.NodeName[index] = value
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def add_Address(self, value): self.Address.append(value)
    def insert_Address_at(self, index, value): self.Address.insert(index, value)
    def replace_Address_at(self, index, value): self.Address[index] = value
    def get_Location(self): return self.Location
    def set_Location(self, Location): self.Location = Location
    def get_DateTime(self): return self.DateTime
    def set_DateTime(self, DateTime): self.DateTime = DateTime
    def get_NodeRole(self): return self.NodeRole
    def set_NodeRole(self, NodeRole): self.NodeRole = NodeRole
    def add_NodeRole(self, value): self.NodeRole.append(value)
    def insert_NodeRole_at(self, index, value): self.NodeRole.insert(index, value)
    def replace_NodeRole_at(self, index, value): self.NodeRole[index] = value
    def get_Counter(self): return self.Counter
    def set_Counter(self, Counter): self.Counter = Counter
    def add_Counter(self, value): self.Counter.append(value)
    def insert_Counter_at(self, index, value): self.Counter.insert(index, value)
    def replace_Counter_at(self, index, value): self.Counter[index] = value
    def hasContent_(self):
        if (
            self.NodeName or
            self.Address or
            self.Location is not None or
            self.DateTime is not None or
            self.NodeRole or
            self.Counter
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Node', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Node')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Node')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Node', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Node'):
        pass
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Node', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for NodeName_ in self.NodeName:
            NodeName_.export(outfile, level, namespace_, name_='NodeName', pretty_print=pretty_print)
        for Address_ in self.Address:
            Address_.export(outfile, level, namespace_='iodef:', name_='Address', pretty_print=pretty_print)
        if self.Location is not None:
            self.Location.export(outfile, level, namespace_='iodef:', name_='Location', pretty_print=pretty_print)
        if self.DateTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:DateTime>%s</iodef:DateTime>%s' % (self.gds_format_datetime(self.DateTime, input_name='DateTime'), eol_))
        for NodeRole_ in self.NodeRole:
            NodeRole_.export(outfile, level, namespace_='iodef:', name_='NodeRole', pretty_print=pretty_print)
        for Counter_ in self.Counter:
            Counter_.export(outfile, level, namespace_='iodef:', name_='Counter', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NodeName':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.NodeName.append(obj_)
            obj_.original_tagname_ = 'NodeName'
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.Address.append(obj_)
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Location':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Location = obj_
            obj_.original_tagname_ = 'Location'
        elif nodeName_ == 'DateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.DateTime = dval_
        elif nodeName_ == 'NodeRole':
            obj_ = NodeRole.factory()
            obj_.build(child_)
            self.NodeRole.append(obj_)
            obj_.original_tagname_ = 'NodeRole'
        elif nodeName_ == 'Counter':
            obj_ = Counter.factory()
            obj_.build(child_)
            self.Counter.append(obj_)
            obj_.original_tagname_ = 'Counter'
# end class Node


class Address(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, category='ipv4-addr', ext_category=None, vlan_name=None, vlan_num=None, valueOf_=None):
        self.original_tagname_ = None
        self.category = _cast(None, category)
        self.ext_category = _cast(None, ext_category)
        self.vlan_name = _cast(None, vlan_name)
        self.vlan_num = _cast(int, vlan_num)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Address)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Address.subclass:
            return Address.subclass(*args_, **kwargs_)
        else:
            return Address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_category(self): return self.category
    def set_category(self, category): self.category = category
    def get_ext_category(self): return self.ext_category
    def set_ext_category(self, ext_category): self.ext_category = ext_category
    def get_vlan_name(self): return self.vlan_name
    def set_vlan_name(self, vlan_name): self.vlan_name = vlan_name
    def get_vlan_num(self): return self.vlan_num
    def set_vlan_num(self, vlan_num): self.vlan_num = vlan_num
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Address', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Address')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Address')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Address', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Address'):
        if self.category != "ipv4-addr" and 'category' not in already_processed:
            already_processed.add('category')
            outfile.write(' category=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.category), input_name='category')), ))
        if self.ext_category is not None and 'ext_category' not in already_processed:
            already_processed.add('ext_category')
            outfile.write(' ext-category=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_category), input_name='ext-category')), ))
        if self.vlan_name is not None and 'vlan_name' not in already_processed:
            already_processed.add('vlan_name')
            outfile.write(' vlan-name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.vlan_name), input_name='vlan-name')), ))
        if self.vlan_num is not None and 'vlan_num' not in already_processed:
            already_processed.add('vlan_num')
            outfile.write(' vlan-num="%s"' % self.gds_format_integer(self.vlan_num, input_name='vlan-num'))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Address', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('category', node)
        if value is not None and 'category' not in already_processed:
            already_processed.add('category')
            self.category = value
        value = find_attr_value_('ext-category', node)
        if value is not None and 'ext-category' not in already_processed:
            already_processed.add('ext-category')
            self.ext_category = value
        value = find_attr_value_('vlan-name', node)
        if value is not None and 'vlan-name' not in already_processed:
            already_processed.add('vlan-name')
            self.vlan_name = value
        value = find_attr_value_('vlan-num', node)
        if value is not None and 'vlan-num' not in already_processed:
            already_processed.add('vlan-num')
            try:
                self.vlan_num = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Address


class NodeRole(MLStringType):
    subclass = None
    superclass = MLStringType
    def __init__(self, lang=None, category=None, ext_category=None, valueOf_=None):
        self.original_tagname_ = None
        super(NodeRole, self).__init__(lang, valueOf_, )
        self.category = _cast(None, category)
        self.ext_category = _cast(None, ext_category)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NodeRole)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NodeRole.subclass:
            return NodeRole.subclass(*args_, **kwargs_)
        else:
            return NodeRole(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_category(self): return self.category
    def set_category(self, category): self.category = category
    def get_ext_category(self): return self.ext_category
    def set_ext_category(self, ext_category): self.ext_category = ext_category
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(NodeRole, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='NodeRole', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NodeRole')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NodeRole')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='NodeRole', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='NodeRole'):
        super(NodeRole, self).exportAttributes(outfile, level, already_processed, namespace_, name_='NodeRole')
        if self.category is not None and 'category' not in already_processed:
            already_processed.add('category')
            outfile.write(' category=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.category), input_name='category')), ))
        if self.ext_category is not None and 'ext_category' not in already_processed:
            already_processed.add('ext_category')
            outfile.write(' ext-category=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_category), input_name='ext-category')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='NodeRole', fromsubclass_=False, pretty_print=True):
        super(NodeRole, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('category', node)
        if value is not None and 'category' not in already_processed:
            already_processed.add('category')
            self.category = value
        value = find_attr_value_('ext-category', node)
        if value is not None and 'ext-category' not in already_processed:
            already_processed.add('ext-category')
            self.ext_category = value
        super(NodeRole, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class NodeRole


class Service(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ip_protocol=None, Port=None, Portlist=None, ProtoType=None, ProtoCode=None, ProtoField=None, Application=None):
        self.original_tagname_ = None
        self.ip_protocol = _cast(int, ip_protocol)
        self.Port = Port
        self.Portlist = Portlist
        self.validate_PortlistType(self.Portlist)
        self.ProtoType = ProtoType
        self.ProtoCode = ProtoCode
        self.ProtoField = ProtoField
        self.Application = Application
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Service)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Service.subclass:
            return Service.subclass(*args_, **kwargs_)
        else:
            return Service(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Port(self): return self.Port
    def set_Port(self, Port): self.Port = Port
    def get_Portlist(self): return self.Portlist
    def set_Portlist(self, Portlist): self.Portlist = Portlist
    def get_ProtoType(self): return self.ProtoType
    def set_ProtoType(self, ProtoType): self.ProtoType = ProtoType
    def get_ProtoCode(self): return self.ProtoCode
    def set_ProtoCode(self, ProtoCode): self.ProtoCode = ProtoCode
    def get_ProtoField(self): return self.ProtoField
    def set_ProtoField(self, ProtoField): self.ProtoField = ProtoField
    def get_Application(self): return self.Application
    def set_Application(self, Application): self.Application = Application
    def get_ip_protocol(self): return self.ip_protocol
    def set_ip_protocol(self, ip_protocol): self.ip_protocol = ip_protocol
    def validate_PortlistType(self, value):
        # Validate type PortlistType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_PortlistType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_PortlistType_patterns_, ))
    validate_PortlistType_patterns_ = [['^\\d+(\\-\\d+)?(,\\d+(\\-\\d+)?)*$']]
    def hasContent_(self):
        if (
            self.Port is not None or
            self.Portlist is not None or
            self.ProtoType is not None or
            self.ProtoCode is not None or
            self.ProtoField is not None or
            self.Application is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Service', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Service')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Service')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Service', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Service'):
        if self.ip_protocol is not None and 'ip_protocol' not in already_processed:
            already_processed.add('ip_protocol')
            outfile.write(' ip_protocol="%s"' % self.gds_format_integer(self.ip_protocol, input_name='ip_protocol'))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Service', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Port is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:Port>%s</iodef:Port>%s' % (self.gds_format_integer(self.Port, input_name='Port'), eol_))
        if self.Portlist is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:Portlist>%s</iodef:Portlist>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Portlist), input_name='Portlist')), eol_))
        if self.ProtoType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:ProtoType>%s</iodef:ProtoType>%s' % (self.gds_format_integer(self.ProtoType, input_name='ProtoType'), eol_))
        if self.ProtoCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:ProtoCode>%s</iodef:ProtoCode>%s' % (self.gds_format_integer(self.ProtoCode, input_name='ProtoCode'), eol_))
        if self.ProtoField is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:ProtoField>%s</iodef:ProtoField>%s' % (self.gds_format_integer(self.ProtoField, input_name='ProtoField'), eol_))
        if self.Application is not None:
            self.Application.export(outfile, level, namespace_='iodef:', name_='Application', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ip_protocol', node)
        if value is not None and 'ip_protocol' not in already_processed:
            already_processed.add('ip_protocol')
            try:
                self.ip_protocol = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Port':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Port')
            self.Port = ival_
        elif nodeName_ == 'Portlist':
            Portlist_ = child_.text
            Portlist_ = self.gds_validate_string(Portlist_, node, 'Portlist')
            self.Portlist = Portlist_
            # validate type PortlistType
            self.validate_PortlistType(self.Portlist)
        elif nodeName_ == 'ProtoType':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ProtoType')
            self.ProtoType = ival_
        elif nodeName_ == 'ProtoCode':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ProtoCode')
            self.ProtoCode = ival_
        elif nodeName_ == 'ProtoField':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ProtoField')
            self.ProtoField = ival_
        elif nodeName_ == 'Application':
            obj_ = SoftwareType.factory()
            obj_.build(child_)
            self.Application = obj_
            obj_.original_tagname_ = 'Application'
# end class Service


class Counter(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, ext_type=None, meaning=None, duration=None, ext_duration=None, valueOf_=None):
        self.original_tagname_ = None
        self.type_ = _cast(None, type_)
        self.ext_type = _cast(None, ext_type)
        self.meaning = _cast(None, meaning)
        self.duration = _cast(None, duration)
        self.ext_duration = _cast(None, ext_duration)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Counter)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Counter.subclass:
            return Counter.subclass(*args_, **kwargs_)
        else:
            return Counter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_ext_type(self): return self.ext_type
    def set_ext_type(self, ext_type): self.ext_type = ext_type
    def get_meaning(self): return self.meaning
    def set_meaning(self, meaning): self.meaning = meaning
    def get_duration(self): return self.duration
    def set_duration(self, duration): self.duration = duration
    def get_ext_duration(self): return self.ext_duration
    def set_ext_duration(self, ext_duration): self.ext_duration = ext_duration
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Counter', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Counter')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Counter')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Counter', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Counter'):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.type_), input_name='type')), ))
        if self.ext_type is not None and 'ext_type' not in already_processed:
            already_processed.add('ext_type')
            outfile.write(' ext-type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_type), input_name='ext-type')), ))
        if self.meaning is not None and 'meaning' not in already_processed:
            already_processed.add('meaning')
            outfile.write(' meaning=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.meaning), input_name='meaning')), ))
        if self.duration is not None and 'duration' not in already_processed:
            already_processed.add('duration')
            outfile.write(' duration=%s' % (quote_attrib(self.duration), ))
        if self.ext_duration is not None and 'ext_duration' not in already_processed:
            already_processed.add('ext_duration')
            outfile.write(' ext-duration=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_duration), input_name='ext-duration')), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Counter', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
        value = find_attr_value_('ext-type', node)
        if value is not None and 'ext-type' not in already_processed:
            already_processed.add('ext-type')
            self.ext_type = value
        value = find_attr_value_('meaning', node)
        if value is not None and 'meaning' not in already_processed:
            already_processed.add('meaning')
            self.meaning = value
        value = find_attr_value_('duration', node)
        if value is not None and 'duration' not in already_processed:
            already_processed.add('duration')
            self.duration = value
        value = find_attr_value_('ext-duration', node)
        if value is not None and 'ext-duration' not in already_processed:
            already_processed.add('ext-duration')
            self.ext_duration = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Counter


class Record(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, restriction=None, RecordData=None):
        self.original_tagname_ = None
        self.restriction = _cast(None, restriction)
        if RecordData is None:
            self.RecordData = []
        else:
            self.RecordData = RecordData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Record)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Record.subclass:
            return Record.subclass(*args_, **kwargs_)
        else:
            return Record(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RecordData(self): return self.RecordData
    def set_RecordData(self, RecordData): self.RecordData = RecordData
    def add_RecordData(self, value): self.RecordData.append(value)
    def insert_RecordData_at(self, index, value): self.RecordData.insert(index, value)
    def replace_RecordData_at(self, index, value): self.RecordData[index] = value
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def hasContent_(self):
        if (
            self.RecordData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='Record', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Record')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Record')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='Record', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='Record'):
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='Record', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordData_ in self.RecordData:
            RecordData_.export(outfile, level, namespace_='iodef:', name_='RecordData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RecordData':
            obj_ = RecordData.factory()
            obj_.build(child_)
            self.RecordData.append(obj_)
            obj_.original_tagname_ = 'RecordData'
# end class Record


class RecordData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, restriction=None, DateTime=None, Description=None, Application=None, RecordPattern=None, RecordItem=None, AdditionalData=None):
        self.original_tagname_ = None
        self.restriction = _cast(None, restriction)
        if isinstance(DateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = DateTime
        self.DateTime = initvalue_
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
        self.Application = Application
        if RecordPattern is None:
            self.RecordPattern = []
        else:
            self.RecordPattern = RecordPattern
        if RecordItem is None:
            self.RecordItem = []
        else:
            self.RecordItem = RecordItem
        if AdditionalData is None:
            self.AdditionalData = []
        else:
            self.AdditionalData = AdditionalData
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordData.subclass:
            return RecordData.subclass(*args_, **kwargs_)
        else:
            return RecordData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DateTime(self): return self.DateTime
    def set_DateTime(self, DateTime): self.DateTime = DateTime
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def get_Application(self): return self.Application
    def set_Application(self, Application): self.Application = Application
    def get_RecordPattern(self): return self.RecordPattern
    def set_RecordPattern(self, RecordPattern): self.RecordPattern = RecordPattern
    def add_RecordPattern(self, value): self.RecordPattern.append(value)
    def insert_RecordPattern_at(self, index, value): self.RecordPattern.insert(index, value)
    def replace_RecordPattern_at(self, index, value): self.RecordPattern[index] = value
    def get_RecordItem(self): return self.RecordItem
    def set_RecordItem(self, RecordItem): self.RecordItem = RecordItem
    def add_RecordItem(self, value): self.RecordItem.append(value)
    def insert_RecordItem_at(self, index, value): self.RecordItem.insert(index, value)
    def replace_RecordItem_at(self, index, value): self.RecordItem[index] = value
    def get_AdditionalData(self): return self.AdditionalData
    def set_AdditionalData(self, AdditionalData): self.AdditionalData = AdditionalData
    def add_AdditionalData(self, value): self.AdditionalData.append(value)
    def insert_AdditionalData_at(self, index, value): self.AdditionalData.insert(index, value)
    def replace_AdditionalData_at(self, index, value): self.AdditionalData[index] = value
    def get_restriction(self): return self.restriction
    def set_restriction(self, restriction): self.restriction = restriction
    def hasContent_(self):
        if (
            self.DateTime is not None or
            self.Description or
            self.Application is not None or
            self.RecordPattern or
            self.RecordItem or
            self.AdditionalData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='RecordData', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RecordData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='RecordData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='RecordData'):
        if self.restriction is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            outfile.write(' restriction=%s' % (quote_attrib(self.restriction), ))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='RecordData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DateTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<iodef:DateTime>%s</iodef:DateTime>%s' % (self.gds_format_datetime(self.DateTime, input_name='DateTime'), eol_))
        for Description_ in self.Description:
            Description_.export(outfile, level, namespace_='iodef:', name_='Description', pretty_print=pretty_print)
        if self.Application is not None:
            self.Application.export(outfile, level, namespace_='iodef:', name_='Application', pretty_print=pretty_print)
        for RecordPattern_ in self.RecordPattern:
            RecordPattern_.export(outfile, level, namespace_='iodef:', name_='RecordPattern', pretty_print=pretty_print)
        for RecordItem_ in self.RecordItem:
            RecordItem_.export(outfile, level, namespace_='iodef:', name_='RecordItem', pretty_print=pretty_print)
        for AdditionalData_ in self.AdditionalData:
            AdditionalData_.export(outfile, level, namespace_='iodef:', name_='AdditionalData', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('restriction', node)
        if value is not None and 'restriction' not in already_processed:
            already_processed.add('restriction')
            self.restriction = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.DateTime = dval_
        elif nodeName_ == 'Description':
            class_obj_ = self.get_class_obj_(child_, MLStringType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Description.append(obj_)
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Application':
            obj_ = SoftwareType.factory()
            obj_.build(child_)
            self.Application = obj_
            obj_.original_tagname_ = 'Application'
        elif nodeName_ == 'RecordPattern':
            obj_ = RecordPattern.factory()
            obj_.build(child_)
            self.RecordPattern.append(obj_)
            obj_.original_tagname_ = 'RecordPattern'
        elif nodeName_ == 'RecordItem':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.RecordItem.append(obj_)
            obj_.original_tagname_ = 'RecordItem'
        elif nodeName_ == 'AdditionalData':
            obj_ = ExtensionType.factory()
            obj_.build(child_)
            self.AdditionalData.append(obj_)
            obj_.original_tagname_ = 'AdditionalData'
# end class RecordData


class RecordPattern(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, ext_type=None, offset=None, offsetunit='line', ext_offsetunit=None, instance=None, valueOf_=None):
        self.original_tagname_ = None
        self.type_ = _cast(None, type_)
        self.ext_type = _cast(None, ext_type)
        self.offset = _cast(int, offset)
        self.offsetunit = _cast(None, offsetunit)
        self.ext_offsetunit = _cast(None, ext_offsetunit)
        self.instance = _cast(int, instance)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordPattern)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordPattern.subclass:
            return RecordPattern.subclass(*args_, **kwargs_)
        else:
            return RecordPattern(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_ext_type(self): return self.ext_type
    def set_ext_type(self, ext_type): self.ext_type = ext_type
    def get_offset(self): return self.offset
    def set_offset(self, offset): self.offset = offset
    def get_offsetunit(self): return self.offsetunit
    def set_offsetunit(self, offsetunit): self.offsetunit = offsetunit
    def get_ext_offsetunit(self): return self.ext_offsetunit
    def set_ext_offsetunit(self, ext_offsetunit): self.ext_offsetunit = ext_offsetunit
    def get_instance(self): return self.instance
    def set_instance(self, instance): self.instance = instance
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='iodef:', name_='RecordPattern', namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordPattern')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RecordPattern')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='iodef:', name_='RecordPattern', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='iodef:', name_='RecordPattern'):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.type_), input_name='type')), ))
        if self.ext_type is not None and 'ext_type' not in already_processed:
            already_processed.add('ext_type')
            outfile.write(' ext-type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_type), input_name='ext-type')), ))
        if self.offset is not None and 'offset' not in already_processed:
            already_processed.add('offset')
            outfile.write(' offset="%s"' % self.gds_format_integer(self.offset, input_name='offset'))
        if self.offsetunit != "line" and 'offsetunit' not in already_processed:
            already_processed.add('offsetunit')
            outfile.write(' offsetunit=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.offsetunit), input_name='offsetunit')), ))
        if self.ext_offsetunit is not None and 'ext_offsetunit' not in already_processed:
            already_processed.add('ext_offsetunit')
            outfile.write(' ext-offsetunit=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ext_offsetunit), input_name='ext-offsetunit')), ))
        if self.instance is not None and 'instance' not in already_processed:
            already_processed.add('instance')
            outfile.write(' instance="%s"' % self.gds_format_integer(self.instance, input_name='instance'))
    def exportChildren(self, outfile, level, namespace_='iodef:', name_='RecordPattern', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
        value = find_attr_value_('ext-type', node)
        if value is not None and 'ext-type' not in already_processed:
            already_processed.add('ext-type')
            self.ext_type = value
        value = find_attr_value_('offset', node)
        if value is not None and 'offset' not in already_processed:
            already_processed.add('offset')
            try:
                self.offset = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('offsetunit', node)
        if value is not None and 'offsetunit' not in already_processed:
            already_processed.add('offsetunit')
            self.offsetunit = value
        value = find_attr_value_('ext-offsetunit', node)
        if value is not None and 'ext-offsetunit' not in already_processed:
            already_processed.add('ext-offsetunit')
            self.ext_offsetunit = value
        value = find_attr_value_('instance', node)
        if value is not None and 'instance' not in already_processed:
            already_processed.add('instance')
            try:
                self.instance = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class RecordPattern


GDSClassesMapping = {
    'AdditionalData': ExtensionType,
    'AdditionalData': ExtensionType,
    'Application': SoftwareType,
    'Application': SoftwareType,
    'ApplicationHeaderField': ExtensionType,
    'AssociatedSoftware': SoftwareType,
    'BusinessImpact': BusinessImpactType,
    'CanonicalizationMethod': CanonicalizationMethodType,
    'Cause': MLStringType,
    'ContactName': MLStringType,
    'ContactName': MLStringType,
    'ContactTitle': MLStringType,
    'DSAKeyValue': DSAKeyValueType,
    'Description': MLStringType,
    'Description': MLStringType,
    'DigestMethod': DigestMethodType,
    'Email': ContactMeansType,
    'EmailHeaderField': ExtensionType,
    'EventReport': BasicStructure,
    'Fax': ContactMeansType,
    'FileProperties': ExtensionType,
    'FuzzyHashValue': ExtensionType,
    'IncidentCategory': MLStringType,
    'IncidentID': IncidentIDType,
    'IncidentID': IncidentIDType,
    'IntendedImpact': BusinessImpactType,
    'KeyInfo': KeyInfoType,
    'KeyValue': KeyValueType,
    'Location': MLStringType,
    'Location': MLStringType,
    'Manifest': ManifestType,
    'MitigatingFactor': MLStringType,
    'Object': ObjectType,
    'OperatingSystem': SoftwareType,
    'OperatingSystem': SoftwareType,
    'PAddress': MLStringType,
    'PGPData': PGPDataType,
    'Platform': BasicStructure,
    'RSAKeyValue': RSAKeyValueType,
    'RecordItem': ExtensionType,
    'RecordItem': ExtensionType,
    'Reference': ReferenceType,
    'RelatedDNS': ExtensionType,
    'Remediation': BasicStructure,
    'RetrievalMethod': RetrievalMethodType,
    'SPKIData': SPKIDataType,
    'Scoring': BasicStructure,
    'Signature': SignatureType,
    'SignatureMethod': SignatureMethodType,
    'SignatureProperties': SignaturePropertiesType,
    'SignatureProperty': SignaturePropertyType,
    'SignatureValue': SignatureValueType,
    'SignedInfo': SignedInfoType,
    'Telephone': ContactMeansType,
    'Transform': TransformType,
    'Transforms': TransformsType,
    'Verification': BasicStructure,
    'X509Data': X509DataType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'IncidentIDType'
        rootClass = IncidentIDType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'IncidentIDType'
        rootClass = IncidentIDType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from StringIO import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'IncidentIDType'
        rootClass = IncidentIDType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:iodef="urn:ietf:params:xml:ns:iodef-2.0"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'IncidentIDType'
        rootClass = IncidentIDType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from iodef2_api import *\n\n')
        sys.stdout.write('import iodef2_api as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "Address",
    "AlternativeID",
    "AlternativeIndicatorID",
    "ApplicationHeader",
    "Assessment",
    "AttackPattern",
    "AttackPhase",
    "BasicStructure",
    "BulkObservable",
    "BulkObservableFormat",
    "BulkObservableList",
    "BusinessImpactType",
    "Campaign",
    "CanonicalizationMethodType",
    "Certificate",
    "CertificateData",
    "Confidence",
    "Contact",
    "ContactMeansType",
    "Counter",
    "DSAKeyValueType",
    "DetectionPattern",
    "DigestMethodType",
    "Discovery",
    "DomainContacts",
    "DomainData",
    "EmailData",
    "EventData",
    "Expectation",
    "ExtensionType",
    "File",
    "FileData",
    "Flow",
    "FuzzyHash",
    "Hash",
    "HashData",
    "History",
    "HistoryItem",
    "IODEF_Document",
    "Impact",
    "Incident",
    "IncidentIDType",
    "Indicator",
    "IndicatorData",
    "IndicatorExpression",
    "IndicatorID",
    "IndicatorReference",
    "Key",
    "KeyInfoType",
    "KeyValueType",
    "MLStringType",
    "ManifestType",
    "Method",
    "MonetaryImpact",
    "Nameservers",
    "Node",
    "NodeRole",
    "ObjectType",
    "Observable",
    "ObservableReference",
    "PGPDataType",
    "PostalAddress",
    "RSAKeyValueType",
    "Record",
    "RecordData",
    "RecordPattern",
    "Reference",
    "ReferenceName",
    "ReferenceType",
    "RegistryHandle",
    "RelatedActivity",
    "RetrievalMethodType",
    "SPKIDataType",
    "Service",
    "ServiceName",
    "SignatureData",
    "SignatureMethodType",
    "SignaturePropertiesType",
    "SignaturePropertyType",
    "SignatureType",
    "SignatureValueType",
    "SignedInfoType",
    "SoftwareReference",
    "SoftwareType",
    "System",
    "SystemImpact",
    "ThreatActor",
    "TimeImpact",
    "TransformType",
    "TransformsType",
    "Vulnerability",
    "Weakness",
    "WindowsRegistryKeysModified",
    "X509DataType",
    "X509IssuerSerialType",
    "XMLDATA"
]
