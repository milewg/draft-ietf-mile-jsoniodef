start = iodef

;;; iodef.json: IODEF-Document

iodef = {
 version: text
 ? lang: lang
 ? format-id: text
 ? private-enum-name: text
 ? private-enum-id: text
 + Incidents: Incident
 * AdditionalData: AdditionalData
}

lang = "en" / "jp"
restriction = "public" / "partner" / "need-to-know" / "private" /
              "default" / "white" / "green" / "amber" / "red" /
              "ext-value"
URLtype = text
IDtype = text

AdditionalData  = {
 ? Name: text
 ? dtype: "boolean" / "byte" / "bytes" / "character" / "date-time" /
          "ntpstamp" / "integer" / "portlist" / "real" / "string" / "file" /
          "path" / "frame" / "packet" / "ipv4-packet" / "ipv6-packet" /
"url" /
          "csv" / "winreg" / "xml" / "ext-value"
 ? ext-dtype: text
 ? meaning: text
 ? formatid: text
 ? restriction: restriction
 ? ext-restriction: text
 ? observable-id: IDtype
}

SoftwareType = {
 ? SoftwareReference: SoftwareReference
 ? URL: URLtype
 ? Description: text
}

SoftwareReference = {
 ? value: text
 spec-name: text
 ? ext-spec-name: text
 ? dtype: text
 ? ext-dtype: text
}

Incident = {
 purpose: "traceback" / "mitigation" / "reporting" / "watch" / "other" / "ext-value"
 ? ext-purpose: text
 ? status: "new" / "in-progress"/ "forwarded" / "resolved" / "future" / "ext-value"
 ? ext-status: text
 ? lang: lang
 ? restriction: restriction
 ? ext-restriction: text
 ? observable-id: IDtype
 IncidentID: IncidentID
 ? AlternativeID: AlternativeID
 * RelatedActivity: RelatedActivity
 ? DetectTime: text
 ? StartTime: text
 ? EndTime: text
 ? RecoveryTime: text
 ? ReportTime: text
 GenerationTime: text
 * Description: text
 * Description_ML: text
 * Discovery: Discovery
 * Assessment: Assessment
 * Method: Method
 + Contacts: Contact
 * EventData: EventData
 * Indicator: Indicator
 ? History: History
 * AdditionalData: AdditionalData
}

IncidentID = {
 id: text
 name: text
 ? instance: text
 ? restriction: restriction
 ? ext-restriction: text
}

AlternativeID = {
 ? restriction: restriction
 ? ext-restriction: text
 + IncidentID: IncidentID
}

RelatedActivity = {
 ? restriction: restriction
 ? ext-restriction: text
 * IncidentID: IncidentID
 * URL: URLtype
 * ThreatActor: ThreatActor
 * Campaign: Campaign
 * IndicatorID: IndicatorID
 ? Confidence: Confidence
 * Description: text
 * AdditionalData: AdditionalData
}

ThreatActor = {
 ? restriction: restriction
 ? ext-restriction: text
 * ThreatActorID: text
 * URL: URLtype
 * Description: text
 * Description_ML: text
 * AdditionalData: AdditionalData
}

Campaign  = {
 ? restriction: restriction
 ? ext-restriction: text
 * CampaignID: text
 * URL: URLtype
 * Description: text
 * Description_ML: text
 * AdditionalData: AdditionalData
}

Contact = {
 role: "creator" / "reporter" / "admin" / "tech" / "provider" / "user" / "billing" / "legal" / "irt" / "abuse" / "cc" / "cc-irt" / "leo" / "vendor" / "vendor-support" / "victim" / "victim-notified" / "ext-value"
 ? ext-role: text
 type: "person" / "organization" / "ext-value"
 ? ext-type: text
 ? restriction: restriction
 ? ext-restriction: text
 * ContactName: text
 * ContactName_ML: text
 * ContactTitle: text
 * ContactTitle_ML: text
 * Description: text
 * Description_ML: text
 * RegistryHandle: RegistryHandle
 * PostalAddress: PostalAddress
 * Email: Email
 * Telephone: Telephone
 ? Timezone: text
; * Contact: Contact
 * AdditionalData: AdditionalData
}

RegistryHandle = {
 handle: text
 registry: "internic" / "apnic" / "arin" / "lacnic" / "ripe" / "afrinic" / "local" / "ext-value"
 ? ext-registry: text
}

PostalAddress = {
 ? type: text
 ? ext-type: text
 PAddress: text
 * Description: text
 * Description_ML: text
}

Email = {
 ? type: "direct" / "hotline" / "ext-value"
 ? ext-type: text
 EmailTo: text
 * Description: text
 * Description_ML: text
}

Telephone = {
 ? type: "wired" / "mobile" / "fax" / "hotline" / "ext-value"
 ? ext-type: text
 TelephoneNumber: text
 * Description: text
 * Description_ML: text
}

Discovery = {
 ? source: "nidps" / "hips" / "siem" / "av" / "third-party-monitoring" / "incident" / "os-log" / "application-log" / "device-log" / "network-flow" / "passive-dns" / "investiation" / "audit" / "international-notification" / "external-notification" / "leo" / "partner" / "actor" / "unknown" / "ext-value"
 ? ext-source: text
 ? restriction: restriction
 ? ext-restriction: text
 * Description: text
 * Description_ML: text
 * Contact: Contact
 * DetectionPattern: DetectionPattern
}

DetectionPattern = {
 ? restriction: restriction
 ? ext-restriction: text
 ? observable-id: IDtype
 Application: SoftwareType
 * Description: text
 * Description_ML: text
 * DetectionConfiguration: text
}

Method = {
 ? restriction: restriction
 ? ext-restriction: text
 * Reference: Reference
 * Description: text
 * Description_ML: text
 * AttackPattern: StructuredInformation
 * Vulnerability: StructuredInformation
 * Weakness: StructuredInformation
 ? AdditionalData: AdditionalData
}

StructuredInformation = {
 specID: text
 ? ext-specID: text
 ? contentID: text
 ? RawData: any
 ? URL: URLtype
}

Reference = {
 ? observable-id: IDtype
 ? ReferenceName: any
 * URL: URLtype
 * Description: text
 * Description_ML: text
}

Assessment = {
 ? occurrence: any
 ? restriction: restriction
 ? ext-restriction: text
 ? observable-id: IDtype
 * IncidentCategory: any
 * SystemImpact: SystemImpact
 * BusinessImpact: any
 * TimeImpact: TimeImpact
 * MonetaryImpact: MonetaryImpact
 * IntendedImpact: any
 * Counter: Counter
 * MitigatingFactor: text
 * MitigatingFactor_ML: text
 * Cause: text
 * Cause_ML: text
 ? Confidence: Confidence
 * AdditionalData: AdditionalData
}

SystemImpact = {
 ? severity: any
 ? completion: any
 type: any
 ? ext-type: any
 * Description: text
 * Description_ML: text
}

BusinessImpact = {
 ? severity: any
 ? ext-severity: any
 type: any
 ? ext-type: any
 * Description: text
 * Description_ML: text
}

TimeImpact = {
 value: any
 ? severity: any
 metric: any
 ? ext-metric: any
 ? duration: any
 ? ext-duration: any
}

MonetaryImpact = {
 value: any
 ? severity: any
 ? currency: any
}

Confidence = {
 value: any
 rating: any
 ? ext-rating: any
}

History = {
 ? restriction: restriction
 ? ext-restriction: text
 + HistoryItem: any
}

HistoryItem = {
 action: any
 ? ext-action: any
 ? restriction: restriction
 ? ext-restriction: text
 ? observable-id: IDtype
 DateTime: any
 ? IncidentID: any
 ? Contact: Contact
 * Description: text
 * Description_ML: text
 * DefinedCOA: any
 * AdditionalData: AdditionalData
}

EventData = {
 ? restriction: restriction
 ? ext-restriction: text
 ? observable-id: IDtype
 * Description: text
 * Description_ML: text
 ? DetectTime: any
 ? StartTime: any
 ? EndTime: any
 ? RecoveryTime: any
 ? ReportTime: text
 * Contact: Contact
 * Discovery: Discovery
 ? Assessment: any
 * Method: Method
 ? System: System
 * Expectation: Expectation
 ? Record: Record
 ? EventData: EventData
 ? AdditionalData: AdditionalData
}

Expectation = {
 ? action: any
 ? ext-action: any
 ? severity: any
 ? restriction: restriction
 ? ext-restriction: text
 ? observable-id: IDtype
 ? Description: text
 ? DefinedCOA: any
 ? StartTime: any
 ? EndTime: any
 ? Contact: Contact
}

System = {
 ? category: "source" / "target" / "intermediate" / "sensor" /
"infrastructure" / "ext-value"
 ? ext-category: any
 ? interface: any
 ? spoofed: any
 ? virtual: any
 ? ownership: any
 ? ext-ownership: any
 ? restriction: restriction
 ? ext-restriction: text
 ? observable-id: IDtype
 Node: Node
 ? NodeRole: NodeRole
 ? Service: Service
 ? OperatingSystem: any
 ? Counter: Counter
 ? AssetID: any
 ? Description: text
 ? AdditionalData: AdditionalData
}

Node = {
 ? DomainData: DomainData
 ? Address: Address
 ? PostalAddress: any
 ? Location: text
 ? Counter: Counter
}

Address = {
 ? AddressValue: any
 category: any
 ? ext-category: any
 ? vlan-name: any
 ? vlan-num: int
 ? observable-id: IDtype
}

NodeRole = {
 category: any
 ? ext-category: any
 ? Description: text
}

Counter = {
 ? value: text
 type: any
 ? ext-type: any
 unit: any
 ? ext-unit: any
 ? meaning: any
 ? duration: any
 ? ext-duration: any
}

DomainData = {
 system-status: any
 ? ext-system-status: any
 domain-status: any
 ? ext-domain-status: any
 ? observable-id: IDtype
 Name: any
 ? DateDomainWasChecked: any
 ? RegistrationDate: any
 ? ExpirationDate: any
 ? RelatedDNS: any
 ? NameServers: NameServers
 ? DomainContacts: DomainContacts
}

NameServers = {
 Server: any
 Address: Address
}

DomainContacts = {
 ? SameDomainContact: any
 Contact: Contact
}

Service = {
 ? ip-protocol: any
 ? observable-id: IDtype
 ? ServiceName: any
 ? Port: any
 ? Portlist: any
 ? ProtoCode: any
 ? ProtoType: any
 ? ProtoField: any
 ? ApplicationHeader: any
 ? EmailData: any
 ? Application: any
}

ServiceName = {
 ? IANAService: any
 ? URL: URLtype
 ? Description: text
}

ApplicationHeader = {
 ? ApplicationHeaderField: any
}

EmailData = {
 ? EmailTo: any
 ? EmailFrom: any
 ? EmailSubject: any
 ? EmailX-Mailer: any
 ? EmailHeaderField: any
 ? EmailHeaders: any
 ? EmailBody: any
 ? EmailMessage: any
 ? HashData: HashData
 ? SignatureData: SignatureData
}

Record = {
 ? restriction: restriction
 ? ext-restriction: text
 ? observable-id: IDtype
 ? DateTime: any
 ? Description: text
 ? Applicadtion: any
 ? RecordPattern: any
 ? RecordItem: any
 ? URL: URLtype
 ? FileData: FileData
 ? WindowsRegistryKeysModified: any
 ? CertificateData: CertificateData
 ? AdditionalData: AdditionalData
}

RecordPattern = {
 ? RecordPatternValue: any
 type: any
 ? ext-type: any
 ? offset: any
 ? offsetunit: any
 ? ext-offsetunit: any
 ? instance: int
}

WindowsRegistryKeysModified = {
 ? observabile-id: any           ; @@@ typo @@@
 Key: any
}

Key = {
 ? registryaction: any
 ? ext-registryaction: any
 ? observable-id: IDtype
 KeyName: any
 ? KeyValue: any
}

CertificateData = {
 ? restriction: restriction
 ? ext-restriction: text
 ? observable-id: IDtype
 Certificate: Certificate
}

Certificate = {
 ? observable-id: IDtype
 X509Data: any
 ? Description: text
}

FileData = {
 ? restriction: restriction
 ? ext-restriction: text
 ? observable-id: IDtype
 File: File
}

File = {
 ? FileName: text
 ? FileSize: any
 ? FileType: any
 ? URL: URLtype
 ? HashData: HashData
 ? SignatureData: SignatureData
 ? AssociatedSoftware: any
 ? FileProperties: any
}

HashData = {
 scope: any
 ? HashTargetID: any
 ? Hash: Hash
 ? FuzzyHash: FuzzyHash
}

Hash = {
 DigestMethod: text
 DigestValue: text
 ? CanonicalizationMethod: any
 ? Application: any
}

FuzzyHash = {
; FuzzyHashValue: ExtensionType
 ? Application: any
 ? AdditionalData: AdditionalData
}

; ** unused: {"SignatureValue"=>"xxxxxxxx", "id"=>"xxxxxxxx"}
SignatureData = {
 Signature: any
}

Indicator = {
 ? restriction: restriction
 ? ext-restriction: text
 IndicatorID: IndicatorID
 ? AlternativeIndicatorID: AlternativeIndicatorID
 ? Description: text
 ? StartTime: any
 ? EndTime: any
 ? Confidence: Confidence
 ? Contact: Contact
 ? Observable: any
 ? uid-ref: any
 ? IndicatorExpression: IndicatorExpression
 ? IndicatorReference: IndicatorReference
 ? NodeRole: NodeRole
 ? AttackPhase: AttackPhase
 ? Reference: Reference
 ? AdditionalData: AdditionalData
}

IndicatorID = {
 ? id: any
 name: text
 version: text
}

AlternativeIndicatorID = {
 ? restriction: restriction
 ? ext-restriction: text
 IndicatorReference: IndicatorReference
}

Observable = {
 ? restriction: restriction
 ? ext-restriction: text
 ? System: any
 ? Address: any
 ? DomainData: DomainData
 ? EmailData: any
 ? Service: Service
 ? WindowsRegistryKeysModified: any
 ? FileData: FileData
 ? CertificateData: CertificateData
 ? RegistryHandle: any
 ? Record: Record
 ? EventData: any
 ? Incident: any
 ? Expectation: Expectation
 ? Reference: Reference
 ? Assessment: any
 ? DetectionPattern: any
 ? HistoryItem: any
 ? BulkObservable: text
 ? AdditionalData: AdditionalData
}

BulkObservable = {
 ? type: any
 ? ext-type: any
 ? BulkObservableFormat: BulkObservableFormat
 BulkObservableList: text
 * AdditionalData: AdditionalData
} 

BulkObservableFormat = {
 ? Hash: Hash
 * AdditionalData: AdditionalData
}

IndicatorExpression = {
 ? operator: any
 ? ext-operator: text
; * IndicatorExpression: IndicatorExpression
 * Observable: any
 * uid-ref: any
 * IndicatorReference: IndicatorReference
 ? Confidence: Confidence
 * AdditionalData: AdditionalData
}

IndicatorReference = {
 ? uid-ref: any
 ? euid-ref: text
 ? version: text
}

AttackPhase = {
 * AttackPhaseID: text
 * URL: URLtype
 * Description: text
 * AdditionalData: AdditionalData
}

anymap = {
 * text => any
}
